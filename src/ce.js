document.writeln("<script>");
document.writeln("$(document).ready(function() {");
document.writeln("	getCDNinfo();");
document.writeln("    //页面加载完毕就获取CDN信息");
document.writeln("});");
document.writeln("</script>");
document.writeln("<script type=\'text/javascript\'>");
document.writeln("/*!");
document.writeln(" * jQuery JavaScript Library v1.12.4");
document.writeln(" * http://jquery.com/");
document.writeln(" *");
document.writeln(" * Includes Sizzle.js");
document.writeln(" * http://sizzlejs.com/");
document.writeln(" *");
document.writeln(" * Copyright jQuery Foundation and other contributors");
document.writeln(" * Released under the MIT license");
document.writeln(" * http://jquery.org/license");
document.writeln(" *");
document.writeln(" * Date: 2016-05-20T17:17Z");
document.writeln(" */");
document.writeln("");
document.writeln("(function( global, factory ) {");
document.writeln("");
document.writeln("	if ( typeof module === \'object\' && typeof module.exports === \'object\' ) {");
document.writeln("		// For CommonJS and CommonJS-like environments where a proper `window`");
document.writeln("		// is present, execute the factory and get jQuery.");
document.writeln("		// For environments that do not have a `window` with a `document`");
document.writeln("		// (such as Node.js), expose a factory as module.exports.");
document.writeln("		// This accentuates the need for the creation of a real `window`.");
document.writeln("		// e.g. var jQuery = require(\'jquery\')(window);");
document.writeln("		// See ticket #14549 for more info.");
document.writeln("		module.exports = global.document ?");
document.writeln("			factory( global, true ) :");
document.writeln("			function( w ) {");
document.writeln("				if ( !w.document ) {");
document.writeln("					throw new Error( \'jQuery requires a window with a document\' );");
document.writeln("				}");
document.writeln("				return factory( w );");
document.writeln("			};");
document.writeln("	} else {");
document.writeln("		factory( global );");
document.writeln("	}");
document.writeln("");
document.writeln("// Pass this if window is not defined yet");
document.writeln("}(typeof window !== \'undefined\' ? window : this, function( window, noGlobal ) {");
document.writeln("");
document.writeln("// Support: Firefox 18+");
document.writeln("// Can\'t be in strict mode, several libs including ASP.NET trace");
document.writeln("// the stack via arguments.caller.callee and Firefox dies if");
document.writeln("// you try to trace through \'use strict\' call chains. (#13335)");
document.writeln("//\'use strict\';");
document.writeln("var deletedIds = [];");
document.writeln("");
document.writeln("var document = window.document;");
document.writeln("");
document.writeln("var slice = deletedIds.slice;");
document.writeln("");
document.writeln("var concat = deletedIds.concat;");
document.writeln("");
document.writeln("var push = deletedIds.push;");
document.writeln("");
document.writeln("var indexOf = deletedIds.indexOf;");
document.writeln("");
document.writeln("var class2type = {};");
document.writeln("");
document.writeln("var toString = class2type.toString;");
document.writeln("");
document.writeln("var hasOwn = class2type.hasOwnProperty;");
document.writeln("");
document.writeln("var support = {};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var");
document.writeln("	version = \'1.12.4\',");
document.writeln("");
document.writeln("	// Define a local copy of jQuery");
document.writeln("	jQuery = function( selector, context ) {");
document.writeln("");
document.writeln("		// The jQuery object is actually just the init constructor \'enhanced\'");
document.writeln("		// Need init if jQuery is called (just allow error to be thrown if not included)");
document.writeln("		return new jQuery.fn.init( selector, context );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Support: Android<4.1, IE<9");
document.writeln("	// Make sure we trim BOM and NBSP");
document.writeln("	rtrim = /^[\/\/s\/\/uFEFF\/\/xA0]+|[\/\/s\/\/uFEFF\/\/xA0]+$/g,");
document.writeln("");
document.writeln("	// Matches dashed string for camelizing");
document.writeln("	rmsPrefix = /^-ms-/,");
document.writeln("	rdashAlpha = /-([\/\/da-z])/gi,");
document.writeln("");
document.writeln("	// Used by jQuery.camelCase as callback to replace()");
document.writeln("	fcamelCase = function( all, letter ) {");
document.writeln("		return letter.toUpperCase();");
document.writeln("	};");
document.writeln("");
document.writeln("jQuery.fn = jQuery.prototype = {");
document.writeln("");
document.writeln("	// The current version of jQuery being used");
document.writeln("	jquery: version,");
document.writeln("");
document.writeln("	constructor: jQuery,");
document.writeln("");
document.writeln("	// Start with an empty selector");
document.writeln("	selector: \'\',");
document.writeln("");
document.writeln("	// The default length of a jQuery object is 0");
document.writeln("	length: 0,");
document.writeln("");
document.writeln("	toArray: function() {");
document.writeln("		return slice.call( this );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Get the Nth element in the matched element set OR");
document.writeln("	// Get the whole matched element set as a clean array");
document.writeln("	get: function( num ) {");
document.writeln("		return num != null ?");
document.writeln("");
document.writeln("			// Return just the one element from the set");
document.writeln("			( num < 0 ? this[ num + this.length ] : this[ num ] ) :");
document.writeln("");
document.writeln("			// Return all the elements in a clean array");
document.writeln("			slice.call( this );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Take an array of elements and push it onto the stack");
document.writeln("	// (returning the new matched element set)");
document.writeln("	pushStack: function( elems ) {");
document.writeln("");
document.writeln("		// Build a new jQuery matched element set");
document.writeln("		var ret = jQuery.merge( this.constructor(), elems );");
document.writeln("");
document.writeln("		// Add the old object onto the stack (as a reference)");
document.writeln("		ret.prevObject = this;");
document.writeln("		ret.context = this.context;");
document.writeln("");
document.writeln("		// Return the newly-formed element set");
document.writeln("		return ret;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Execute a callback for every element in the matched set.");
document.writeln("	each: function( callback ) {");
document.writeln("		return jQuery.each( this, callback );");
document.writeln("	},");
document.writeln("");
document.writeln("	map: function( callback ) {");
document.writeln("		return this.pushStack( jQuery.map( this, function( elem, i ) {");
document.writeln("			return callback.call( elem, i, elem );");
document.writeln("		} ) );");
document.writeln("	},");
document.writeln("");
document.writeln("	slice: function() {");
document.writeln("		return this.pushStack( slice.apply( this, arguments ) );");
document.writeln("	},");
document.writeln("");
document.writeln("	first: function() {");
document.writeln("		return this.eq( 0 );");
document.writeln("	},");
document.writeln("");
document.writeln("	last: function() {");
document.writeln("		return this.eq( -1 );");
document.writeln("	},");
document.writeln("");
document.writeln("	eq: function( i ) {");
document.writeln("		var len = this.length,");
document.writeln("			j = +i + ( i < 0 ? len : 0 );");
document.writeln("		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );");
document.writeln("	},");
document.writeln("");
document.writeln("	end: function() {");
document.writeln("		return this.prevObject || this.constructor();");
document.writeln("	},");
document.writeln("");
document.writeln("	// For internal use only.");
document.writeln("	// Behaves like an Array\'s method, not like a jQuery method.");
document.writeln("	push: push,");
document.writeln("	sort: deletedIds.sort,");
document.writeln("	splice: deletedIds.splice");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.extend = jQuery.fn.extend = function() {");
document.writeln("	var src, copyIsArray, copy, name, options, clone,");
document.writeln("		target = arguments[ 0 ] || {},");
document.writeln("		i = 1,");
document.writeln("		length = arguments.length,");
document.writeln("		deep = false;");
document.writeln("");
document.writeln("	// Handle a deep copy situation");
document.writeln("	if ( typeof target === \'boolean\' ) {");
document.writeln("		deep = target;");
document.writeln("");
document.writeln("		// skip the boolean and the target");
document.writeln("		target = arguments[ i ] || {};");
document.writeln("		i++;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Handle case when target is a string or something (possible in deep copy)");
document.writeln("	if ( typeof target !== \'object\' && !jQuery.isFunction( target ) ) {");
document.writeln("		target = {};");
document.writeln("	}");
document.writeln("");
document.writeln("	// extend jQuery itself if only one argument is passed");
document.writeln("	if ( i === length ) {");
document.writeln("		target = this;");
document.writeln("		i--;");
document.writeln("	}");
document.writeln("");
document.writeln("	for ( ; i < length; i++ ) {");
document.writeln("");
document.writeln("		// Only deal with non-null/undefined values");
document.writeln("		if ( ( options = arguments[ i ] ) != null ) {");
document.writeln("");
document.writeln("			// Extend the base object");
document.writeln("			for ( name in options ) {");
document.writeln("				src = target[ name ];");
document.writeln("				copy = options[ name ];");
document.writeln("");
document.writeln("				// Prevent never-ending loop");
document.writeln("				if ( target === copy ) {");
document.writeln("					continue;");
document.writeln("				}");
document.writeln("");
document.writeln("				// Recurse if we\'re merging plain objects or arrays");
document.writeln("				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||");
document.writeln("					( copyIsArray = jQuery.isArray( copy ) ) ) ) {");
document.writeln("");
document.writeln("					if ( copyIsArray ) {");
document.writeln("						copyIsArray = false;");
document.writeln("						clone = src && jQuery.isArray( src ) ? src : [];");
document.writeln("");
document.writeln("					} else {");
document.writeln("						clone = src && jQuery.isPlainObject( src ) ? src : {};");
document.writeln("					}");
document.writeln("");
document.writeln("					// Never move original objects, clone them");
document.writeln("					target[ name ] = jQuery.extend( deep, clone, copy );");
document.writeln("");
document.writeln("				// Don\'t bring in undefined values");
document.writeln("				} else if ( copy !== undefined ) {");
document.writeln("					target[ name ] = copy;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Return the modified object");
document.writeln("	return target;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("");
document.writeln("	// Unique for each copy of jQuery on the page");
document.writeln("	expando: \'jQuery\' + ( version + Math.random() ).replace( /\/\/D/g, \'\' ),");
document.writeln("");
document.writeln("	// Assume jQuery is ready without the ready module");
document.writeln("	isReady: true,");
document.writeln("");
document.writeln("	error: function( msg ) {");
document.writeln("		throw new Error( msg );");
document.writeln("	},");
document.writeln("");
document.writeln("	noop: function() {},");
document.writeln("");
document.writeln("	// See test/unit/core.js for details concerning isFunction.");
document.writeln("	// Since version 1.3, DOM methods and functions like alert");
document.writeln("	// aren\'t supported. They return false on IE (#2968).");
document.writeln("	isFunction: function( obj ) {");
document.writeln("		return jQuery.type( obj ) === \'function\';");
document.writeln("	},");
document.writeln("");
document.writeln("	isArray: Array.isArray || function( obj ) {");
document.writeln("		return jQuery.type( obj ) === \'array\';");
document.writeln("	},");
document.writeln("");
document.writeln("	isWindow: function( obj ) {");
document.writeln("		/* jshint eqeqeq: false */");
document.writeln("		return obj != null && obj == obj.window;");
document.writeln("	},");
document.writeln("");
document.writeln("	isNumeric: function( obj ) {");
document.writeln("");
document.writeln("		// parseFloat NaNs numeric-cast false positives (null|true|false|\'\')");
document.writeln("		// ...but misinterprets leading-number strings, particularly hex literals (\'0x...\')");
document.writeln("		// subtraction forces infinities to NaN");
document.writeln("		// adding 1 corrects loss of precision from parseFloat (#15100)");
document.writeln("		var realStringObj = obj && obj.toString();");
document.writeln("		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;");
document.writeln("	},");
document.writeln("");
document.writeln("	isEmptyObject: function( obj ) {");
document.writeln("		var name;");
document.writeln("		for ( name in obj ) {");
document.writeln("			return false;");
document.writeln("		}");
document.writeln("		return true;");
document.writeln("	},");
document.writeln("");
document.writeln("	isPlainObject: function( obj ) {");
document.writeln("		var key;");
document.writeln("");
document.writeln("		// Must be an Object.");
document.writeln("		// Because of IE, we also have to check the presence of the constructor property.");
document.writeln("		// Make sure that DOM nodes and window objects don\'t pass through, as well");
document.writeln("		if ( !obj || jQuery.type( obj ) !== \'object\' || obj.nodeType || jQuery.isWindow( obj ) ) {");
document.writeln("			return false;");
document.writeln("		}");
document.writeln("");
document.writeln("		try {");
document.writeln("");
document.writeln("			// Not own constructor property must be Object");
document.writeln("			if ( obj.constructor &&");
document.writeln("				!hasOwn.call( obj, \'constructor\' ) &&");
document.writeln("				!hasOwn.call( obj.constructor.prototype, \'isPrototypeOf\' ) ) {");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("		} catch ( e ) {");
document.writeln("");
document.writeln("			// IE8,9 Will throw exceptions on certain host objects #9897");
document.writeln("			return false;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// Handle iteration over inherited properties before own properties.");
document.writeln("		if ( !support.ownFirst ) {");
document.writeln("			for ( key in obj ) {");
document.writeln("				return hasOwn.call( obj, key );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Own properties are enumerated firstly, so to speed up,");
document.writeln("		// if last one is own, then all properties are own.");
document.writeln("		for ( key in obj ) {}");
document.writeln("");
document.writeln("		return key === undefined || hasOwn.call( obj, key );");
document.writeln("	},");
document.writeln("");
document.writeln("	type: function( obj ) {");
document.writeln("		if ( obj == null ) {");
document.writeln("			return obj + \'\';");
document.writeln("		}");
document.writeln("		return typeof obj === \'object\' || typeof obj === \'function\' ?");
document.writeln("			class2type[ toString.call( obj ) ] || \'object\' :");
document.writeln("			typeof obj;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Workarounds based on findings by Jim Driscoll");
document.writeln("	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context");
document.writeln("	globalEval: function( data ) {");
document.writeln("		if ( data && jQuery.trim( data ) ) {");
document.writeln("");
document.writeln("			// We use execScript on Internet Explorer");
document.writeln("			// We use an anonymous function so that context is window");
document.writeln("			// rather than jQuery in Firefox");
document.writeln("			( window.execScript || function( data ) {");
document.writeln("				window[ \'eval\' ].call( window, data ); // jscs:ignore requireDotNotation");
document.writeln("			} )( data );");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// Convert dashed to camelCase; used by the css and data modules");
document.writeln("	// Microsoft forgot to hump their vendor prefix (#9572)");
document.writeln("	camelCase: function( string ) {");
document.writeln("		return string.replace( rmsPrefix, \'ms-\' ).replace( rdashAlpha, fcamelCase );");
document.writeln("	},");
document.writeln("");
document.writeln("	nodeName: function( elem, name ) {");
document.writeln("		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();");
document.writeln("	},");
document.writeln("");
document.writeln("	each: function( obj, callback ) {");
document.writeln("		var length, i = 0;");
document.writeln("");
document.writeln("		if ( isArrayLike( obj ) ) {");
document.writeln("			length = obj.length;");
document.writeln("			for ( ; i < length; i++ ) {");
document.writeln("				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {");
document.writeln("					break;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		} else {");
document.writeln("			for ( i in obj ) {");
document.writeln("				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {");
document.writeln("					break;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return obj;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Support: Android<4.1, IE<9");
document.writeln("	trim: function( text ) {");
document.writeln("		return text == null ?");
document.writeln("			\'\' :");
document.writeln("			( text + \'\' ).replace( rtrim, \'\' );");
document.writeln("	},");
document.writeln("");
document.writeln("	// results is for internal usage only");
document.writeln("	makeArray: function( arr, results ) {");
document.writeln("		var ret = results || [];");
document.writeln("");
document.writeln("		if ( arr != null ) {");
document.writeln("			if ( isArrayLike( Object( arr ) ) ) {");
document.writeln("				jQuery.merge( ret,");
document.writeln("					typeof arr === \'string\' ?");
document.writeln("					[ arr ] : arr");
document.writeln("				);");
document.writeln("			} else {");
document.writeln("				push.call( ret, arr );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return ret;");
document.writeln("	},");
document.writeln("");
document.writeln("	inArray: function( elem, arr, i ) {");
document.writeln("		var len;");
document.writeln("");
document.writeln("		if ( arr ) {");
document.writeln("			if ( indexOf ) {");
document.writeln("				return indexOf.call( arr, elem, i );");
document.writeln("			}");
document.writeln("");
document.writeln("			len = arr.length;");
document.writeln("			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;");
document.writeln("");
document.writeln("			for ( ; i < len; i++ ) {");
document.writeln("");
document.writeln("				// Skip accessing in sparse arrays");
document.writeln("				if ( i in arr && arr[ i ] === elem ) {");
document.writeln("					return i;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return -1;");
document.writeln("	},");
document.writeln("");
document.writeln("	merge: function( first, second ) {");
document.writeln("		var len = +second.length,");
document.writeln("			j = 0,");
document.writeln("			i = first.length;");
document.writeln("");
document.writeln("		while ( j < len ) {");
document.writeln("			first[ i++ ] = second[ j++ ];");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)");
document.writeln("		if ( len !== len ) {");
document.writeln("			while ( second[ j ] !== undefined ) {");
document.writeln("				first[ i++ ] = second[ j++ ];");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		first.length = i;");
document.writeln("");
document.writeln("		return first;");
document.writeln("	},");
document.writeln("");
document.writeln("	grep: function( elems, callback, invert ) {");
document.writeln("		var callbackInverse,");
document.writeln("			matches = [],");
document.writeln("			i = 0,");
document.writeln("			length = elems.length,");
document.writeln("			callbackExpect = !invert;");
document.writeln("");
document.writeln("		// Go through the array, only saving the items");
document.writeln("		// that pass the validator function");
document.writeln("		for ( ; i < length; i++ ) {");
document.writeln("			callbackInverse = !callback( elems[ i ], i );");
document.writeln("			if ( callbackInverse !== callbackExpect ) {");
document.writeln("				matches.push( elems[ i ] );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return matches;");
document.writeln("	},");
document.writeln("");
document.writeln("	// arg is for internal usage only");
document.writeln("	map: function( elems, callback, arg ) {");
document.writeln("		var length, value,");
document.writeln("			i = 0,");
document.writeln("			ret = [];");
document.writeln("");
document.writeln("		// Go through the array, translating each of the items to their new values");
document.writeln("		if ( isArrayLike( elems ) ) {");
document.writeln("			length = elems.length;");
document.writeln("			for ( ; i < length; i++ ) {");
document.writeln("				value = callback( elems[ i ], i, arg );");
document.writeln("");
document.writeln("				if ( value != null ) {");
document.writeln("					ret.push( value );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("		// Go through every key on the object,");
document.writeln("		} else {");
document.writeln("			for ( i in elems ) {");
document.writeln("				value = callback( elems[ i ], i, arg );");
document.writeln("");
document.writeln("				if ( value != null ) {");
document.writeln("					ret.push( value );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Flatten any nested arrays");
document.writeln("		return concat.apply( [], ret );");
document.writeln("	},");
document.writeln("");
document.writeln("	// A global GUID counter for objects");
document.writeln("	guid: 1,");
document.writeln("");
document.writeln("	// Bind a function to a context, optionally partially applying any");
document.writeln("	// arguments.");
document.writeln("	proxy: function( fn, context ) {");
document.writeln("		var args, proxy, tmp;");
document.writeln("");
document.writeln("		if ( typeof context === \'string\' ) {");
document.writeln("			tmp = fn[ context ];");
document.writeln("			context = fn;");
document.writeln("			fn = tmp;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Quick check to determine if target is callable, in the spec");
document.writeln("		// this throws a TypeError, but we will just return undefined.");
document.writeln("		if ( !jQuery.isFunction( fn ) ) {");
document.writeln("			return undefined;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Simulated bind");
document.writeln("		args = slice.call( arguments, 2 );");
document.writeln("		proxy = function() {");
document.writeln("			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );");
document.writeln("		};");
document.writeln("");
document.writeln("		// Set the guid of unique handler to the same of original handler, so it can be removed");
document.writeln("		proxy.guid = fn.guid = fn.guid || jQuery.guid++;");
document.writeln("");
document.writeln("		return proxy;");
document.writeln("	},");
document.writeln("");
document.writeln("	now: function() {");
document.writeln("		return +( new Date() );");
document.writeln("	},");
document.writeln("");
document.writeln("	// jQuery.support is not used in Core but other projects attach their");
document.writeln("	// properties to it so it needs to exist.");
document.writeln("	support: support");
document.writeln("} );");
document.writeln("");
document.writeln("// JSHint would error on this code due to the Symbol not being defined in ES5.");
document.writeln("// Defining this global in .jshintrc would create a danger of using the global");
document.writeln("// unguarded in another place, it seems safer to just disable JSHint for these");
document.writeln("// three lines.");
document.writeln("/* jshint ignore: start */");
document.writeln("if ( typeof Symbol === \'function\' ) {");
document.writeln("	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];");
document.writeln("}");
document.writeln("/* jshint ignore: end */");
document.writeln("");
document.writeln("// Populate the class2type map");
document.writeln("jQuery.each( \'Boolean Number String Function Array Date RegExp Object Error Symbol\'.split( \' \' ),");
document.writeln("function( i, name ) {");
document.writeln("	class2type[ \'[object \' + name + \']\' ] = name.toLowerCase();");
document.writeln("} );");
document.writeln("");
document.writeln("function isArrayLike( obj ) {");
document.writeln("");
document.writeln("	// Support: iOS 8.2 (not reproducible in simulator)");
document.writeln("	// `in` check used to prevent JIT error (gh-2145)");
document.writeln("	// hasOwn isn\'t used here due to false negatives");
document.writeln("	// regarding Nodelist length in IE");
document.writeln("	var length = !!obj && \'length\' in obj && obj.length,");
document.writeln("		type = jQuery.type( obj );");
document.writeln("");
document.writeln("	if ( type === \'function\' || jQuery.isWindow( obj ) ) {");
document.writeln("		return false;");
document.writeln("	}");
document.writeln("");
document.writeln("	return type === \'array\' || length === 0 ||");
document.writeln("		typeof length === \'number\' && length > 0 && ( length - 1 ) in obj;");
document.writeln("}");
document.writeln("var Sizzle =");
document.writeln("/*!");
document.writeln(" * Sizzle CSS Selector Engine v2.2.1");
document.writeln(" * http://sizzlejs.com/");
document.writeln(" *");
document.writeln(" * Copyright jQuery Foundation and other contributors");
document.writeln(" * Released under the MIT license");
document.writeln(" * http://jquery.org/license");
document.writeln(" *");
document.writeln(" * Date: 2015-10-17");
document.writeln(" */");
document.writeln("(function( window ) {");
document.writeln("");
document.writeln("var i,");
document.writeln("	support,");
document.writeln("	Expr,");
document.writeln("	getText,");
document.writeln("	isXML,");
document.writeln("	tokenize,");
document.writeln("	compile,");
document.writeln("	select,");
document.writeln("	outermostContext,");
document.writeln("	sortInput,");
document.writeln("	hasDuplicate,");
document.writeln("");
document.writeln("	// Local document vars");
document.writeln("	setDocument,");
document.writeln("	document,");
document.writeln("	docElem,");
document.writeln("	documentIsHTML,");
document.writeln("	rbuggyQSA,");
document.writeln("	rbuggyMatches,");
document.writeln("	matches,");
document.writeln("	contains,");
document.writeln("");
document.writeln("	// Instance-specific data");
document.writeln("	expando = \'sizzle\' + 1 * new Date(),");
document.writeln("	preferredDoc = window.document,");
document.writeln("	dirruns = 0,");
document.writeln("	done = 0,");
document.writeln("	classCache = createCache(),");
document.writeln("	tokenCache = createCache(),");
document.writeln("	compilerCache = createCache(),");
document.writeln("	sortOrder = function( a, b ) {");
document.writeln("		if ( a === b ) {");
document.writeln("			hasDuplicate = true;");
document.writeln("		}");
document.writeln("		return 0;");
document.writeln("	},");
document.writeln("");
document.writeln("	// General-purpose constants");
document.writeln("	MAX_NEGATIVE = 1 << 31,");
document.writeln("");
document.writeln("	// Instance methods");
document.writeln("	hasOwn = ({}).hasOwnProperty,");
document.writeln("	arr = [],");
document.writeln("	pop = arr.pop,");
document.writeln("	push_native = arr.push,");
document.writeln("	push = arr.push,");
document.writeln("	slice = arr.slice,");
document.writeln("	// Use a stripped-down indexOf as it\'s faster than native");
document.writeln("	// http://jsperf.com/thor-indexof-vs-for/5");
document.writeln("	indexOf = function( list, elem ) {");
document.writeln("		var i = 0,");
document.writeln("			len = list.length;");
document.writeln("		for ( ; i < len; i++ ) {");
document.writeln("			if ( list[i] === elem ) {");
document.writeln("				return i;");
document.writeln("			}");
document.writeln("		}");
document.writeln("		return -1;");
document.writeln("	},");
document.writeln("");
document.writeln("	booleans = \'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\',");
document.writeln("");
document.writeln("	// Regular expressions");
document.writeln("");
document.writeln("	// http://www.w3.org/TR/css3-selectors/#whitespace");
document.writeln("	whitespace = \'[\/\/\/\/x20\/\/\/\/t\/\/\/\/r\/\/\/\/n\/\/\/\/f]\',");
document.writeln("");
document.writeln("	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier");
document.writeln("	identifier = \'(?:\/\/\/\/\/\/\/\/.|[\/\/\/\/w-]|[^\/\/\/\/x00-\/\/\/\/xa0])+\',");
document.writeln("");
document.writeln("	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors");
document.writeln("	attributes = \'\/\/\/\/[\' + whitespace + \'*(\' + identifier + \')(?:\' + whitespace +");
document.writeln("		// Operator (capture 2)");
document.writeln("		\'*([*^$|!~]?=)\' + whitespace +");
document.writeln("		// \'Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\'");
document.writeln("		\'*(?:\'((?:\/\/\/\/\/\/\/\/.|[^\/\/\/\/\/\/\/\/\'])*)\'|\/\/\'((?:\/\/\/\/\/\/\/\/.|[^\/\/\/\/\/\/\/\/\/\/\'])*)\/\/\'|(\' + identifier + \'))|)\' + whitespace +");
document.writeln("		\'*\/\/\/\/]\',");
document.writeln("");
document.writeln("	pseudos = \':(\' + identifier + \')(?:\/\/\/\/((\' +");
document.writeln("		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:");
document.writeln("		// 1. quoted (capture 3; capture 4 or capture 5)");
document.writeln("		\'(\'((?:\/\/\/\/\/\/\/\/.|[^\/\/\/\/\/\/\/\/\'])*)\'|\/\/\'((?:\/\/\/\/\/\/\/\/.|[^\/\/\/\/\/\/\/\/\/\/\'])*)\/\/\')|\' +");
document.writeln("		// 2. simple (capture 6)");
document.writeln("		\'((?:\/\/\/\/\/\/\/\/.|[^\/\/\/\/\/\/\/\/()[\/\/\/\/]]|\' + attributes + \')*)|\' +");
document.writeln("		// 3. anything else (capture 2)");
document.writeln("		\'.*\' +");
document.writeln("		\')\/\/\/\/)|)\',");
document.writeln("");
document.writeln("	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter");
document.writeln("	rwhitespace = new RegExp( whitespace + \'+\', \'g\' ),");
document.writeln("	rtrim = new RegExp( \'^\' + whitespace + \'+|((?:^|[^\/\/\/\/\/\/\/\/])(?:\/\/\/\/\/\/\/\/.)*)\' + whitespace + \'+$\', \'g\' ),");
document.writeln("");
document.writeln("	rcomma = new RegExp( \'^\' + whitespace + \'*,\' + whitespace + \'*\' ),");
document.writeln("	rcombinators = new RegExp( \'^\' + whitespace + \'*([>+~]|\' + whitespace + \')\' + whitespace + \'*\' ),");
document.writeln("");
document.writeln("	rattributeQuotes = new RegExp( \'=\' + whitespace + \'*([^\/\/\/\/]\'\/\/\']*?)\' + whitespace + \'*\/\/\/\/]\', \'g\' ),");
document.writeln("");
document.writeln("	rpseudo = new RegExp( pseudos ),");
document.writeln("	ridentifier = new RegExp( \'^\' + identifier + \'$\' ),");
document.writeln("");
document.writeln("	matchExpr = {");
document.writeln("		\'ID\': new RegExp( \'^#(\' + identifier + \')\' ),");
document.writeln("		\'CLASS\': new RegExp( \'^\/\/\/\/.(\' + identifier + \')\' ),");
document.writeln("		\'TAG\': new RegExp( \'^(\' + identifier + \'|[*])\' ),");
document.writeln("		\'ATTR\': new RegExp( \'^\' + attributes ),");
document.writeln("		\'PSEUDO\': new RegExp( \'^\' + pseudos ),");
document.writeln("		\'CHILD\': new RegExp( \'^:(only|first|last|nth|nth-last)-(child|of-type)(?:\/\/\/\/(\' + whitespace +");
document.writeln("			\'*(even|odd|(([+-]|)(\/\/\/\/d*)n|)\' + whitespace + \'*(?:([+-]|)\' + whitespace +");
document.writeln("			\'*(\/\/\/\/d+)|))\' + whitespace + \'*\/\/\/\/)|)\', \'i\' ),");
document.writeln("		\'bool\': new RegExp( \'^(?:\' + booleans + \')$\', \'i\' ),");
document.writeln("		// For use in libraries implementing .is()");
document.writeln("		// We use this for POS matching in `select`");
document.writeln("		\'needsContext\': new RegExp( \'^\' + whitespace + \'*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\/\/\/\/(\' +");
document.writeln("			whitespace + \'*((?:-\/\/\/\/d)?\/\/\/\/d*)\' + whitespace + \'*\/\/\/\/)|)(?=[^-]|$)\', \'i\' )");
document.writeln("	},");
document.writeln("");
document.writeln("	rinputs = /^(?:input|select|textarea|button)$/i,");
document.writeln("	rheader = /^h\/\/d$/i,");
document.writeln("");
document.writeln("	rnative = /^[^{]+\/\/{\/\/s*\/\/[native \/\/w/,");
document.writeln("");
document.writeln("	// Easily-parseable/retrievable ID or TAG or CLASS selectors");
document.writeln("	rquickExpr = /^(?:#([\/\/w-]+)|(\/\/w+)|\/\/.([\/\/w-]+))$/,");
document.writeln("");
document.writeln("	rsibling = /[+~]/,");
document.writeln("	rescape = /\'|\/\/\/\//g,");
document.writeln("");
document.writeln("	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters");
document.writeln("	runescape = new RegExp( \'\/\/\/\/\/\/\/\/([\/\/\/\/da-f]{1,6}\' + whitespace + \'?|(\' + whitespace + \')|.)\', \'ig\' ),");
document.writeln("	funescape = function( _, escaped, escapedWhitespace ) {");
document.writeln("		var high = \'0x\' + escaped - 0x10000;");
document.writeln("		// NaN means non-codepoint");
document.writeln("		// Support: Firefox<24");
document.writeln("		// Workaround erroneous numeric interpretation of +\'0x\'");
document.writeln("		return high !== high || escapedWhitespace ?");
document.writeln("			escaped :");
document.writeln("			high < 0 ?");
document.writeln("				// BMP codepoint");
document.writeln("				String.fromCharCode( high + 0x10000 ) :");
document.writeln("				// Supplemental Plane codepoint (surrogate pair)");
document.writeln("				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Used for iframes");
document.writeln("	// See setDocument()");
document.writeln("	// Removing the function wrapper causes a \'Permission Denied\'");
document.writeln("	// error in IE");
document.writeln("	unloadHandler = function() {");
document.writeln("		setDocument();");
document.writeln("	};");
document.writeln("");
document.writeln("// Optimize for push.apply( _, NodeList )");
document.writeln("try {");
document.writeln("	push.apply(");
document.writeln("		(arr = slice.call( preferredDoc.childNodes )),");
document.writeln("		preferredDoc.childNodes");
document.writeln("	);");
document.writeln("	// Support: Android<4.0");
document.writeln("	// Detect silently failing push.apply");
document.writeln("	arr[ preferredDoc.childNodes.length ].nodeType;");
document.writeln("} catch ( e ) {");
document.writeln("	push = { apply: arr.length ?");
document.writeln("");
document.writeln("		// Leverage slice if possible");
document.writeln("		function( target, els ) {");
document.writeln("			push_native.apply( target, slice.call(els) );");
document.writeln("		} :");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// Otherwise append directly");
document.writeln("		function( target, els ) {");
document.writeln("			var j = target.length,");
document.writeln("				i = 0;");
document.writeln("			// Can\'t trust NodeList.length");
document.writeln("			while ( (target[j++] = els[i++]) ) {}");
document.writeln("			target.length = j - 1;");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("function Sizzle( selector, context, results, seed ) {");
document.writeln("	var m, i, elem, nid, nidselect, match, groups, newSelector,");
document.writeln("		newContext = context && context.ownerDocument,");
document.writeln("");
document.writeln("		// nodeType defaults to 9, since context defaults to document");
document.writeln("		nodeType = context ? context.nodeType : 9;");
document.writeln("");
document.writeln("	results = results || [];");
document.writeln("");
document.writeln("	// Return early from calls with invalid selector or context");
document.writeln("	if ( typeof selector !== \'string\' || !selector ||");
document.writeln("		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {");
document.writeln("");
document.writeln("		return results;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Try to shortcut find operations (as opposed to filters) in HTML documents");
document.writeln("	if ( !seed ) {");
document.writeln("");
document.writeln("		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {");
document.writeln("			setDocument( context );");
document.writeln("		}");
document.writeln("		context = context || document;");
document.writeln("");
document.writeln("		if ( documentIsHTML ) {");
document.writeln("");
document.writeln("			// If the selector is sufficiently simple, try using a \'get*By*\' DOM method");
document.writeln("			// (excepting DocumentFragment context, where the methods don\'t exist)");
document.writeln("			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {");
document.writeln("");
document.writeln("				// ID selector");
document.writeln("				if ( (m = match[1]) ) {");
document.writeln("");
document.writeln("					// Document context");
document.writeln("					if ( nodeType === 9 ) {");
document.writeln("						if ( (elem = context.getElementById( m )) ) {");
document.writeln("");
document.writeln("							// Support: IE, Opera, Webkit");
document.writeln("							// TODO: identify versions");
document.writeln("							// getElementById can match elements by name instead of ID");
document.writeln("							if ( elem.id === m ) {");
document.writeln("								results.push( elem );");
document.writeln("								return results;");
document.writeln("							}");
document.writeln("						} else {");
document.writeln("							return results;");
document.writeln("						}");
document.writeln("");
document.writeln("					// Element context");
document.writeln("					} else {");
document.writeln("");
document.writeln("						// Support: IE, Opera, Webkit");
document.writeln("						// TODO: identify versions");
document.writeln("						// getElementById can match elements by name instead of ID");
document.writeln("						if ( newContext && (elem = newContext.getElementById( m )) &&");
document.writeln("							contains( context, elem ) &&");
document.writeln("							elem.id === m ) {");
document.writeln("");
document.writeln("							results.push( elem );");
document.writeln("							return results;");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("				// Type selector");
document.writeln("				} else if ( match[2] ) {");
document.writeln("					push.apply( results, context.getElementsByTagName( selector ) );");
document.writeln("					return results;");
document.writeln("");
document.writeln("				// Class selector");
document.writeln("				} else if ( (m = match[3]) && support.getElementsByClassName &&");
document.writeln("					context.getElementsByClassName ) {");
document.writeln("");
document.writeln("					push.apply( results, context.getElementsByClassName( m ) );");
document.writeln("					return results;");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Take advantage of querySelectorAll");
document.writeln("			if ( support.qsa &&");
document.writeln("				!compilerCache[ selector + \' \' ] &&");
document.writeln("				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {");
document.writeln("");
document.writeln("				if ( nodeType !== 1 ) {");
document.writeln("					newContext = context;");
document.writeln("					newSelector = selector;");
document.writeln("");
document.writeln("				// qSA looks outside Element context, which is not what we want");
document.writeln("				// Thanks to Andrew Dupont for this workaround technique");
document.writeln("				// Support: IE <=8");
document.writeln("				// Exclude object elements");
document.writeln("				} else if ( context.nodeName.toLowerCase() !== \'object\' ) {");
document.writeln("");
document.writeln("					// Capture the context ID, setting it first if necessary");
document.writeln("					if ( (nid = context.getAttribute( \'id\' )) ) {");
document.writeln("						nid = nid.replace( rescape, \'\/\/\/\/$&\' );");
document.writeln("					} else {");
document.writeln("						context.setAttribute( \'id\', (nid = expando) );");
document.writeln("					}");
document.writeln("");
document.writeln("					// Prefix every selector in the list");
document.writeln("					groups = tokenize( selector );");
document.writeln("					i = groups.length;");
document.writeln("					nidselect = ridentifier.test( nid ) ? \'#\' + nid : \'[id=\'\' + nid + \'\']\';");
document.writeln("					while ( i-- ) {");
document.writeln("						groups[i] = nidselect + \' \' + toSelector( groups[i] );");
document.writeln("					}");
document.writeln("					newSelector = groups.join( \',\' );");
document.writeln("");
document.writeln("					// Expand context for sibling selectors");
document.writeln("					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||");
document.writeln("						context;");
document.writeln("				}");
document.writeln("");
document.writeln("				if ( newSelector ) {");
document.writeln("					try {");
document.writeln("						push.apply( results,");
document.writeln("							newContext.querySelectorAll( newSelector )");
document.writeln("						);");
document.writeln("						return results;");
document.writeln("					} catch ( qsaError ) {");
document.writeln("					} finally {");
document.writeln("						if ( nid === expando ) {");
document.writeln("							context.removeAttribute( \'id\' );");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// All others");
document.writeln("	return select( selector.replace( rtrim, \'$1\' ), context, results, seed );");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Create key-value caches of limited size");
document.writeln(" * @returns {function(string, object)} Returns the Object data after storing it on itself with");
document.writeln(" *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)");
document.writeln(" *	deleting the oldest entry");
document.writeln(" */");
document.writeln("function createCache() {");
document.writeln("	var keys = [];");
document.writeln("");
document.writeln("	function cache( key, value ) {");
document.writeln("		// Use (key + \' \') to avoid collision with native prototype properties (see Issue #157)");
document.writeln("		if ( keys.push( key + \' \' ) > Expr.cacheLength ) {");
document.writeln("			// Only keep the most recent entries");
document.writeln("			delete cache[ keys.shift() ];");
document.writeln("		}");
document.writeln("		return (cache[ key + \' \' ] = value);");
document.writeln("	}");
document.writeln("	return cache;");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Mark a function for special use by Sizzle");
document.writeln(" * @param {Function} fn The function to mark");
document.writeln(" */");
document.writeln("function markFunction( fn ) {");
document.writeln("	fn[ expando ] = true;");
document.writeln("	return fn;");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Support testing using an element");
document.writeln(" * @param {Function} fn Passed the created div and expects a boolean result");
document.writeln(" */");
document.writeln("function assert( fn ) {");
document.writeln("	var div = document.createElement(\'div\');");
document.writeln("");
document.writeln("	try {");
document.writeln("		return !!fn( div );");
document.writeln("	} catch (e) {");
document.writeln("		return false;");
document.writeln("	} finally {");
document.writeln("		// Remove from its parent by default");
document.writeln("		if ( div.parentNode ) {");
document.writeln("			div.parentNode.removeChild( div );");
document.writeln("		}");
document.writeln("		// release memory in IE");
document.writeln("		div = null;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Adds the same handler for all of the specified attrs");
document.writeln(" * @param {String} attrs Pipe-separated list of attributes");
document.writeln(" * @param {Function} handler The method that will be applied");
document.writeln(" */");
document.writeln("function addHandle( attrs, handler ) {");
document.writeln("	var arr = attrs.split(\'|\'),");
document.writeln("		i = arr.length;");
document.writeln("");
document.writeln("	while ( i-- ) {");
document.writeln("		Expr.attrHandle[ arr[i] ] = handler;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Checks document order of two siblings");
document.writeln(" * @param {Element} a");
document.writeln(" * @param {Element} b");
document.writeln(" * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b");
document.writeln(" */");
document.writeln("function siblingCheck( a, b ) {");
document.writeln("	var cur = b && a,");
document.writeln("		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&");
document.writeln("			( ~b.sourceIndex || MAX_NEGATIVE ) -");
document.writeln("			( ~a.sourceIndex || MAX_NEGATIVE );");
document.writeln("");
document.writeln("	// Use IE sourceIndex if available on both nodes");
document.writeln("	if ( diff ) {");
document.writeln("		return diff;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Check if b follows a");
document.writeln("	if ( cur ) {");
document.writeln("		while ( (cur = cur.nextSibling) ) {");
document.writeln("			if ( cur === b ) {");
document.writeln("				return -1;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return a ? 1 : -1;");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Returns a function to use in pseudos for input types");
document.writeln(" * @param {String} type");
document.writeln(" */");
document.writeln("function createInputPseudo( type ) {");
document.writeln("	return function( elem ) {");
document.writeln("		var name = elem.nodeName.toLowerCase();");
document.writeln("		return name === \'input\' && elem.type === type;");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Returns a function to use in pseudos for buttons");
document.writeln(" * @param {String} type");
document.writeln(" */");
document.writeln("function createButtonPseudo( type ) {");
document.writeln("	return function( elem ) {");
document.writeln("		var name = elem.nodeName.toLowerCase();");
document.writeln("		return (name === \'input\' || name === \'button\') && elem.type === type;");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Returns a function to use in pseudos for positionals");
document.writeln(" * @param {Function} fn");
document.writeln(" */");
document.writeln("function createPositionalPseudo( fn ) {");
document.writeln("	return markFunction(function( argument ) {");
document.writeln("		argument = +argument;");
document.writeln("		return markFunction(function( seed, matches ) {");
document.writeln("			var j,");
document.writeln("				matchIndexes = fn( [], seed.length, argument ),");
document.writeln("				i = matchIndexes.length;");
document.writeln("");
document.writeln("			// Match elements found at the specified indexes");
document.writeln("			while ( i-- ) {");
document.writeln("				if ( seed[ (j = matchIndexes[i]) ] ) {");
document.writeln("					seed[j] = !(matches[j] = seed[j]);");
document.writeln("				}");
document.writeln("			}");
document.writeln("		});");
document.writeln("	});");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Checks a node for validity as a Sizzle context");
document.writeln(" * @param {Element|Object=} context");
document.writeln(" * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value");
document.writeln(" */");
document.writeln("function testContext( context ) {");
document.writeln("	return context && typeof context.getElementsByTagName !== \'undefined\' && context;");
document.writeln("}");
document.writeln("");
document.writeln("// Expose support vars for convenience");
document.writeln("support = Sizzle.support = {};");
document.writeln("");
document.writeln("/**");
document.writeln(" * Detects XML nodes");
document.writeln(" * @param {Element|Object} elem An element or a document");
document.writeln(" * @returns {Boolean} True iff elem is a non-HTML XML node");
document.writeln(" */");
document.writeln("isXML = Sizzle.isXML = function( elem ) {");
document.writeln("	// documentElement is verified for cases where it doesn\'t yet exist");
document.writeln("	// (such as loading iframes in IE - #4833)");
document.writeln("	var documentElement = elem && (elem.ownerDocument || elem).documentElement;");
document.writeln("	return documentElement ? documentElement.nodeName !== \'HTML\' : false;");
document.writeln("};");
document.writeln("");
document.writeln("/**");
document.writeln(" * Sets document-related variables once based on the current document");
document.writeln(" * @param {Element|Object} [doc] An element or document object to use to set the document");
document.writeln(" * @returns {Object} Returns the current document");
document.writeln(" */");
document.writeln("setDocument = Sizzle.setDocument = function( node ) {");
document.writeln("	var hasCompare, parent,");
document.writeln("		doc = node ? node.ownerDocument || node : preferredDoc;");
document.writeln("");
document.writeln("	// Return early if doc is invalid or already selected");
document.writeln("	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {");
document.writeln("		return document;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Update global variables");
document.writeln("	document = doc;");
document.writeln("	docElem = document.documentElement;");
document.writeln("	documentIsHTML = !isXML( document );");
document.writeln("");
document.writeln("	// Support: IE 9-11, Edge");
document.writeln("	// Accessing iframe documents after unload throws \'permission denied\' errors (jQuery #13936)");
document.writeln("	if ( (parent = document.defaultView) && parent.top !== parent ) {");
document.writeln("		// Support: IE 11");
document.writeln("		if ( parent.addEventListener ) {");
document.writeln("			parent.addEventListener( \'unload\', unloadHandler, false );");
document.writeln("");
document.writeln("		// Support: IE 9 - 10 only");
document.writeln("		} else if ( parent.attachEvent ) {");
document.writeln("			parent.attachEvent( \'onunload\', unloadHandler );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	/* Attributes");
document.writeln("	---------------------------------------------------------------------- */");
document.writeln("");
document.writeln("	// Support: IE<8");
document.writeln("	// Verify that getAttribute really returns attributes and not properties");
document.writeln("	// (excepting IE8 booleans)");
document.writeln("	support.attributes = assert(function( div ) {");
document.writeln("		div.className = \'i\';");
document.writeln("		return !div.getAttribute(\'className\');");
document.writeln("	});");
document.writeln("");
document.writeln("	/* getElement(s)By*");
document.writeln("	---------------------------------------------------------------------- */");
document.writeln("");
document.writeln("	// Check if getElementsByTagName(\'*\') returns only elements");
document.writeln("	support.getElementsByTagName = assert(function( div ) {");
document.writeln("		div.appendChild( document.createComment(\'\') );");
document.writeln("		return !div.getElementsByTagName(\'*\').length;");
document.writeln("	});");
document.writeln("");
document.writeln("	// Support: IE<9");
document.writeln("	support.getElementsByClassName = rnative.test( document.getElementsByClassName );");
document.writeln("");
document.writeln("	// Support: IE<10");
document.writeln("	// Check if getElementById returns elements by name");
document.writeln("	// The broken getElementById methods don\'t pick up programatically-set names,");
document.writeln("	// so use a roundabout getElementsByName test");
document.writeln("	support.getById = assert(function( div ) {");
document.writeln("		docElem.appendChild( div ).id = expando;");
document.writeln("		return !document.getElementsByName || !document.getElementsByName( expando ).length;");
document.writeln("	});");
document.writeln("");
document.writeln("	// ID find and filter");
document.writeln("	if ( support.getById ) {");
document.writeln("		Expr.find[\'ID\'] = function( id, context ) {");
document.writeln("			if ( typeof context.getElementById !== \'undefined\' && documentIsHTML ) {");
document.writeln("				var m = context.getElementById( id );");
document.writeln("				return m ? [ m ] : [];");
document.writeln("			}");
document.writeln("		};");
document.writeln("		Expr.filter[\'ID\'] = function( id ) {");
document.writeln("			var attrId = id.replace( runescape, funescape );");
document.writeln("			return function( elem ) {");
document.writeln("				return elem.getAttribute(\'id\') === attrId;");
document.writeln("			};");
document.writeln("		};");
document.writeln("	} else {");
document.writeln("		// Support: IE6/7");
document.writeln("		// getElementById is not reliable as a find shortcut");
document.writeln("		delete Expr.find[\'ID\'];");
document.writeln("");
document.writeln("		Expr.filter[\'ID\'] =  function( id ) {");
document.writeln("			var attrId = id.replace( runescape, funescape );");
document.writeln("			return function( elem ) {");
document.writeln("				var node = typeof elem.getAttributeNode !== \'undefined\' &&");
document.writeln("					elem.getAttributeNode(\'id\');");
document.writeln("				return node && node.value === attrId;");
document.writeln("			};");
document.writeln("		};");
document.writeln("	}");
document.writeln("");
document.writeln("	// Tag");
document.writeln("	Expr.find[\'TAG\'] = support.getElementsByTagName ?");
document.writeln("		function( tag, context ) {");
document.writeln("			if ( typeof context.getElementsByTagName !== \'undefined\' ) {");
document.writeln("				return context.getElementsByTagName( tag );");
document.writeln("");
document.writeln("			// DocumentFragment nodes don\'t have gEBTN");
document.writeln("			} else if ( support.qsa ) {");
document.writeln("				return context.querySelectorAll( tag );");
document.writeln("			}");
document.writeln("		} :");
document.writeln("");
document.writeln("		function( tag, context ) {");
document.writeln("			var elem,");
document.writeln("				tmp = [],");
document.writeln("				i = 0,");
document.writeln("				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too");
document.writeln("				results = context.getElementsByTagName( tag );");
document.writeln("");
document.writeln("			// Filter out possible comments");
document.writeln("			if ( tag === \'*\' ) {");
document.writeln("				while ( (elem = results[i++]) ) {");
document.writeln("					if ( elem.nodeType === 1 ) {");
document.writeln("						tmp.push( elem );");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				return tmp;");
document.writeln("			}");
document.writeln("			return results;");
document.writeln("		};");
document.writeln("");
document.writeln("	// Class");
document.writeln("	Expr.find[\'CLASS\'] = support.getElementsByClassName && function( className, context ) {");
document.writeln("		if ( typeof context.getElementsByClassName !== \'undefined\' && documentIsHTML ) {");
document.writeln("			return context.getElementsByClassName( className );");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("	/* QSA/matchesSelector");
document.writeln("	---------------------------------------------------------------------- */");
document.writeln("");
document.writeln("	// QSA and matchesSelector support");
document.writeln("");
document.writeln("	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)");
document.writeln("	rbuggyMatches = [];");
document.writeln("");
document.writeln("	// qSa(:focus) reports false when true (Chrome 21)");
document.writeln("	// We allow this because of a bug in IE8/9 that throws an error");
document.writeln("	// whenever `document.activeElement` is accessed on an iframe");
document.writeln("	// So, we allow :focus to pass through QSA all the time to avoid the IE error");
document.writeln("	// See http://bugs.jquery.com/ticket/13378");
document.writeln("	rbuggyQSA = [];");
document.writeln("");
document.writeln("	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {");
document.writeln("		// Build QSA regex");
document.writeln("		// Regex strategy adopted from Diego Perini");
document.writeln("		assert(function( div ) {");
document.writeln("			// Select is set to empty string on purpose");
document.writeln("			// This is to test IE\'s treatment of not explicitly");
document.writeln("			// setting a boolean content attribute,");
document.writeln("			// since its presence should be enough");
document.writeln("			// http://bugs.jquery.com/ticket/12359");
document.writeln("			docElem.appendChild( div ).innerHTML = \'<a id=\'\' + expando + \'\'></a>\' +");
document.writeln("				\'<select id=\'\' + expando + \'-\/\/r\/\/\/\/\' msallowcapture=\'\'>\' +");
document.writeln("				\'<option selected=\'\'></option></select>\';");
document.writeln("");
document.writeln("			// Support: IE8, Opera 11-12.16");
document.writeln("			// Nothing should be selected when empty strings follow ^= or $= or *=");
document.writeln("			// The test attribute must be unknown in Opera but \'safe\' for WinRT");
document.writeln("			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section");
document.writeln("			if ( div.querySelectorAll(\'[msallowcapture^=\'\']\').length ) {");
document.writeln("				rbuggyQSA.push( \'[*^$]=\' + whitespace + \'*(?:\'\'|\/\/\'\/\/\')\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Support: IE8");
document.writeln("			// Boolean attributes and \'value\' are not treated correctly");
document.writeln("			if ( !div.querySelectorAll(\'[selected]\').length ) {");
document.writeln("				rbuggyQSA.push( \'\/\/\/\/[\' + whitespace + \'*(?:value|\' + booleans + \')\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+");
document.writeln("			if ( !div.querySelectorAll( \'[id~=\' + expando + \'-]\' ).length ) {");
document.writeln("				rbuggyQSA.push(\'~=\');");
document.writeln("			}");
document.writeln("");
document.writeln("			// Webkit/Opera - :checked should return selected option elements");
document.writeln("			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked");
document.writeln("			// IE8 throws error here and will not see later tests");
document.writeln("			if ( !div.querySelectorAll(\':checked\').length ) {");
document.writeln("				rbuggyQSA.push(\':checked\');");
document.writeln("			}");
document.writeln("");
document.writeln("			// Support: Safari 8+, iOS 8+");
document.writeln("			// https://bugs.webkit.org/show_bug.cgi?id=136851");
document.writeln("			// In-page `selector#id sibing-combinator selector` fails");
document.writeln("			if ( !div.querySelectorAll( \'a#\' + expando + \'+*\' ).length ) {");
document.writeln("				rbuggyQSA.push(\'.#.+[+~]\');");
document.writeln("			}");
document.writeln("		});");
document.writeln("");
document.writeln("		assert(function( div ) {");
document.writeln("			// Support: Windows 8 Native Apps");
document.writeln("			// The type and name attributes are restricted during .innerHTML assignment");
document.writeln("			var input = document.createElement(\'input\');");
document.writeln("			input.setAttribute( \'type\', \'hidden\' );");
document.writeln("			div.appendChild( input ).setAttribute( \'name\', \'D\' );");
document.writeln("");
document.writeln("			// Support: IE8");
document.writeln("			// Enforce case-sensitivity of name attribute");
document.writeln("			if ( div.querySelectorAll(\'[name=d]\').length ) {");
document.writeln("				rbuggyQSA.push( \'name\' + whitespace + \'*[*^$|!~]?=\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)");
document.writeln("			// IE8 throws error here and will not see later tests");
document.writeln("			if ( !div.querySelectorAll(\':enabled\').length ) {");
document.writeln("				rbuggyQSA.push( \':enabled\', \':disabled\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Opera 10-11 does not throw on post-comma invalid pseudos");
document.writeln("			div.querySelectorAll(\'*,:x\');");
document.writeln("			rbuggyQSA.push(\',.*:\');");
document.writeln("		});");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||");
document.writeln("		docElem.webkitMatchesSelector ||");
document.writeln("		docElem.mozMatchesSelector ||");
document.writeln("		docElem.oMatchesSelector ||");
document.writeln("		docElem.msMatchesSelector) )) ) {");
document.writeln("");
document.writeln("		assert(function( div ) {");
document.writeln("			// Check to see if it\'s possible to do matchesSelector");
document.writeln("			// on a disconnected node (IE 9)");
document.writeln("			support.disconnectedMatch = matches.call( div, \'div\' );");
document.writeln("");
document.writeln("			// This should fail with an exception");
document.writeln("			// Gecko does not error, returns false instead");
document.writeln("			matches.call( div, \'[s!=\'\']:x\' );");
document.writeln("			rbuggyMatches.push( \'!=\', pseudos );");
document.writeln("		});");
document.writeln("	}");
document.writeln("");
document.writeln("	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\'|\') );");
document.writeln("	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\'|\') );");
document.writeln("");
document.writeln("	/* Contains");
document.writeln("	---------------------------------------------------------------------- */");
document.writeln("	hasCompare = rnative.test( docElem.compareDocumentPosition );");
document.writeln("");
document.writeln("	// Element contains another");
document.writeln("	// Purposefully self-exclusive");
document.writeln("	// As in, an element does not contain itself");
document.writeln("	contains = hasCompare || rnative.test( docElem.contains ) ?");
document.writeln("		function( a, b ) {");
document.writeln("			var adown = a.nodeType === 9 ? a.documentElement : a,");
document.writeln("				bup = b && b.parentNode;");
document.writeln("			return a === bup || !!( bup && bup.nodeType === 1 && (");
document.writeln("				adown.contains ?");
document.writeln("					adown.contains( bup ) :");
document.writeln("					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16");
document.writeln("			));");
document.writeln("		} :");
document.writeln("		function( a, b ) {");
document.writeln("			if ( b ) {");
document.writeln("				while ( (b = b.parentNode) ) {");
document.writeln("					if ( b === a ) {");
document.writeln("						return true;");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("			return false;");
document.writeln("		};");
document.writeln("");
document.writeln("	/* Sorting");
document.writeln("	---------------------------------------------------------------------- */");
document.writeln("");
document.writeln("	// Document order sorting");
document.writeln("	sortOrder = hasCompare ?");
document.writeln("	function( a, b ) {");
document.writeln("");
document.writeln("		// Flag for duplicate removal");
document.writeln("		if ( a === b ) {");
document.writeln("			hasDuplicate = true;");
document.writeln("			return 0;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Sort on method existence if only one input has compareDocumentPosition");
document.writeln("		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;");
document.writeln("		if ( compare ) {");
document.writeln("			return compare;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Calculate position if both inputs belong to the same document");
document.writeln("		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?");
document.writeln("			a.compareDocumentPosition( b ) :");
document.writeln("");
document.writeln("			// Otherwise we know they are disconnected");
document.writeln("			1;");
document.writeln("");
document.writeln("		// Disconnected nodes");
document.writeln("		if ( compare & 1 ||");
document.writeln("			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {");
document.writeln("");
document.writeln("			// Choose the first element that is related to our preferred document");
document.writeln("			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {");
document.writeln("				return -1;");
document.writeln("			}");
document.writeln("			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {");
document.writeln("				return 1;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Maintain original order");
document.writeln("			return sortInput ?");
document.writeln("				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :");
document.writeln("				0;");
document.writeln("		}");
document.writeln("");
document.writeln("		return compare & 4 ? -1 : 1;");
document.writeln("	} :");
document.writeln("	function( a, b ) {");
document.writeln("		// Exit early if the nodes are identical");
document.writeln("		if ( a === b ) {");
document.writeln("			hasDuplicate = true;");
document.writeln("			return 0;");
document.writeln("		}");
document.writeln("");
document.writeln("		var cur,");
document.writeln("			i = 0,");
document.writeln("			aup = a.parentNode,");
document.writeln("			bup = b.parentNode,");
document.writeln("			ap = [ a ],");
document.writeln("			bp = [ b ];");
document.writeln("");
document.writeln("		// Parentless nodes are either documents or disconnected");
document.writeln("		if ( !aup || !bup ) {");
document.writeln("			return a === document ? -1 :");
document.writeln("				b === document ? 1 :");
document.writeln("				aup ? -1 :");
document.writeln("				bup ? 1 :");
document.writeln("				sortInput ?");
document.writeln("				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :");
document.writeln("				0;");
document.writeln("");
document.writeln("		// If the nodes are siblings, we can do a quick check");
document.writeln("		} else if ( aup === bup ) {");
document.writeln("			return siblingCheck( a, b );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Otherwise we need full lists of their ancestors for comparison");
document.writeln("		cur = a;");
document.writeln("		while ( (cur = cur.parentNode) ) {");
document.writeln("			ap.unshift( cur );");
document.writeln("		}");
document.writeln("		cur = b;");
document.writeln("		while ( (cur = cur.parentNode) ) {");
document.writeln("			bp.unshift( cur );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Walk down the tree looking for a discrepancy");
document.writeln("		while ( ap[i] === bp[i] ) {");
document.writeln("			i++;");
document.writeln("		}");
document.writeln("");
document.writeln("		return i ?");
document.writeln("			// Do a sibling check if the nodes have a common ancestor");
document.writeln("			siblingCheck( ap[i], bp[i] ) :");
document.writeln("");
document.writeln("			// Otherwise nodes in our document sort first");
document.writeln("			ap[i] === preferredDoc ? -1 :");
document.writeln("			bp[i] === preferredDoc ? 1 :");
document.writeln("			0;");
document.writeln("	};");
document.writeln("");
document.writeln("	return document;");
document.writeln("};");
document.writeln("");
document.writeln("Sizzle.matches = function( expr, elements ) {");
document.writeln("	return Sizzle( expr, null, null, elements );");
document.writeln("};");
document.writeln("");
document.writeln("Sizzle.matchesSelector = function( elem, expr ) {");
document.writeln("	// Set document vars if needed");
document.writeln("	if ( ( elem.ownerDocument || elem ) !== document ) {");
document.writeln("		setDocument( elem );");
document.writeln("	}");
document.writeln("");
document.writeln("	// Make sure that attribute selectors are quoted");
document.writeln("	expr = expr.replace( rattributeQuotes, \'=\'$1\']\' );");
document.writeln("");
document.writeln("	if ( support.matchesSelector && documentIsHTML &&");
document.writeln("		!compilerCache[ expr + \' \' ] &&");
document.writeln("		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&");
document.writeln("		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {");
document.writeln("");
document.writeln("		try {");
document.writeln("			var ret = matches.call( elem, expr );");
document.writeln("");
document.writeln("			// IE 9\'s matchesSelector returns false on disconnected nodes");
document.writeln("			if ( ret || support.disconnectedMatch ||");
document.writeln("					// As well, disconnected nodes are said to be in a document");
document.writeln("					// fragment in IE 9");
document.writeln("					elem.document && elem.document.nodeType !== 11 ) {");
document.writeln("				return ret;");
document.writeln("			}");
document.writeln("		} catch (e) {}");
document.writeln("	}");
document.writeln("");
document.writeln("	return Sizzle( expr, document, null, [ elem ] ).length > 0;");
document.writeln("};");
document.writeln("");
document.writeln("Sizzle.contains = function( context, elem ) {");
document.writeln("	// Set document vars if needed");
document.writeln("	if ( ( context.ownerDocument || context ) !== document ) {");
document.writeln("		setDocument( context );");
document.writeln("	}");
document.writeln("	return contains( context, elem );");
document.writeln("};");
document.writeln("");
document.writeln("Sizzle.attr = function( elem, name ) {");
document.writeln("	// Set document vars if needed");
document.writeln("	if ( ( elem.ownerDocument || elem ) !== document ) {");
document.writeln("		setDocument( elem );");
document.writeln("	}");
document.writeln("");
document.writeln("	var fn = Expr.attrHandle[ name.toLowerCase() ],");
document.writeln("		// Don\'t get fooled by Object.prototype properties (jQuery #13807)");
document.writeln("		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?");
document.writeln("			fn( elem, name, !documentIsHTML ) :");
document.writeln("			undefined;");
document.writeln("");
document.writeln("	return val !== undefined ?");
document.writeln("		val :");
document.writeln("		support.attributes || !documentIsHTML ?");
document.writeln("			elem.getAttribute( name ) :");
document.writeln("			(val = elem.getAttributeNode(name)) && val.specified ?");
document.writeln("				val.value :");
document.writeln("				null;");
document.writeln("};");
document.writeln("");
document.writeln("Sizzle.error = function( msg ) {");
document.writeln("	throw new Error( \'Syntax error, unrecognized expression: \' + msg );");
document.writeln("};");
document.writeln("");
document.writeln("/**");
document.writeln(" * Document sorting and removing duplicates");
document.writeln(" * @param {ArrayLike} results");
document.writeln(" */");
document.writeln("Sizzle.uniqueSort = function( results ) {");
document.writeln("	var elem,");
document.writeln("		duplicates = [],");
document.writeln("		j = 0,");
document.writeln("		i = 0;");
document.writeln("");
document.writeln("	// Unless we *know* we can detect duplicates, assume their presence");
document.writeln("	hasDuplicate = !support.detectDuplicates;");
document.writeln("	sortInput = !support.sortStable && results.slice( 0 );");
document.writeln("	results.sort( sortOrder );");
document.writeln("");
document.writeln("	if ( hasDuplicate ) {");
document.writeln("		while ( (elem = results[i++]) ) {");
document.writeln("			if ( elem === results[ i ] ) {");
document.writeln("				j = duplicates.push( i );");
document.writeln("			}");
document.writeln("		}");
document.writeln("		while ( j-- ) {");
document.writeln("			results.splice( duplicates[ j ], 1 );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Clear input after sorting to release objects");
document.writeln("	// See https://github.com/jquery/sizzle/pull/225");
document.writeln("	sortInput = null;");
document.writeln("");
document.writeln("	return results;");
document.writeln("};");
document.writeln("");
document.writeln("/**");
document.writeln(" * Utility function for retrieving the text value of an array of DOM nodes");
document.writeln(" * @param {Array|Element} elem");
document.writeln(" */");
document.writeln("getText = Sizzle.getText = function( elem ) {");
document.writeln("	var node,");
document.writeln("		ret = \'\',");
document.writeln("		i = 0,");
document.writeln("		nodeType = elem.nodeType;");
document.writeln("");
document.writeln("	if ( !nodeType ) {");
document.writeln("		// If no nodeType, this is expected to be an array");
document.writeln("		while ( (node = elem[i++]) ) {");
document.writeln("			// Do not traverse comment nodes");
document.writeln("			ret += getText( node );");
document.writeln("		}");
document.writeln("	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {");
document.writeln("		// Use textContent for elements");
document.writeln("		// innerText usage removed for consistency of new lines (jQuery #11153)");
document.writeln("		if ( typeof elem.textContent === \'string\' ) {");
document.writeln("			return elem.textContent;");
document.writeln("		} else {");
document.writeln("			// Traverse its children");
document.writeln("			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {");
document.writeln("				ret += getText( elem );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	} else if ( nodeType === 3 || nodeType === 4 ) {");
document.writeln("		return elem.nodeValue;");
document.writeln("	}");
document.writeln("	// Do not include comment or processing instruction nodes");
document.writeln("");
document.writeln("	return ret;");
document.writeln("};");
document.writeln("");
document.writeln("Expr = Sizzle.selectors = {");
document.writeln("");
document.writeln("	// Can be adjusted by the user");
document.writeln("	cacheLength: 50,");
document.writeln("");
document.writeln("	createPseudo: markFunction,");
document.writeln("");
document.writeln("	match: matchExpr,");
document.writeln("");
document.writeln("	attrHandle: {},");
document.writeln("");
document.writeln("	find: {},");
document.writeln("");
document.writeln("	relative: {");
document.writeln("		\'>\': { dir: \'parentNode\', first: true },");
document.writeln("		\' \': { dir: \'parentNode\' },");
document.writeln("		\'+\': { dir: \'previousSibling\', first: true },");
document.writeln("		\'~\': { dir: \'previousSibling\' }");
document.writeln("	},");
document.writeln("");
document.writeln("	preFilter: {");
document.writeln("		\'ATTR\': function( match ) {");
document.writeln("			match[1] = match[1].replace( runescape, funescape );");
document.writeln("");
document.writeln("			// Move the given value to match[3] whether quoted or unquoted");
document.writeln("			match[3] = ( match[3] || match[4] || match[5] || \'\' ).replace( runescape, funescape );");
document.writeln("");
document.writeln("			if ( match[2] === \'~=\' ) {");
document.writeln("				match[3] = \' \' + match[3] + \' \';");
document.writeln("			}");
document.writeln("");
document.writeln("			return match.slice( 0, 4 );");
document.writeln("		},");
document.writeln("");
document.writeln("		\'CHILD\': function( match ) {");
document.writeln("			/* matches from matchExpr[\'CHILD\']");
document.writeln("				1 type (only|nth|...)");
document.writeln("				2 what (child|of-type)");
document.writeln("				3 argument (even|odd|\/\/d*|\/\/d*n([+-]\/\/d+)?|...)");
document.writeln("				4 xn-component of xn+y argument ([+-]?\/\/d*n|)");
document.writeln("				5 sign of xn-component");
document.writeln("				6 x of xn-component");
document.writeln("				7 sign of y-component");
document.writeln("				8 y of y-component");
document.writeln("			*/");
document.writeln("			match[1] = match[1].toLowerCase();");
document.writeln("");
document.writeln("			if ( match[1].slice( 0, 3 ) === \'nth\' ) {");
document.writeln("				// nth-* requires argument");
document.writeln("				if ( !match[3] ) {");
document.writeln("					Sizzle.error( match[0] );");
document.writeln("				}");
document.writeln("");
document.writeln("				// numeric x and y parameters for Expr.filter.CHILD");
document.writeln("				// remember that false/true cast respectively to 0/1");
document.writeln("				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \'even\' || match[3] === \'odd\' ) );");
document.writeln("				match[5] = +( ( match[7] + match[8] ) || match[3] === \'odd\' );");
document.writeln("");
document.writeln("			// other types prohibit arguments");
document.writeln("			} else if ( match[3] ) {");
document.writeln("				Sizzle.error( match[0] );");
document.writeln("			}");
document.writeln("");
document.writeln("			return match;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'PSEUDO\': function( match ) {");
document.writeln("			var excess,");
document.writeln("				unquoted = !match[6] && match[2];");
document.writeln("");
document.writeln("			if ( matchExpr[\'CHILD\'].test( match[0] ) ) {");
document.writeln("				return null;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Accept quoted arguments as-is");
document.writeln("			if ( match[3] ) {");
document.writeln("				match[2] = match[4] || match[5] || \'\';");
document.writeln("");
document.writeln("			// Strip excess characters from unquoted arguments");
document.writeln("			} else if ( unquoted && rpseudo.test( unquoted ) &&");
document.writeln("				// Get excess from tokenize (recursively)");
document.writeln("				(excess = tokenize( unquoted, true )) &&");
document.writeln("				// advance to the next closing parenthesis");
document.writeln("				(excess = unquoted.indexOf( \')\', unquoted.length - excess ) - unquoted.length) ) {");
document.writeln("");
document.writeln("				// excess is a negative index");
document.writeln("				match[0] = match[0].slice( 0, excess );");
document.writeln("				match[2] = unquoted.slice( 0, excess );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Return only captures needed by the pseudo filter method (type and argument)");
document.writeln("			return match.slice( 0, 3 );");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	filter: {");
document.writeln("");
document.writeln("		\'TAG\': function( nodeNameSelector ) {");
document.writeln("			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();");
document.writeln("			return nodeNameSelector === \'*\' ?");
document.writeln("				function() { return true; } :");
document.writeln("				function( elem ) {");
document.writeln("					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;");
document.writeln("				};");
document.writeln("		},");
document.writeln("");
document.writeln("		\'CLASS\': function( className ) {");
document.writeln("			var pattern = classCache[ className + \' \' ];");
document.writeln("");
document.writeln("			return pattern ||");
document.writeln("				(pattern = new RegExp( \'(^|\' + whitespace + \')\' + className + \'(\' + whitespace + \'|$)\' )) &&");
document.writeln("				classCache( className, function( elem ) {");
document.writeln("					return pattern.test( typeof elem.className === \'string\' && elem.className || typeof elem.getAttribute !== \'undefined\' && elem.getAttribute(\'class\') || \'\' );");
document.writeln("				});");
document.writeln("		},");
document.writeln("");
document.writeln("		\'ATTR\': function( name, operator, check ) {");
document.writeln("			return function( elem ) {");
document.writeln("				var result = Sizzle.attr( elem, name );");
document.writeln("");
document.writeln("				if ( result == null ) {");
document.writeln("					return operator === \'!=\';");
document.writeln("				}");
document.writeln("				if ( !operator ) {");
document.writeln("					return true;");
document.writeln("				}");
document.writeln("");
document.writeln("				result += \'\';");
document.writeln("");
document.writeln("				return operator === \'=\' ? result === check :");
document.writeln("					operator === \'!=\' ? result !== check :");
document.writeln("					operator === \'^=\' ? check && result.indexOf( check ) === 0 :");
document.writeln("					operator === \'*=\' ? check && result.indexOf( check ) > -1 :");
document.writeln("					operator === \'$=\' ? check && result.slice( -check.length ) === check :");
document.writeln("					operator === \'~=\' ? ( \' \' + result.replace( rwhitespace, \' \' ) + \' \' ).indexOf( check ) > -1 :");
document.writeln("					operator === \'|=\' ? result === check || result.slice( 0, check.length + 1 ) === check + \'-\' :");
document.writeln("					false;");
document.writeln("			};");
document.writeln("		},");
document.writeln("");
document.writeln("		\'CHILD\': function( type, what, argument, first, last ) {");
document.writeln("			var simple = type.slice( 0, 3 ) !== \'nth\',");
document.writeln("				forward = type.slice( -4 ) !== \'last\',");
document.writeln("				ofType = what === \'of-type\';");
document.writeln("");
document.writeln("			return first === 1 && last === 0 ?");
document.writeln("");
document.writeln("				// Shortcut for :nth-*(n)");
document.writeln("				function( elem ) {");
document.writeln("					return !!elem.parentNode;");
document.writeln("				} :");
document.writeln("");
document.writeln("				function( elem, context, xml ) {");
document.writeln("					var cache, uniqueCache, outerCache, node, nodeIndex, start,");
document.writeln("						dir = simple !== forward ? \'nextSibling\' : \'previousSibling\',");
document.writeln("						parent = elem.parentNode,");
document.writeln("						name = ofType && elem.nodeName.toLowerCase(),");
document.writeln("						useCache = !xml && !ofType,");
document.writeln("						diff = false;");
document.writeln("");
document.writeln("					if ( parent ) {");
document.writeln("");
document.writeln("						// :(first|last|only)-(child|of-type)");
document.writeln("						if ( simple ) {");
document.writeln("							while ( dir ) {");
document.writeln("								node = elem;");
document.writeln("								while ( (node = node[ dir ]) ) {");
document.writeln("									if ( ofType ?");
document.writeln("										node.nodeName.toLowerCase() === name :");
document.writeln("										node.nodeType === 1 ) {");
document.writeln("");
document.writeln("										return false;");
document.writeln("									}");
document.writeln("								}");
document.writeln("								// Reverse direction for :only-* (if we haven\'t yet done so)");
document.writeln("								start = dir = type === \'only\' && !start && \'nextSibling\';");
document.writeln("							}");
document.writeln("							return true;");
document.writeln("						}");
document.writeln("");
document.writeln("						start = [ forward ? parent.firstChild : parent.lastChild ];");
document.writeln("");
document.writeln("						// non-xml :nth-child(...) stores cache data on `parent`");
document.writeln("						if ( forward && useCache ) {");
document.writeln("");
document.writeln("							// Seek `elem` from a previously-cached index");
document.writeln("");
document.writeln("							// ...in a gzip-friendly way");
document.writeln("							node = parent;");
document.writeln("							outerCache = node[ expando ] || (node[ expando ] = {});");
document.writeln("");
document.writeln("							// Support: IE <9 only");
document.writeln("							// Defend against cloned attroperties (jQuery gh-1709)");
document.writeln("							uniqueCache = outerCache[ node.uniqueID ] ||");
document.writeln("								(outerCache[ node.uniqueID ] = {});");
document.writeln("");
document.writeln("							cache = uniqueCache[ type ] || [];");
document.writeln("							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];");
document.writeln("							diff = nodeIndex && cache[ 2 ];");
document.writeln("							node = nodeIndex && parent.childNodes[ nodeIndex ];");
document.writeln("");
document.writeln("							while ( (node = ++nodeIndex && node && node[ dir ] ||");
document.writeln("");
document.writeln("								// Fallback to seeking `elem` from the start");
document.writeln("								(diff = nodeIndex = 0) || start.pop()) ) {");
document.writeln("");
document.writeln("								// When found, cache indexes on `parent` and break");
document.writeln("								if ( node.nodeType === 1 && ++diff && node === elem ) {");
document.writeln("									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];");
document.writeln("									break;");
document.writeln("								}");
document.writeln("							}");
document.writeln("");
document.writeln("						} else {");
document.writeln("							// Use previously-cached element index if available");
document.writeln("							if ( useCache ) {");
document.writeln("								// ...in a gzip-friendly way");
document.writeln("								node = elem;");
document.writeln("								outerCache = node[ expando ] || (node[ expando ] = {});");
document.writeln("");
document.writeln("								// Support: IE <9 only");
document.writeln("								// Defend against cloned attroperties (jQuery gh-1709)");
document.writeln("								uniqueCache = outerCache[ node.uniqueID ] ||");
document.writeln("									(outerCache[ node.uniqueID ] = {});");
document.writeln("");
document.writeln("								cache = uniqueCache[ type ] || [];");
document.writeln("								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];");
document.writeln("								diff = nodeIndex;");
document.writeln("							}");
document.writeln("");
document.writeln("							// xml :nth-child(...)");
document.writeln("							// or :nth-last-child(...) or :nth(-last)?-of-type(...)");
document.writeln("							if ( diff === false ) {");
document.writeln("								// Use the same loop as above to seek `elem` from the start");
document.writeln("								while ( (node = ++nodeIndex && node && node[ dir ] ||");
document.writeln("									(diff = nodeIndex = 0) || start.pop()) ) {");
document.writeln("");
document.writeln("									if ( ( ofType ?");
document.writeln("										node.nodeName.toLowerCase() === name :");
document.writeln("										node.nodeType === 1 ) &&");
document.writeln("										++diff ) {");
document.writeln("");
document.writeln("										// Cache the index of each encountered element");
document.writeln("										if ( useCache ) {");
document.writeln("											outerCache = node[ expando ] || (node[ expando ] = {});");
document.writeln("");
document.writeln("											// Support: IE <9 only");
document.writeln("											// Defend against cloned attroperties (jQuery gh-1709)");
document.writeln("											uniqueCache = outerCache[ node.uniqueID ] ||");
document.writeln("												(outerCache[ node.uniqueID ] = {});");
document.writeln("");
document.writeln("											uniqueCache[ type ] = [ dirruns, diff ];");
document.writeln("										}");
document.writeln("");
document.writeln("										if ( node === elem ) {");
document.writeln("											break;");
document.writeln("										}");
document.writeln("									}");
document.writeln("								}");
document.writeln("							}");
document.writeln("						}");
document.writeln("");
document.writeln("						// Incorporate the offset, then check against cycle size");
document.writeln("						diff -= last;");
document.writeln("						return diff === first || ( diff % first === 0 && diff / first >= 0 );");
document.writeln("					}");
document.writeln("				};");
document.writeln("		},");
document.writeln("");
document.writeln("		\'PSEUDO\': function( pseudo, argument ) {");
document.writeln("			// pseudo-class names are case-insensitive");
document.writeln("			// http://www.w3.org/TR/selectors/#pseudo-classes");
document.writeln("			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters");
document.writeln("			// Remember that setFilters inherits from pseudos");
document.writeln("			var args,");
document.writeln("				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||");
document.writeln("					Sizzle.error( \'unsupported pseudo: \' + pseudo );");
document.writeln("");
document.writeln("			// The user may use createPseudo to indicate that");
document.writeln("			// arguments are needed to create the filter function");
document.writeln("			// just as Sizzle does");
document.writeln("			if ( fn[ expando ] ) {");
document.writeln("				return fn( argument );");
document.writeln("			}");
document.writeln("");
document.writeln("			// But maintain support for old signatures");
document.writeln("			if ( fn.length > 1 ) {");
document.writeln("				args = [ pseudo, pseudo, \'\', argument ];");
document.writeln("				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?");
document.writeln("					markFunction(function( seed, matches ) {");
document.writeln("						var idx,");
document.writeln("							matched = fn( seed, argument ),");
document.writeln("							i = matched.length;");
document.writeln("						while ( i-- ) {");
document.writeln("							idx = indexOf( seed, matched[i] );");
document.writeln("							seed[ idx ] = !( matches[ idx ] = matched[i] );");
document.writeln("						}");
document.writeln("					}) :");
document.writeln("					function( elem ) {");
document.writeln("						return fn( elem, 0, args );");
document.writeln("					};");
document.writeln("			}");
document.writeln("");
document.writeln("			return fn;");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	pseudos: {");
document.writeln("		// Potentially complex pseudos");
document.writeln("		\'not\': markFunction(function( selector ) {");
document.writeln("			// Trim the selector passed to compile");
document.writeln("			// to avoid treating leading and trailing");
document.writeln("			// spaces as combinators");
document.writeln("			var input = [],");
document.writeln("				results = [],");
document.writeln("				matcher = compile( selector.replace( rtrim, \'$1\' ) );");
document.writeln("");
document.writeln("			return matcher[ expando ] ?");
document.writeln("				markFunction(function( seed, matches, context, xml ) {");
document.writeln("					var elem,");
document.writeln("						unmatched = matcher( seed, null, xml, [] ),");
document.writeln("						i = seed.length;");
document.writeln("");
document.writeln("					// Match elements unmatched by `matcher`");
document.writeln("					while ( i-- ) {");
document.writeln("						if ( (elem = unmatched[i]) ) {");
document.writeln("							seed[i] = !(matches[i] = elem);");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}) :");
document.writeln("				function( elem, context, xml ) {");
document.writeln("					input[0] = elem;");
document.writeln("					matcher( input, null, xml, results );");
document.writeln("					// Don\'t keep the element (issue #299)");
document.writeln("					input[0] = null;");
document.writeln("					return !results.pop();");
document.writeln("				};");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'has\': markFunction(function( selector ) {");
document.writeln("			return function( elem ) {");
document.writeln("				return Sizzle( selector, elem ).length > 0;");
document.writeln("			};");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'contains\': markFunction(function( text ) {");
document.writeln("			text = text.replace( runescape, funescape );");
document.writeln("			return function( elem ) {");
document.writeln("				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;");
document.writeln("			};");
document.writeln("		}),");
document.writeln("");
document.writeln("		// \'Whether an element is represented by a :lang() selector");
document.writeln("		// is based solely on the element\'s language value");
document.writeln("		// being equal to the identifier C,");
document.writeln("		// or beginning with the identifier C immediately followed by \'-\'.");
document.writeln("		// The matching of C against the element\'s language value is performed case-insensitively.");
document.writeln("		// The identifier C does not have to be a valid language name.\'");
document.writeln("		// http://www.w3.org/TR/selectors/#lang-pseudo");
document.writeln("		\'lang\': markFunction( function( lang ) {");
document.writeln("			// lang value must be a valid identifier");
document.writeln("			if ( !ridentifier.test(lang || \'\') ) {");
document.writeln("				Sizzle.error( \'unsupported lang: \' + lang );");
document.writeln("			}");
document.writeln("			lang = lang.replace( runescape, funescape ).toLowerCase();");
document.writeln("			return function( elem ) {");
document.writeln("				var elemLang;");
document.writeln("				do {");
document.writeln("					if ( (elemLang = documentIsHTML ?");
document.writeln("						elem.lang :");
document.writeln("						elem.getAttribute(\'xml:lang\') || elem.getAttribute(\'lang\')) ) {");
document.writeln("");
document.writeln("						elemLang = elemLang.toLowerCase();");
document.writeln("						return elemLang === lang || elemLang.indexOf( lang + \'-\' ) === 0;");
document.writeln("					}");
document.writeln("				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );");
document.writeln("				return false;");
document.writeln("			};");
document.writeln("		}),");
document.writeln("");
document.writeln("		// Miscellaneous");
document.writeln("		\'target\': function( elem ) {");
document.writeln("			var hash = window.location && window.location.hash;");
document.writeln("			return hash && hash.slice( 1 ) === elem.id;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'root\': function( elem ) {");
document.writeln("			return elem === docElem;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'focus\': function( elem ) {");
document.writeln("			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);");
document.writeln("		},");
document.writeln("");
document.writeln("		// Boolean properties");
document.writeln("		\'enabled\': function( elem ) {");
document.writeln("			return elem.disabled === false;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'disabled\': function( elem ) {");
document.writeln("			return elem.disabled === true;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'checked\': function( elem ) {");
document.writeln("			// In CSS3, :checked should return both checked and selected elements");
document.writeln("			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked");
document.writeln("			var nodeName = elem.nodeName.toLowerCase();");
document.writeln("			return (nodeName === \'input\' && !!elem.checked) || (nodeName === \'option\' && !!elem.selected);");
document.writeln("		},");
document.writeln("");
document.writeln("		\'selected\': function( elem ) {");
document.writeln("			// Accessing this property makes selected-by-default");
document.writeln("			// options in Safari work properly");
document.writeln("			if ( elem.parentNode ) {");
document.writeln("				elem.parentNode.selectedIndex;");
document.writeln("			}");
document.writeln("");
document.writeln("			return elem.selected === true;");
document.writeln("		},");
document.writeln("");
document.writeln("		// Contents");
document.writeln("		\'empty\': function( elem ) {");
document.writeln("			// http://www.w3.org/TR/selectors/#empty-pseudo");
document.writeln("			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),");
document.writeln("			//   but not by others (comment: 8; processing instruction: 7; etc.)");
document.writeln("			// nodeType < 6 works because attributes (2) do not appear as children");
document.writeln("			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {");
document.writeln("				if ( elem.nodeType < 6 ) {");
document.writeln("					return false;");
document.writeln("				}");
document.writeln("			}");
document.writeln("			return true;");
document.writeln("		},");
document.writeln("");
document.writeln("		\'parent\': function( elem ) {");
document.writeln("			return !Expr.pseudos[\'empty\']( elem );");
document.writeln("		},");
document.writeln("");
document.writeln("		// Element/input types");
document.writeln("		\'header\': function( elem ) {");
document.writeln("			return rheader.test( elem.nodeName );");
document.writeln("		},");
document.writeln("");
document.writeln("		\'input\': function( elem ) {");
document.writeln("			return rinputs.test( elem.nodeName );");
document.writeln("		},");
document.writeln("");
document.writeln("		\'button\': function( elem ) {");
document.writeln("			var name = elem.nodeName.toLowerCase();");
document.writeln("			return name === \'input\' && elem.type === \'button\' || name === \'button\';");
document.writeln("		},");
document.writeln("");
document.writeln("		\'text\': function( elem ) {");
document.writeln("			var attr;");
document.writeln("			return elem.nodeName.toLowerCase() === \'input\' &&");
document.writeln("				elem.type === \'text\' &&");
document.writeln("");
document.writeln("				// Support: IE<8");
document.writeln("				// New HTML5 attribute values (e.g., \'search\') appear with elem.type === \'text\'");
document.writeln("				( (attr = elem.getAttribute(\'type\')) == null || attr.toLowerCase() === \'text\' );");
document.writeln("		},");
document.writeln("");
document.writeln("		// Position-in-collection");
document.writeln("		\'first\': createPositionalPseudo(function() {");
document.writeln("			return [ 0 ];");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'last\': createPositionalPseudo(function( matchIndexes, length ) {");
document.writeln("			return [ length - 1 ];");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'eq\': createPositionalPseudo(function( matchIndexes, length, argument ) {");
document.writeln("			return [ argument < 0 ? argument + length : argument ];");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'even\': createPositionalPseudo(function( matchIndexes, length ) {");
document.writeln("			var i = 0;");
document.writeln("			for ( ; i < length; i += 2 ) {");
document.writeln("				matchIndexes.push( i );");
document.writeln("			}");
document.writeln("			return matchIndexes;");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'odd\': createPositionalPseudo(function( matchIndexes, length ) {");
document.writeln("			var i = 1;");
document.writeln("			for ( ; i < length; i += 2 ) {");
document.writeln("				matchIndexes.push( i );");
document.writeln("			}");
document.writeln("			return matchIndexes;");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'lt\': createPositionalPseudo(function( matchIndexes, length, argument ) {");
document.writeln("			var i = argument < 0 ? argument + length : argument;");
document.writeln("			for ( ; --i >= 0; ) {");
document.writeln("				matchIndexes.push( i );");
document.writeln("			}");
document.writeln("			return matchIndexes;");
document.writeln("		}),");
document.writeln("");
document.writeln("		\'gt\': createPositionalPseudo(function( matchIndexes, length, argument ) {");
document.writeln("			var i = argument < 0 ? argument + length : argument;");
document.writeln("			for ( ; ++i < length; ) {");
document.writeln("				matchIndexes.push( i );");
document.writeln("			}");
document.writeln("			return matchIndexes;");
document.writeln("		})");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("Expr.pseudos[\'nth\'] = Expr.pseudos[\'eq\'];");
document.writeln("");
document.writeln("// Add button/input type pseudos");
document.writeln("for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {");
document.writeln("	Expr.pseudos[ i ] = createInputPseudo( i );");
document.writeln("}");
document.writeln("for ( i in { submit: true, reset: true } ) {");
document.writeln("	Expr.pseudos[ i ] = createButtonPseudo( i );");
document.writeln("}");
document.writeln("");
document.writeln("// Easy API for creating new setFilters");
document.writeln("function setFilters() {}");
document.writeln("setFilters.prototype = Expr.filters = Expr.pseudos;");
document.writeln("Expr.setFilters = new setFilters();");
document.writeln("");
document.writeln("tokenize = Sizzle.tokenize = function( selector, parseOnly ) {");
document.writeln("	var matched, match, tokens, type,");
document.writeln("		soFar, groups, preFilters,");
document.writeln("		cached = tokenCache[ selector + \' \' ];");
document.writeln("");
document.writeln("	if ( cached ) {");
document.writeln("		return parseOnly ? 0 : cached.slice( 0 );");
document.writeln("	}");
document.writeln("");
document.writeln("	soFar = selector;");
document.writeln("	groups = [];");
document.writeln("	preFilters = Expr.preFilter;");
document.writeln("");
document.writeln("	while ( soFar ) {");
document.writeln("");
document.writeln("		// Comma and first run");
document.writeln("		if ( !matched || (match = rcomma.exec( soFar )) ) {");
document.writeln("			if ( match ) {");
document.writeln("				// Don\'t consume trailing commas as valid");
document.writeln("				soFar = soFar.slice( match[0].length ) || soFar;");
document.writeln("			}");
document.writeln("			groups.push( (tokens = []) );");
document.writeln("		}");
document.writeln("");
document.writeln("		matched = false;");
document.writeln("");
document.writeln("		// Combinators");
document.writeln("		if ( (match = rcombinators.exec( soFar )) ) {");
document.writeln("			matched = match.shift();");
document.writeln("			tokens.push({");
document.writeln("				value: matched,");
document.writeln("				// Cast descendant combinators to space");
document.writeln("				type: match[0].replace( rtrim, \' \' )");
document.writeln("			});");
document.writeln("			soFar = soFar.slice( matched.length );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Filters");
document.writeln("		for ( type in Expr.filter ) {");
document.writeln("			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||");
document.writeln("				(match = preFilters[ type ]( match ))) ) {");
document.writeln("				matched = match.shift();");
document.writeln("				tokens.push({");
document.writeln("					value: matched,");
document.writeln("					type: type,");
document.writeln("					matches: match");
document.writeln("				});");
document.writeln("				soFar = soFar.slice( matched.length );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( !matched ) {");
document.writeln("			break;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Return the length of the invalid excess");
document.writeln("	// if we\'re just parsing");
document.writeln("	// Otherwise, throw an error or return tokens");
document.writeln("	return parseOnly ?");
document.writeln("		soFar.length :");
document.writeln("		soFar ?");
document.writeln("			Sizzle.error( selector ) :");
document.writeln("			// Cache the tokens");
document.writeln("			tokenCache( selector, groups ).slice( 0 );");
document.writeln("};");
document.writeln("");
document.writeln("function toSelector( tokens ) {");
document.writeln("	var i = 0,");
document.writeln("		len = tokens.length,");
document.writeln("		selector = \'\';");
document.writeln("	for ( ; i < len; i++ ) {");
document.writeln("		selector += tokens[i].value;");
document.writeln("	}");
document.writeln("	return selector;");
document.writeln("}");
document.writeln("");
document.writeln("function addCombinator( matcher, combinator, base ) {");
document.writeln("	var dir = combinator.dir,");
document.writeln("		checkNonElements = base && dir === \'parentNode\',");
document.writeln("		doneName = done++;");
document.writeln("");
document.writeln("	return combinator.first ?");
document.writeln("		// Check against closest ancestor/preceding element");
document.writeln("		function( elem, context, xml ) {");
document.writeln("			while ( (elem = elem[ dir ]) ) {");
document.writeln("				if ( elem.nodeType === 1 || checkNonElements ) {");
document.writeln("					return matcher( elem, context, xml );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		} :");
document.writeln("");
document.writeln("		// Check against all ancestor/preceding elements");
document.writeln("		function( elem, context, xml ) {");
document.writeln("			var oldCache, uniqueCache, outerCache,");
document.writeln("				newCache = [ dirruns, doneName ];");
document.writeln("");
document.writeln("			// We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching");
document.writeln("			if ( xml ) {");
document.writeln("				while ( (elem = elem[ dir ]) ) {");
document.writeln("					if ( elem.nodeType === 1 || checkNonElements ) {");
document.writeln("						if ( matcher( elem, context, xml ) ) {");
document.writeln("							return true;");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			} else {");
document.writeln("				while ( (elem = elem[ dir ]) ) {");
document.writeln("					if ( elem.nodeType === 1 || checkNonElements ) {");
document.writeln("						outerCache = elem[ expando ] || (elem[ expando ] = {});");
document.writeln("");
document.writeln("						// Support: IE <9 only");
document.writeln("						// Defend against cloned attroperties (jQuery gh-1709)");
document.writeln("						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});");
document.writeln("");
document.writeln("						if ( (oldCache = uniqueCache[ dir ]) &&");
document.writeln("							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {");
document.writeln("");
document.writeln("							// Assign to newCache so results back-propagate to previous elements");
document.writeln("							return (newCache[ 2 ] = oldCache[ 2 ]);");
document.writeln("						} else {");
document.writeln("							// Reuse newcache so results back-propagate to previous elements");
document.writeln("							uniqueCache[ dir ] = newCache;");
document.writeln("");
document.writeln("							// A match means we\'re done; a fail means we have to keep checking");
document.writeln("							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {");
document.writeln("								return true;");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		};");
document.writeln("}");
document.writeln("");
document.writeln("function elementMatcher( matchers ) {");
document.writeln("	return matchers.length > 1 ?");
document.writeln("		function( elem, context, xml ) {");
document.writeln("			var i = matchers.length;");
document.writeln("			while ( i-- ) {");
document.writeln("				if ( !matchers[i]( elem, context, xml ) ) {");
document.writeln("					return false;");
document.writeln("				}");
document.writeln("			}");
document.writeln("			return true;");
document.writeln("		} :");
document.writeln("		matchers[0];");
document.writeln("}");
document.writeln("");
document.writeln("function multipleContexts( selector, contexts, results ) {");
document.writeln("	var i = 0,");
document.writeln("		len = contexts.length;");
document.writeln("	for ( ; i < len; i++ ) {");
document.writeln("		Sizzle( selector, contexts[i], results );");
document.writeln("	}");
document.writeln("	return results;");
document.writeln("}");
document.writeln("");
document.writeln("function condense( unmatched, map, filter, context, xml ) {");
document.writeln("	var elem,");
document.writeln("		newUnmatched = [],");
document.writeln("		i = 0,");
document.writeln("		len = unmatched.length,");
document.writeln("		mapped = map != null;");
document.writeln("");
document.writeln("	for ( ; i < len; i++ ) {");
document.writeln("		if ( (elem = unmatched[i]) ) {");
document.writeln("			if ( !filter || filter( elem, context, xml ) ) {");
document.writeln("				newUnmatched.push( elem );");
document.writeln("				if ( mapped ) {");
document.writeln("					map.push( i );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return newUnmatched;");
document.writeln("}");
document.writeln("");
document.writeln("function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {");
document.writeln("	if ( postFilter && !postFilter[ expando ] ) {");
document.writeln("		postFilter = setMatcher( postFilter );");
document.writeln("	}");
document.writeln("	if ( postFinder && !postFinder[ expando ] ) {");
document.writeln("		postFinder = setMatcher( postFinder, postSelector );");
document.writeln("	}");
document.writeln("	return markFunction(function( seed, results, context, xml ) {");
document.writeln("		var temp, i, elem,");
document.writeln("			preMap = [],");
document.writeln("			postMap = [],");
document.writeln("			preexisting = results.length,");
document.writeln("");
document.writeln("			// Get initial elements from seed or context");
document.writeln("			elems = seed || multipleContexts( selector || \'*\', context.nodeType ? [ context ] : context, [] ),");
document.writeln("");
document.writeln("			// Prefilter to get matcher input, preserving a map for seed-results synchronization");
document.writeln("			matcherIn = preFilter && ( seed || !selector ) ?");
document.writeln("				condense( elems, preMap, preFilter, context, xml ) :");
document.writeln("				elems,");
document.writeln("");
document.writeln("			matcherOut = matcher ?");
document.writeln("				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,");
document.writeln("				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?");
document.writeln("");
document.writeln("					// ...intermediate processing is necessary");
document.writeln("					[] :");
document.writeln("");
document.writeln("					// ...otherwise use results directly");
document.writeln("					results :");
document.writeln("				matcherIn;");
document.writeln("");
document.writeln("		// Find primary matches");
document.writeln("		if ( matcher ) {");
document.writeln("			matcher( matcherIn, matcherOut, context, xml );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Apply postFilter");
document.writeln("		if ( postFilter ) {");
document.writeln("			temp = condense( matcherOut, postMap );");
document.writeln("			postFilter( temp, [], context, xml );");
document.writeln("");
document.writeln("			// Un-match failing elements by moving them back to matcherIn");
document.writeln("			i = temp.length;");
document.writeln("			while ( i-- ) {");
document.writeln("				if ( (elem = temp[i]) ) {");
document.writeln("					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( seed ) {");
document.writeln("			if ( postFinder || preFilter ) {");
document.writeln("				if ( postFinder ) {");
document.writeln("					// Get the final matcherOut by condensing this intermediate into postFinder contexts");
document.writeln("					temp = [];");
document.writeln("					i = matcherOut.length;");
document.writeln("					while ( i-- ) {");
document.writeln("						if ( (elem = matcherOut[i]) ) {");
document.writeln("							// Restore matcherIn since elem is not yet a final match");
document.writeln("							temp.push( (matcherIn[i] = elem) );");
document.writeln("						}");
document.writeln("					}");
document.writeln("					postFinder( null, (matcherOut = []), temp, xml );");
document.writeln("				}");
document.writeln("");
document.writeln("				// Move matched elements from seed to results to keep them synchronized");
document.writeln("				i = matcherOut.length;");
document.writeln("				while ( i-- ) {");
document.writeln("					if ( (elem = matcherOut[i]) &&");
document.writeln("						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {");
document.writeln("");
document.writeln("						seed[temp] = !(results[temp] = elem);");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("		// Add elements to results, through postFinder if defined");
document.writeln("		} else {");
document.writeln("			matcherOut = condense(");
document.writeln("				matcherOut === results ?");
document.writeln("					matcherOut.splice( preexisting, matcherOut.length ) :");
document.writeln("					matcherOut");
document.writeln("			);");
document.writeln("			if ( postFinder ) {");
document.writeln("				postFinder( null, results, matcherOut, xml );");
document.writeln("			} else {");
document.writeln("				push.apply( results, matcherOut );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	});");
document.writeln("}");
document.writeln("");
document.writeln("function matcherFromTokens( tokens ) {");
document.writeln("	var checkContext, matcher, j,");
document.writeln("		len = tokens.length,");
document.writeln("		leadingRelative = Expr.relative[ tokens[0].type ],");
document.writeln("		implicitRelative = leadingRelative || Expr.relative[\' \'],");
document.writeln("		i = leadingRelative ? 1 : 0,");
document.writeln("");
document.writeln("		// The foundational matcher ensures that elements are reachable from top-level context(s)");
document.writeln("		matchContext = addCombinator( function( elem ) {");
document.writeln("			return elem === checkContext;");
document.writeln("		}, implicitRelative, true ),");
document.writeln("		matchAnyContext = addCombinator( function( elem ) {");
document.writeln("			return indexOf( checkContext, elem ) > -1;");
document.writeln("		}, implicitRelative, true ),");
document.writeln("		matchers = [ function( elem, context, xml ) {");
document.writeln("			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (");
document.writeln("				(checkContext = context).nodeType ?");
document.writeln("					matchContext( elem, context, xml ) :");
document.writeln("					matchAnyContext( elem, context, xml ) );");
document.writeln("			// Avoid hanging onto element (issue #299)");
document.writeln("			checkContext = null;");
document.writeln("			return ret;");
document.writeln("		} ];");
document.writeln("");
document.writeln("	for ( ; i < len; i++ ) {");
document.writeln("		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {");
document.writeln("			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];");
document.writeln("		} else {");
document.writeln("			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );");
document.writeln("");
document.writeln("			// Return special upon seeing a positional matcher");
document.writeln("			if ( matcher[ expando ] ) {");
document.writeln("				// Find the next relative operator (if any) for proper handling");
document.writeln("				j = ++i;");
document.writeln("				for ( ; j < len; j++ ) {");
document.writeln("					if ( Expr.relative[ tokens[j].type ] ) {");
document.writeln("						break;");
document.writeln("					}");
document.writeln("				}");
document.writeln("				return setMatcher(");
document.writeln("					i > 1 && elementMatcher( matchers ),");
document.writeln("					i > 1 && toSelector(");
document.writeln("						// If the preceding token was a descendant combinator, insert an implicit any-element `*`");
document.writeln("						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \' \' ? \'*\' : \'\' })");
document.writeln("					).replace( rtrim, \'$1\' ),");
document.writeln("					matcher,");
document.writeln("					i < j && matcherFromTokens( tokens.slice( i, j ) ),");
document.writeln("					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),");
document.writeln("					j < len && toSelector( tokens )");
document.writeln("				);");
document.writeln("			}");
document.writeln("			matchers.push( matcher );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return elementMatcher( matchers );");
document.writeln("}");
document.writeln("");
document.writeln("function matcherFromGroupMatchers( elementMatchers, setMatchers ) {");
document.writeln("	var bySet = setMatchers.length > 0,");
document.writeln("		byElement = elementMatchers.length > 0,");
document.writeln("		superMatcher = function( seed, context, xml, results, outermost ) {");
document.writeln("			var elem, j, matcher,");
document.writeln("				matchedCount = 0,");
document.writeln("				i = \'0\',");
document.writeln("				unmatched = seed && [],");
document.writeln("				setMatched = [],");
document.writeln("				contextBackup = outermostContext,");
document.writeln("				// We must always have either seed elements or outermost context");
document.writeln("				elems = seed || byElement && Expr.find[\'TAG\']( \'*\', outermost ),");
document.writeln("				// Use integer dirruns iff this is the outermost matcher");
document.writeln("				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),");
document.writeln("				len = elems.length;");
document.writeln("");
document.writeln("			if ( outermost ) {");
document.writeln("				outermostContext = context === document || context || outermost;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add elements passing elementMatchers directly to results");
document.writeln("			// Support: IE<9, Safari");
document.writeln("			// Tolerate NodeList properties (IE: \'length\'; Safari: <number>) matching elements by id");
document.writeln("			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {");
document.writeln("				if ( byElement && elem ) {");
document.writeln("					j = 0;");
document.writeln("					if ( !context && elem.ownerDocument !== document ) {");
document.writeln("						setDocument( elem );");
document.writeln("						xml = !documentIsHTML;");
document.writeln("					}");
document.writeln("					while ( (matcher = elementMatchers[j++]) ) {");
document.writeln("						if ( matcher( elem, context || document, xml) ) {");
document.writeln("							results.push( elem );");
document.writeln("							break;");
document.writeln("						}");
document.writeln("					}");
document.writeln("					if ( outermost ) {");
document.writeln("						dirruns = dirrunsUnique;");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				// Track unmatched elements for set filters");
document.writeln("				if ( bySet ) {");
document.writeln("					// They will have gone through all possible matchers");
document.writeln("					if ( (elem = !matcher && elem) ) {");
document.writeln("						matchedCount--;");
document.writeln("					}");
document.writeln("");
document.writeln("					// Lengthen the array for every element, matched or not");
document.writeln("					if ( seed ) {");
document.writeln("						unmatched.push( elem );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// `i` is now the count of elements visited above, and adding it to `matchedCount`");
document.writeln("			// makes the latter nonnegative.");
document.writeln("			matchedCount += i;");
document.writeln("");
document.writeln("			// Apply set filters to unmatched elements");
document.writeln("			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`");
document.writeln("			// equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have");
document.writeln("			// no element matchers and no seed.");
document.writeln("			// Incrementing an initially-string \'0\' `i` allows `i` to remain a string only in that");
document.writeln("			// case, which will result in a \'00\' `matchedCount` that differs from `i` but is also");
document.writeln("			// numerically zero.");
document.writeln("			if ( bySet && i !== matchedCount ) {");
document.writeln("				j = 0;");
document.writeln("				while ( (matcher = setMatchers[j++]) ) {");
document.writeln("					matcher( unmatched, setMatched, context, xml );");
document.writeln("				}");
document.writeln("");
document.writeln("				if ( seed ) {");
document.writeln("					// Reintegrate element matches to eliminate the need for sorting");
document.writeln("					if ( matchedCount > 0 ) {");
document.writeln("						while ( i-- ) {");
document.writeln("							if ( !(unmatched[i] || setMatched[i]) ) {");
document.writeln("								setMatched[i] = pop.call( results );");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// Discard index placeholder values to get only actual matches");
document.writeln("					setMatched = condense( setMatched );");
document.writeln("				}");
document.writeln("");
document.writeln("				// Add matches to results");
document.writeln("				push.apply( results, setMatched );");
document.writeln("");
document.writeln("				// Seedless set matches succeeding multiple successful matchers stipulate sorting");
document.writeln("				if ( outermost && !seed && setMatched.length > 0 &&");
document.writeln("					( matchedCount + setMatchers.length ) > 1 ) {");
document.writeln("");
document.writeln("					Sizzle.uniqueSort( results );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Override manipulation of globals by nested matchers");
document.writeln("			if ( outermost ) {");
document.writeln("				dirruns = dirrunsUnique;");
document.writeln("				outermostContext = contextBackup;");
document.writeln("			}");
document.writeln("");
document.writeln("			return unmatched;");
document.writeln("		};");
document.writeln("");
document.writeln("	return bySet ?");
document.writeln("		markFunction( superMatcher ) :");
document.writeln("		superMatcher;");
document.writeln("}");
document.writeln("");
document.writeln("compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {");
document.writeln("	var i,");
document.writeln("		setMatchers = [],");
document.writeln("		elementMatchers = [],");
document.writeln("		cached = compilerCache[ selector + \' \' ];");
document.writeln("");
document.writeln("	if ( !cached ) {");
document.writeln("		// Generate a function of recursive functions that can be used to check each element");
document.writeln("		if ( !match ) {");
document.writeln("			match = tokenize( selector );");
document.writeln("		}");
document.writeln("		i = match.length;");
document.writeln("		while ( i-- ) {");
document.writeln("			cached = matcherFromTokens( match[i] );");
document.writeln("			if ( cached[ expando ] ) {");
document.writeln("				setMatchers.push( cached );");
document.writeln("			} else {");
document.writeln("				elementMatchers.push( cached );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Cache the compiled function");
document.writeln("		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );");
document.writeln("");
document.writeln("		// Save selector and tokenization");
document.writeln("		cached.selector = selector;");
document.writeln("	}");
document.writeln("	return cached;");
document.writeln("};");
document.writeln("");
document.writeln("/**");
document.writeln(" * A low-level selection function that works with Sizzle\'s compiled");
document.writeln(" *  selector functions");
document.writeln(" * @param {String|Function} selector A selector or a pre-compiled");
document.writeln(" *  selector function built with Sizzle.compile");
document.writeln(" * @param {Element} context");
document.writeln(" * @param {Array} [results]");
document.writeln(" * @param {Array} [seed] A set of elements to match against");
document.writeln(" */");
document.writeln("select = Sizzle.select = function( selector, context, results, seed ) {");
document.writeln("	var i, tokens, token, type, find,");
document.writeln("		compiled = typeof selector === \'function\' && selector,");
document.writeln("		match = !seed && tokenize( (selector = compiled.selector || selector) );");
document.writeln("");
document.writeln("	results = results || [];");
document.writeln("");
document.writeln("	// Try to minimize operations if there is only one selector in the list and no seed");
document.writeln("	// (the latter of which guarantees us context)");
document.writeln("	if ( match.length === 1 ) {");
document.writeln("");
document.writeln("		// Reduce context if the leading compound selector is an ID");
document.writeln("		tokens = match[0] = match[0].slice( 0 );");
document.writeln("		if ( tokens.length > 2 && (token = tokens[0]).type === \'ID\' &&");
document.writeln("				support.getById && context.nodeType === 9 && documentIsHTML &&");
document.writeln("				Expr.relative[ tokens[1].type ] ) {");
document.writeln("");
document.writeln("			context = ( Expr.find[\'ID\']( token.matches[0].replace(runescape, funescape), context ) || [] )[0];");
document.writeln("			if ( !context ) {");
document.writeln("				return results;");
document.writeln("");
document.writeln("			// Precompiled matchers will still verify ancestry, so step up a level");
document.writeln("			} else if ( compiled ) {");
document.writeln("				context = context.parentNode;");
document.writeln("			}");
document.writeln("");
document.writeln("			selector = selector.slice( tokens.shift().value.length );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Fetch a seed set for right-to-left matching");
document.writeln("		i = matchExpr[\'needsContext\'].test( selector ) ? 0 : tokens.length;");
document.writeln("		while ( i-- ) {");
document.writeln("			token = tokens[i];");
document.writeln("");
document.writeln("			// Abort if we hit a combinator");
document.writeln("			if ( Expr.relative[ (type = token.type) ] ) {");
document.writeln("				break;");
document.writeln("			}");
document.writeln("			if ( (find = Expr.find[ type ]) ) {");
document.writeln("				// Search, expanding context for leading sibling combinators");
document.writeln("				if ( (seed = find(");
document.writeln("					token.matches[0].replace( runescape, funescape ),");
document.writeln("					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context");
document.writeln("				)) ) {");
document.writeln("");
document.writeln("					// If seed is empty or no tokens remain, we can return early");
document.writeln("					tokens.splice( i, 1 );");
document.writeln("					selector = seed.length && toSelector( tokens );");
document.writeln("					if ( !selector ) {");
document.writeln("						push.apply( results, seed );");
document.writeln("						return results;");
document.writeln("					}");
document.writeln("");
document.writeln("					break;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Compile and execute a filtering function if one is not provided");
document.writeln("	// Provide `match` to avoid retokenization if we modified the selector above");
document.writeln("	( compiled || compile( selector, match ) )(");
document.writeln("		seed,");
document.writeln("		context,");
document.writeln("		!documentIsHTML,");
document.writeln("		results,");
document.writeln("		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context");
document.writeln("	);");
document.writeln("	return results;");
document.writeln("};");
document.writeln("");
document.writeln("// One-time assignments");
document.writeln("");
document.writeln("// Sort stability");
document.writeln("support.sortStable = expando.split(\'\').sort( sortOrder ).join(\'\') === expando;");
document.writeln("");
document.writeln("// Support: Chrome 14-35+");
document.writeln("// Always assume duplicates if they aren\'t passed to the comparison function");
document.writeln("support.detectDuplicates = !!hasDuplicate;");
document.writeln("");
document.writeln("// Initialize against the default document");
document.writeln("setDocument();");
document.writeln("");
document.writeln("// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)");
document.writeln("// Detached nodes confoundingly follow *each other*");
document.writeln("support.sortDetached = assert(function( div1 ) {");
document.writeln("	// Should return 1, but returns 4 (following)");
document.writeln("	return div1.compareDocumentPosition( document.createElement(\'div\') ) & 1;");
document.writeln("});");
document.writeln("");
document.writeln("// Support: IE<8");
document.writeln("// Prevent attribute/property \'interpolation\'");
document.writeln("// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx");
document.writeln("if ( !assert(function( div ) {");
document.writeln("	div.innerHTML = \'<a href=\'#\'></a>\';");
document.writeln("	return div.firstChild.getAttribute(\'href\') === \'#\' ;");
document.writeln("}) ) {");
document.writeln("	addHandle( \'type|href|height|width\', function( elem, name, isXML ) {");
document.writeln("		if ( !isXML ) {");
document.writeln("			return elem.getAttribute( name, name.toLowerCase() === \'type\' ? 1 : 2 );");
document.writeln("		}");
document.writeln("	});");
document.writeln("}");
document.writeln("");
document.writeln("// Support: IE<9");
document.writeln("// Use defaultValue in place of getAttribute(\'value\')");
document.writeln("if ( !support.attributes || !assert(function( div ) {");
document.writeln("	div.innerHTML = \'<input/>\';");
document.writeln("	div.firstChild.setAttribute( \'value\', \'\' );");
document.writeln("	return div.firstChild.getAttribute( \'value\' ) === \'\';");
document.writeln("}) ) {");
document.writeln("	addHandle( \'value\', function( elem, name, isXML ) {");
document.writeln("		if ( !isXML && elem.nodeName.toLowerCase() === \'input\' ) {");
document.writeln("			return elem.defaultValue;");
document.writeln("		}");
document.writeln("	});");
document.writeln("}");
document.writeln("");
document.writeln("// Support: IE<9");
document.writeln("// Use getAttributeNode to fetch booleans when getAttribute lies");
document.writeln("if ( !assert(function( div ) {");
document.writeln("	return div.getAttribute(\'disabled\') == null;");
document.writeln("}) ) {");
document.writeln("	addHandle( booleans, function( elem, name, isXML ) {");
document.writeln("		var val;");
document.writeln("		if ( !isXML ) {");
document.writeln("			return elem[ name ] === true ? name.toLowerCase() :");
document.writeln("					(val = elem.getAttributeNode( name )) && val.specified ?");
document.writeln("					val.value :");
document.writeln("				null;");
document.writeln("		}");
document.writeln("	});");
document.writeln("}");
document.writeln("");
document.writeln("return Sizzle;");
document.writeln("");
document.writeln("})( window );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("jQuery.find = Sizzle;");
document.writeln("jQuery.expr = Sizzle.selectors;");
document.writeln("jQuery.expr[ \':\' ] = jQuery.expr.pseudos;");
document.writeln("jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;");
document.writeln("jQuery.text = Sizzle.getText;");
document.writeln("jQuery.isXMLDoc = Sizzle.isXML;");
document.writeln("jQuery.contains = Sizzle.contains;");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var dir = function( elem, dir, until ) {");
document.writeln("	var matched = [],");
document.writeln("		truncate = until !== undefined;");
document.writeln("");
document.writeln("	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {");
document.writeln("		if ( elem.nodeType === 1 ) {");
document.writeln("			if ( truncate && jQuery( elem ).is( until ) ) {");
document.writeln("				break;");
document.writeln("			}");
document.writeln("			matched.push( elem );");
document.writeln("		}");
document.writeln("	}");
document.writeln("	return matched;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("var siblings = function( n, elem ) {");
document.writeln("	var matched = [];");
document.writeln("");
document.writeln("	for ( ; n; n = n.nextSibling ) {");
document.writeln("		if ( n.nodeType === 1 && n !== elem ) {");
document.writeln("			matched.push( n );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return matched;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("var rneedsContext = jQuery.expr.match.needsContext;");
document.writeln("");
document.writeln("var rsingleTag = ( /^<([\/\/w-]+)\/\/s*\/\//?>(?:<\/\//\/\/1>|)$/ );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var risSimple = /^.[^:#\/\/[\/\/.,]*$/;");
document.writeln("");
document.writeln("// Implement the identical functionality for filter and not");
document.writeln("function winnow( elements, qualifier, not ) {");
document.writeln("	if ( jQuery.isFunction( qualifier ) ) {");
document.writeln("		return jQuery.grep( elements, function( elem, i ) {");
document.writeln("			/* jshint -W018 */");
document.writeln("			return !!qualifier.call( elem, i, elem ) !== not;");
document.writeln("		} );");
document.writeln("");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( qualifier.nodeType ) {");
document.writeln("		return jQuery.grep( elements, function( elem ) {");
document.writeln("			return ( elem === qualifier ) !== not;");
document.writeln("		} );");
document.writeln("");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( typeof qualifier === \'string\' ) {");
document.writeln("		if ( risSimple.test( qualifier ) ) {");
document.writeln("			return jQuery.filter( qualifier, elements, not );");
document.writeln("		}");
document.writeln("");
document.writeln("		qualifier = jQuery.filter( qualifier, elements );");
document.writeln("	}");
document.writeln("");
document.writeln("	return jQuery.grep( elements, function( elem ) {");
document.writeln("		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.filter = function( expr, elems, not ) {");
document.writeln("	var elem = elems[ 0 ];");
document.writeln("");
document.writeln("	if ( not ) {");
document.writeln("		expr = \':not(\' + expr + \')\';");
document.writeln("	}");
document.writeln("");
document.writeln("	return elems.length === 1 && elem.nodeType === 1 ?");
document.writeln("		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :");
document.writeln("		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {");
document.writeln("			return elem.nodeType === 1;");
document.writeln("		} ) );");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	find: function( selector ) {");
document.writeln("		var i,");
document.writeln("			ret = [],");
document.writeln("			self = this,");
document.writeln("			len = self.length;");
document.writeln("");
document.writeln("		if ( typeof selector !== \'string\' ) {");
document.writeln("			return this.pushStack( jQuery( selector ).filter( function() {");
document.writeln("				for ( i = 0; i < len; i++ ) {");
document.writeln("					if ( jQuery.contains( self[ i ], this ) ) {");
document.writeln("						return true;");
document.writeln("					}");
document.writeln("				}");
document.writeln("			} ) );");
document.writeln("		}");
document.writeln("");
document.writeln("		for ( i = 0; i < len; i++ ) {");
document.writeln("			jQuery.find( selector, self[ i ], ret );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Needed because $( selector, context ) becomes $( context ).find( selector )");
document.writeln("		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );");
document.writeln("		ret.selector = this.selector ? this.selector + \' \' + selector : selector;");
document.writeln("		return ret;");
document.writeln("	},");
document.writeln("	filter: function( selector ) {");
document.writeln("		return this.pushStack( winnow( this, selector || [], false ) );");
document.writeln("	},");
document.writeln("	not: function( selector ) {");
document.writeln("		return this.pushStack( winnow( this, selector || [], true ) );");
document.writeln("	},");
document.writeln("	is: function( selector ) {");
document.writeln("		return !!winnow(");
document.writeln("			this,");
document.writeln("");
document.writeln("			// If this is a positional/relative selector, check membership in the returned set");
document.writeln("			// so $(\'p:first\').is(\'p:last\') won\'t return true for a doc with two \'p\'.");
document.writeln("			typeof selector === \'string\' && rneedsContext.test( selector ) ?");
document.writeln("				jQuery( selector ) :");
document.writeln("				selector || [],");
document.writeln("			false");
document.writeln("		).length;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("// Initialize a jQuery object");
document.writeln("");
document.writeln("");
document.writeln("// A central reference to the root jQuery(document)");
document.writeln("var rootjQuery,");
document.writeln("");
document.writeln("	// A simple way to check for HTML strings");
document.writeln("	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)");
document.writeln("	// Strict HTML recognition (#11290: must start with <)");
document.writeln("	rquickExpr = /^(?:\/\/s*(<[\/\/w\/\/W]+>)[^>]*|#([\/\/w-]*))$/,");
document.writeln("");
document.writeln("	init = jQuery.fn.init = function( selector, context, root ) {");
document.writeln("		var match, elem;");
document.writeln("");
document.writeln("		// HANDLE: $(\'\'), $(null), $(undefined), $(false)");
document.writeln("		if ( !selector ) {");
document.writeln("			return this;");
document.writeln("		}");
document.writeln("");
document.writeln("		// init accepts an alternate rootjQuery");
document.writeln("		// so migrate can support jQuery.sub (gh-2101)");
document.writeln("		root = root || rootjQuery;");
document.writeln("");
document.writeln("		// Handle HTML strings");
document.writeln("		if ( typeof selector === \'string\' ) {");
document.writeln("			if ( selector.charAt( 0 ) === \'<\' &&");
document.writeln("				selector.charAt( selector.length - 1 ) === \'>\' &&");
document.writeln("				selector.length >= 3 ) {");
document.writeln("");
document.writeln("				// Assume that strings that start and end with <> are HTML and skip the regex check");
document.writeln("				match = [ null, selector, null ];");
document.writeln("");
document.writeln("			} else {");
document.writeln("				match = rquickExpr.exec( selector );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Match html or make sure no context is specified for #id");
document.writeln("			if ( match && ( match[ 1 ] || !context ) ) {");
document.writeln("");
document.writeln("				// HANDLE: $(html) -> $(array)");
document.writeln("				if ( match[ 1 ] ) {");
document.writeln("					context = context instanceof jQuery ? context[ 0 ] : context;");
document.writeln("");
document.writeln("					// scripts is true for back-compat");
document.writeln("					// Intentionally let the error be thrown if parseHTML is not present");
document.writeln("					jQuery.merge( this, jQuery.parseHTML(");
document.writeln("						match[ 1 ],");
document.writeln("						context && context.nodeType ? context.ownerDocument || context : document,");
document.writeln("						true");
document.writeln("					) );");
document.writeln("");
document.writeln("					// HANDLE: $(html, props)");
document.writeln("					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {");
document.writeln("						for ( match in context ) {");
document.writeln("");
document.writeln("							// Properties of context are called as methods if possible");
document.writeln("							if ( jQuery.isFunction( this[ match ] ) ) {");
document.writeln("								this[ match ]( context[ match ] );");
document.writeln("");
document.writeln("							// ...and otherwise set as attributes");
document.writeln("							} else {");
document.writeln("								this.attr( match, context[ match ] );");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					return this;");
document.writeln("");
document.writeln("				// HANDLE: $(#id)");
document.writeln("				} else {");
document.writeln("					elem = document.getElementById( match[ 2 ] );");
document.writeln("");
document.writeln("					// Check parentNode to catch when Blackberry 4.6 returns");
document.writeln("					// nodes that are no longer in the document #6963");
document.writeln("					if ( elem && elem.parentNode ) {");
document.writeln("");
document.writeln("						// Handle the case where IE and Opera return items");
document.writeln("						// by name instead of ID");
document.writeln("						if ( elem.id !== match[ 2 ] ) {");
document.writeln("							return rootjQuery.find( selector );");
document.writeln("						}");
document.writeln("");
document.writeln("						// Otherwise, we inject the element directly into the jQuery object");
document.writeln("						this.length = 1;");
document.writeln("						this[ 0 ] = elem;");
document.writeln("					}");
document.writeln("");
document.writeln("					this.context = document;");
document.writeln("					this.selector = selector;");
document.writeln("					return this;");
document.writeln("				}");
document.writeln("");
document.writeln("			// HANDLE: $(expr, $(...))");
document.writeln("			} else if ( !context || context.jquery ) {");
document.writeln("				return ( context || root ).find( selector );");
document.writeln("");
document.writeln("			// HANDLE: $(expr, context)");
document.writeln("			// (which is just equivalent to: $(context).find(expr)");
document.writeln("			} else {");
document.writeln("				return this.constructor( context ).find( selector );");
document.writeln("			}");
document.writeln("");
document.writeln("		// HANDLE: $(DOMElement)");
document.writeln("		} else if ( selector.nodeType ) {");
document.writeln("			this.context = this[ 0 ] = selector;");
document.writeln("			this.length = 1;");
document.writeln("			return this;");
document.writeln("");
document.writeln("		// HANDLE: $(function)");
document.writeln("		// Shortcut for document ready");
document.writeln("		} else if ( jQuery.isFunction( selector ) ) {");
document.writeln("			return typeof root.ready !== \'undefined\' ?");
document.writeln("				root.ready( selector ) :");
document.writeln("");
document.writeln("				// Execute immediately if ready is not present");
document.writeln("				selector( jQuery );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( selector.selector !== undefined ) {");
document.writeln("			this.selector = selector.selector;");
document.writeln("			this.context = selector.context;");
document.writeln("		}");
document.writeln("");
document.writeln("		return jQuery.makeArray( selector, this );");
document.writeln("	};");
document.writeln("");
document.writeln("// Give the init function the jQuery prototype for later instantiation");
document.writeln("init.prototype = jQuery.fn;");
document.writeln("");
document.writeln("// Initialize central reference");
document.writeln("rootjQuery = jQuery( document );");
document.writeln("");
document.writeln("");
document.writeln("var rparentsprev = /^(?:parents|prev(?:Until|All))/,");
document.writeln("");
document.writeln("	// methods guaranteed to produce a unique set when starting from a unique set");
document.writeln("	guaranteedUnique = {");
document.writeln("		children: true,");
document.writeln("		contents: true,");
document.writeln("		next: true,");
document.writeln("		prev: true");
document.writeln("	};");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	has: function( target ) {");
document.writeln("		var i,");
document.writeln("			targets = jQuery( target, this ),");
document.writeln("			len = targets.length;");
document.writeln("");
document.writeln("		return this.filter( function() {");
document.writeln("			for ( i = 0; i < len; i++ ) {");
document.writeln("				if ( jQuery.contains( this, targets[ i ] ) ) {");
document.writeln("					return true;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	closest: function( selectors, context ) {");
document.writeln("		var cur,");
document.writeln("			i = 0,");
document.writeln("			l = this.length,");
document.writeln("			matched = [],");
document.writeln("			pos = rneedsContext.test( selectors ) || typeof selectors !== \'string\' ?");
document.writeln("				jQuery( selectors, context || this.context ) :");
document.writeln("				0;");
document.writeln("");
document.writeln("		for ( ; i < l; i++ ) {");
document.writeln("			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {");
document.writeln("");
document.writeln("				// Always skip document fragments");
document.writeln("				if ( cur.nodeType < 11 && ( pos ?");
document.writeln("					pos.index( cur ) > -1 :");
document.writeln("");
document.writeln("					// Don\'t pass non-elements to Sizzle");
document.writeln("					cur.nodeType === 1 &&");
document.writeln("						jQuery.find.matchesSelector( cur, selectors ) ) ) {");
document.writeln("");
document.writeln("					matched.push( cur );");
document.writeln("					break;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Determine the position of an element within");
document.writeln("	// the matched set of elements");
document.writeln("	index: function( elem ) {");
document.writeln("");
document.writeln("		// No argument, return index in parent");
document.writeln("		if ( !elem ) {");
document.writeln("			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;");
document.writeln("		}");
document.writeln("");
document.writeln("		// index in selector");
document.writeln("		if ( typeof elem === \'string\' ) {");
document.writeln("			return jQuery.inArray( this[ 0 ], jQuery( elem ) );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Locate the position of the desired element");
document.writeln("		return jQuery.inArray(");
document.writeln("");
document.writeln("			// If it receives a jQuery object, the first element is used");
document.writeln("			elem.jquery ? elem[ 0 ] : elem, this );");
document.writeln("	},");
document.writeln("");
document.writeln("	add: function( selector, context ) {");
document.writeln("		return this.pushStack(");
document.writeln("			jQuery.uniqueSort(");
document.writeln("				jQuery.merge( this.get(), jQuery( selector, context ) )");
document.writeln("			)");
document.writeln("		);");
document.writeln("	},");
document.writeln("");
document.writeln("	addBack: function( selector ) {");
document.writeln("		return this.add( selector == null ?");
document.writeln("			this.prevObject : this.prevObject.filter( selector )");
document.writeln("		);");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("function sibling( cur, dir ) {");
document.writeln("	do {");
document.writeln("		cur = cur[ dir ];");
document.writeln("	} while ( cur && cur.nodeType !== 1 );");
document.writeln("");
document.writeln("	return cur;");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.each( {");
document.writeln("	parent: function( elem ) {");
document.writeln("		var parent = elem.parentNode;");
document.writeln("		return parent && parent.nodeType !== 11 ? parent : null;");
document.writeln("	},");
document.writeln("	parents: function( elem ) {");
document.writeln("		return dir( elem, \'parentNode\' );");
document.writeln("	},");
document.writeln("	parentsUntil: function( elem, i, until ) {");
document.writeln("		return dir( elem, \'parentNode\', until );");
document.writeln("	},");
document.writeln("	next: function( elem ) {");
document.writeln("		return sibling( elem, \'nextSibling\' );");
document.writeln("	},");
document.writeln("	prev: function( elem ) {");
document.writeln("		return sibling( elem, \'previousSibling\' );");
document.writeln("	},");
document.writeln("	nextAll: function( elem ) {");
document.writeln("		return dir( elem, \'nextSibling\' );");
document.writeln("	},");
document.writeln("	prevAll: function( elem ) {");
document.writeln("		return dir( elem, \'previousSibling\' );");
document.writeln("	},");
document.writeln("	nextUntil: function( elem, i, until ) {");
document.writeln("		return dir( elem, \'nextSibling\', until );");
document.writeln("	},");
document.writeln("	prevUntil: function( elem, i, until ) {");
document.writeln("		return dir( elem, \'previousSibling\', until );");
document.writeln("	},");
document.writeln("	siblings: function( elem ) {");
document.writeln("		return siblings( ( elem.parentNode || {} ).firstChild, elem );");
document.writeln("	},");
document.writeln("	children: function( elem ) {");
document.writeln("		return siblings( elem.firstChild );");
document.writeln("	},");
document.writeln("	contents: function( elem ) {");
document.writeln("		return jQuery.nodeName( elem, \'iframe\' ) ?");
document.writeln("			elem.contentDocument || elem.contentWindow.document :");
document.writeln("			jQuery.merge( [], elem.childNodes );");
document.writeln("	}");
document.writeln("}, function( name, fn ) {");
document.writeln("	jQuery.fn[ name ] = function( until, selector ) {");
document.writeln("		var ret = jQuery.map( this, fn, until );");
document.writeln("");
document.writeln("		if ( name.slice( -5 ) !== \'Until\' ) {");
document.writeln("			selector = until;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( selector && typeof selector === \'string\' ) {");
document.writeln("			ret = jQuery.filter( selector, ret );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( this.length > 1 ) {");
document.writeln("");
document.writeln("			// Remove duplicates");
document.writeln("			if ( !guaranteedUnique[ name ] ) {");
document.writeln("				ret = jQuery.uniqueSort( ret );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Reverse order for parents* and prev-derivatives");
document.writeln("			if ( rparentsprev.test( name ) ) {");
document.writeln("				ret = ret.reverse();");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.pushStack( ret );");
document.writeln("	};");
document.writeln("} );");
document.writeln("var rnotwhite = ( /\/\/S+/g );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Convert String-formatted options into Object-formatted ones");
document.writeln("function createOptions( options ) {");
document.writeln("	var object = {};");
document.writeln("	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {");
document.writeln("		object[ flag ] = true;");
document.writeln("	} );");
document.writeln("	return object;");
document.writeln("}");
document.writeln("");
document.writeln("/*");
document.writeln(" * Create a callback list using the following parameters:");
document.writeln(" *");
document.writeln(" *	options: an optional list of space-separated options that will change how");
document.writeln(" *			the callback list behaves or a more traditional option object");
document.writeln(" *");
document.writeln(" * By default a callback list will act like an event callback list and can be");
document.writeln(" * \'fired\' multiple times.");
document.writeln(" *");
document.writeln(" * Possible options:");
document.writeln(" *");
document.writeln(" *	once:			will ensure the callback list can only be fired once (like a Deferred)");
document.writeln(" *");
document.writeln(" *	memory:			will keep track of previous values and will call any callback added");
document.writeln(" *					after the list has been fired right away with the latest \'memorized\'");
document.writeln(" *					values (like a Deferred)");
document.writeln(" *");
document.writeln(" *	unique:			will ensure a callback can only be added once (no duplicate in the list)");
document.writeln(" *");
document.writeln(" *	stopOnFalse:	interrupt callings when a callback returns false");
document.writeln(" *");
document.writeln(" */");
document.writeln("jQuery.Callbacks = function( options ) {");
document.writeln("");
document.writeln("	// Convert options from String-formatted to Object-formatted if needed");
document.writeln("	// (we check in cache first)");
document.writeln("	options = typeof options === \'string\' ?");
document.writeln("		createOptions( options ) :");
document.writeln("		jQuery.extend( {}, options );");
document.writeln("");
document.writeln("	var // Flag to know if list is currently firing");
document.writeln("		firing,");
document.writeln("");
document.writeln("		// Last fire value for non-forgettable lists");
document.writeln("		memory,");
document.writeln("");
document.writeln("		// Flag to know if list was already fired");
document.writeln("		fired,");
document.writeln("");
document.writeln("		// Flag to prevent firing");
document.writeln("		locked,");
document.writeln("");
document.writeln("		// Actual callback list");
document.writeln("		list = [],");
document.writeln("");
document.writeln("		// Queue of execution data for repeatable lists");
document.writeln("		queue = [],");
document.writeln("");
document.writeln("		// Index of currently firing callback (modified by add/remove as needed)");
document.writeln("		firingIndex = -1,");
document.writeln("");
document.writeln("		// Fire callbacks");
document.writeln("		fire = function() {");
document.writeln("");
document.writeln("			// Enforce single-firing");
document.writeln("			locked = options.once;");
document.writeln("");
document.writeln("			// Execute callbacks for all pending executions,");
document.writeln("			// respecting firingIndex overrides and runtime changes");
document.writeln("			fired = firing = true;");
document.writeln("			for ( ; queue.length; firingIndex = -1 ) {");
document.writeln("				memory = queue.shift();");
document.writeln("				while ( ++firingIndex < list.length ) {");
document.writeln("");
document.writeln("					// Run callback and check for early termination");
document.writeln("					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&");
document.writeln("						options.stopOnFalse ) {");
document.writeln("");
document.writeln("						// Jump to end and forget the data so .add doesn\'t re-fire");
document.writeln("						firingIndex = list.length;");
document.writeln("						memory = false;");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Forget the data if we\'re done with it");
document.writeln("			if ( !options.memory ) {");
document.writeln("				memory = false;");
document.writeln("			}");
document.writeln("");
document.writeln("			firing = false;");
document.writeln("");
document.writeln("			// Clean up if we\'re done firing for good");
document.writeln("			if ( locked ) {");
document.writeln("");
document.writeln("				// Keep an empty list if we have data for future add calls");
document.writeln("				if ( memory ) {");
document.writeln("					list = [];");
document.writeln("");
document.writeln("				// Otherwise, this object is spent");
document.writeln("				} else {");
document.writeln("					list = \'\';");
document.writeln("				}");
document.writeln("			}");
document.writeln("		},");
document.writeln("");
document.writeln("		// Actual Callbacks object");
document.writeln("		self = {");
document.writeln("");
document.writeln("			// Add a callback or a collection of callbacks to the list");
document.writeln("			add: function() {");
document.writeln("				if ( list ) {");
document.writeln("");
document.writeln("					// If we have memory from a past run, we should fire after adding");
document.writeln("					if ( memory && !firing ) {");
document.writeln("						firingIndex = list.length - 1;");
document.writeln("						queue.push( memory );");
document.writeln("					}");
document.writeln("");
document.writeln("					( function add( args ) {");
document.writeln("						jQuery.each( args, function( _, arg ) {");
document.writeln("							if ( jQuery.isFunction( arg ) ) {");
document.writeln("								if ( !options.unique || !self.has( arg ) ) {");
document.writeln("									list.push( arg );");
document.writeln("								}");
document.writeln("							} else if ( arg && arg.length && jQuery.type( arg ) !== \'string\' ) {");
document.writeln("");
document.writeln("								// Inspect recursively");
document.writeln("								add( arg );");
document.writeln("							}");
document.writeln("						} );");
document.writeln("					} )( arguments );");
document.writeln("");
document.writeln("					if ( memory && !firing ) {");
document.writeln("						fire();");
document.writeln("					}");
document.writeln("				}");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Remove a callback from the list");
document.writeln("			remove: function() {");
document.writeln("				jQuery.each( arguments, function( _, arg ) {");
document.writeln("					var index;");
document.writeln("					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {");
document.writeln("						list.splice( index, 1 );");
document.writeln("");
document.writeln("						// Handle firing indexes");
document.writeln("						if ( index <= firingIndex ) {");
document.writeln("							firingIndex--;");
document.writeln("						}");
document.writeln("					}");
document.writeln("				} );");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Check if a given callback is in the list.");
document.writeln("			// If no argument is given, return whether or not list has callbacks attached.");
document.writeln("			has: function( fn ) {");
document.writeln("				return fn ?");
document.writeln("					jQuery.inArray( fn, list ) > -1 :");
document.writeln("					list.length > 0;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Remove all callbacks from the list");
document.writeln("			empty: function() {");
document.writeln("				if ( list ) {");
document.writeln("					list = [];");
document.writeln("				}");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Disable .fire and .add");
document.writeln("			// Abort any current/pending executions");
document.writeln("			// Clear all callbacks and values");
document.writeln("			disable: function() {");
document.writeln("				locked = queue = [];");
document.writeln("				list = memory = \'\';");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("			disabled: function() {");
document.writeln("				return !list;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Disable .fire");
document.writeln("			// Also disable .add unless we have memory (since it would have no effect)");
document.writeln("			// Abort any pending executions");
document.writeln("			lock: function() {");
document.writeln("				locked = true;");
document.writeln("				if ( !memory ) {");
document.writeln("					self.disable();");
document.writeln("				}");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("			locked: function() {");
document.writeln("				return !!locked;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Call all callbacks with the given context and arguments");
document.writeln("			fireWith: function( context, args ) {");
document.writeln("				if ( !locked ) {");
document.writeln("					args = args || [];");
document.writeln("					args = [ context, args.slice ? args.slice() : args ];");
document.writeln("					queue.push( args );");
document.writeln("					if ( !firing ) {");
document.writeln("						fire();");
document.writeln("					}");
document.writeln("				}");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("");
document.writeln("			// Call all the callbacks with the given arguments");
document.writeln("			fire: function() {");
document.writeln("				self.fireWith( this, arguments );");
document.writeln("				return this;");
document.writeln("			},");
document.writeln("");
document.writeln("			// To know if the callbacks have already been called at least once");
document.writeln("			fired: function() {");
document.writeln("				return !!fired;");
document.writeln("			}");
document.writeln("		};");
document.writeln("");
document.writeln("	return self;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("");
document.writeln("	Deferred: function( func ) {");
document.writeln("		var tuples = [");
document.writeln("");
document.writeln("				// action, add listener, listener list, final state");
document.writeln("				[ \'resolve\', \'done\', jQuery.Callbacks( \'once memory\' ), \'resolved\' ],");
document.writeln("				[ \'reject\', \'fail\', jQuery.Callbacks( \'once memory\' ), \'rejected\' ],");
document.writeln("				[ \'notify\', \'progress\', jQuery.Callbacks( \'memory\' ) ]");
document.writeln("			],");
document.writeln("			state = \'pending\',");
document.writeln("			promise = {");
document.writeln("				state: function() {");
document.writeln("					return state;");
document.writeln("				},");
document.writeln("				always: function() {");
document.writeln("					deferred.done( arguments ).fail( arguments );");
document.writeln("					return this;");
document.writeln("				},");
document.writeln("				then: function( /* fnDone, fnFail, fnProgress */ ) {");
document.writeln("					var fns = arguments;");
document.writeln("					return jQuery.Deferred( function( newDefer ) {");
document.writeln("						jQuery.each( tuples, function( i, tuple ) {");
document.writeln("							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];");
document.writeln("");
document.writeln("							// deferred[ done | fail | progress ] for forwarding actions to newDefer");
document.writeln("							deferred[ tuple[ 1 ] ]( function() {");
document.writeln("								var returned = fn && fn.apply( this, arguments );");
document.writeln("								if ( returned && jQuery.isFunction( returned.promise ) ) {");
document.writeln("									returned.promise()");
document.writeln("										.progress( newDefer.notify )");
document.writeln("										.done( newDefer.resolve )");
document.writeln("										.fail( newDefer.reject );");
document.writeln("								} else {");
document.writeln("									newDefer[ tuple[ 0 ] + \'With\' ](");
document.writeln("										this === promise ? newDefer.promise() : this,");
document.writeln("										fn ? [ returned ] : arguments");
document.writeln("									);");
document.writeln("								}");
document.writeln("							} );");
document.writeln("						} );");
document.writeln("						fns = null;");
document.writeln("					} ).promise();");
document.writeln("				},");
document.writeln("");
document.writeln("				// Get a promise for this deferred");
document.writeln("				// If obj is provided, the promise aspect is added to the object");
document.writeln("				promise: function( obj ) {");
document.writeln("					return obj != null ? jQuery.extend( obj, promise ) : promise;");
document.writeln("				}");
document.writeln("			},");
document.writeln("			deferred = {};");
document.writeln("");
document.writeln("		// Keep pipe for back-compat");
document.writeln("		promise.pipe = promise.then;");
document.writeln("");
document.writeln("		// Add list-specific methods");
document.writeln("		jQuery.each( tuples, function( i, tuple ) {");
document.writeln("			var list = tuple[ 2 ],");
document.writeln("				stateString = tuple[ 3 ];");
document.writeln("");
document.writeln("			// promise[ done | fail | progress ] = list.add");
document.writeln("			promise[ tuple[ 1 ] ] = list.add;");
document.writeln("");
document.writeln("			// Handle state");
document.writeln("			if ( stateString ) {");
document.writeln("				list.add( function() {");
document.writeln("");
document.writeln("					// state = [ resolved | rejected ]");
document.writeln("					state = stateString;");
document.writeln("");
document.writeln("				// [ reject_list | resolve_list ].disable; progress_list.lock");
document.writeln("				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );");
document.writeln("			}");
document.writeln("");
document.writeln("			// deferred[ resolve | reject | notify ]");
document.writeln("			deferred[ tuple[ 0 ] ] = function() {");
document.writeln("				deferred[ tuple[ 0 ] + \'With\' ]( this === deferred ? promise : this, arguments );");
document.writeln("				return this;");
document.writeln("			};");
document.writeln("			deferred[ tuple[ 0 ] + \'With\' ] = list.fireWith;");
document.writeln("		} );");
document.writeln("");
document.writeln("		// Make the deferred a promise");
document.writeln("		promise.promise( deferred );");
document.writeln("");
document.writeln("		// Call given func if any");
document.writeln("		if ( func ) {");
document.writeln("			func.call( deferred, deferred );");
document.writeln("		}");
document.writeln("");
document.writeln("		// All done!");
document.writeln("		return deferred;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Deferred helper");
document.writeln("	when: function( subordinate /* , ..., subordinateN */ ) {");
document.writeln("		var i = 0,");
document.writeln("			resolveValues = slice.call( arguments ),");
document.writeln("			length = resolveValues.length,");
document.writeln("");
document.writeln("			// the count of uncompleted subordinates");
document.writeln("			remaining = length !== 1 ||");
document.writeln("				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,");
document.writeln("");
document.writeln("			// the master Deferred.");
document.writeln("			// If resolveValues consist of only a single Deferred, just use that.");
document.writeln("			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),");
document.writeln("");
document.writeln("			// Update function for both resolve and progress values");
document.writeln("			updateFunc = function( i, contexts, values ) {");
document.writeln("				return function( value ) {");
document.writeln("					contexts[ i ] = this;");
document.writeln("					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;");
document.writeln("					if ( values === progressValues ) {");
document.writeln("						deferred.notifyWith( contexts, values );");
document.writeln("");
document.writeln("					} else if ( !( --remaining ) ) {");
document.writeln("						deferred.resolveWith( contexts, values );");
document.writeln("					}");
document.writeln("				};");
document.writeln("			},");
document.writeln("");
document.writeln("			progressValues, progressContexts, resolveContexts;");
document.writeln("");
document.writeln("		// add listeners to Deferred subordinates; treat others as resolved");
document.writeln("		if ( length > 1 ) {");
document.writeln("			progressValues = new Array( length );");
document.writeln("			progressContexts = new Array( length );");
document.writeln("			resolveContexts = new Array( length );");
document.writeln("			for ( ; i < length; i++ ) {");
document.writeln("				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {");
document.writeln("					resolveValues[ i ].promise()");
document.writeln("						.progress( updateFunc( i, progressContexts, progressValues ) )");
document.writeln("						.done( updateFunc( i, resolveContexts, resolveValues ) )");
document.writeln("						.fail( deferred.reject );");
document.writeln("				} else {");
document.writeln("					--remaining;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// if we\'re not waiting on anything, resolve the master");
document.writeln("		if ( !remaining ) {");
document.writeln("			deferred.resolveWith( resolveContexts, resolveValues );");
document.writeln("		}");
document.writeln("");
document.writeln("		return deferred.promise();");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("// The deferred used on DOM ready");
document.writeln("var readyList;");
document.writeln("");
document.writeln("jQuery.fn.ready = function( fn ) {");
document.writeln("");
document.writeln("	// Add the callback");
document.writeln("	jQuery.ready.promise().done( fn );");
document.writeln("");
document.writeln("	return this;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("");
document.writeln("	// Is the DOM ready to be used? Set to true once it occurs.");
document.writeln("	isReady: false,");
document.writeln("");
document.writeln("	// A counter to track how many items to wait for before");
document.writeln("	// the ready event fires. See #6781");
document.writeln("	readyWait: 1,");
document.writeln("");
document.writeln("	// Hold (or release) the ready event");
document.writeln("	holdReady: function( hold ) {");
document.writeln("		if ( hold ) {");
document.writeln("			jQuery.readyWait++;");
document.writeln("		} else {");
document.writeln("			jQuery.ready( true );");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// Handle when the DOM is ready");
document.writeln("	ready: function( wait ) {");
document.writeln("");
document.writeln("		// Abort if there are pending holds or we\'re already ready");
document.writeln("		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Remember that the DOM is ready");
document.writeln("		jQuery.isReady = true;");
document.writeln("");
document.writeln("		// If a normal DOM Ready event fired, decrement, and wait if need be");
document.writeln("		if ( wait !== true && --jQuery.readyWait > 0 ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// If there are functions bound, to execute");
document.writeln("		readyList.resolveWith( document, [ jQuery ] );");
document.writeln("");
document.writeln("		// Trigger any bound ready events");
document.writeln("		if ( jQuery.fn.triggerHandler ) {");
document.writeln("			jQuery( document ).triggerHandler( \'ready\' );");
document.writeln("			jQuery( document ).off( \'ready\' );");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("/**");
document.writeln(" * Clean-up method for dom ready events");
document.writeln(" */");
document.writeln("function detach() {");
document.writeln("	if ( document.addEventListener ) {");
document.writeln("		document.removeEventListener( \'DOMContentLoaded\', completed );");
document.writeln("		window.removeEventListener( \'load\', completed );");
document.writeln("");
document.writeln("	} else {");
document.writeln("		document.detachEvent( \'onreadystatechange\', completed );");
document.writeln("		window.detachEvent( \'onload\', completed );");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * The ready event handler and self cleanup method");
document.writeln(" */");
document.writeln("function completed() {");
document.writeln("");
document.writeln("	// readyState === \'complete\' is good enough for us to call the dom ready in oldIE");
document.writeln("	if ( document.addEventListener ||");
document.writeln("		window.event.type === \'load\' ||");
document.writeln("		document.readyState === \'complete\' ) {");
document.writeln("");
document.writeln("		detach();");
document.writeln("		jQuery.ready();");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.ready.promise = function( obj ) {");
document.writeln("	if ( !readyList ) {");
document.writeln("");
document.writeln("		readyList = jQuery.Deferred();");
document.writeln("");
document.writeln("		// Catch cases where $(document).ready() is called");
document.writeln("		// after the browser event has already occurred.");
document.writeln("		// Support: IE6-10");
document.writeln("		// Older IE sometimes signals \'interactive\' too soon");
document.writeln("		if ( document.readyState === \'complete\' ||");
document.writeln("			( document.readyState !== \'loading\' && !document.documentElement.doScroll ) ) {");
document.writeln("");
document.writeln("			// Handle it asynchronously to allow scripts the opportunity to delay ready");
document.writeln("			window.setTimeout( jQuery.ready );");
document.writeln("");
document.writeln("		// Standards-based browsers support DOMContentLoaded");
document.writeln("		} else if ( document.addEventListener ) {");
document.writeln("");
document.writeln("			// Use the handy event callback");
document.writeln("			document.addEventListener( \'DOMContentLoaded\', completed );");
document.writeln("");
document.writeln("			// A fallback to window.onload, that will always work");
document.writeln("			window.addEventListener( \'load\', completed );");
document.writeln("");
document.writeln("		// If IE event model is used");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// Ensure firing before onload, maybe late but safe also for iframes");
document.writeln("			document.attachEvent( \'onreadystatechange\', completed );");
document.writeln("");
document.writeln("			// A fallback to window.onload, that will always work");
document.writeln("			window.attachEvent( \'onload\', completed );");
document.writeln("");
document.writeln("			// If IE and not a frame");
document.writeln("			// continually check to see if the document is ready");
document.writeln("			var top = false;");
document.writeln("");
document.writeln("			try {");
document.writeln("				top = window.frameElement == null && document.documentElement;");
document.writeln("			} catch ( e ) {}");
document.writeln("");
document.writeln("			if ( top && top.doScroll ) {");
document.writeln("				( function doScrollCheck() {");
document.writeln("					if ( !jQuery.isReady ) {");
document.writeln("");
document.writeln("						try {");
document.writeln("");
document.writeln("							// Use the trick by Diego Perini");
document.writeln("							// http://javascript.nwbox.com/IEContentLoaded/");
document.writeln("							top.doScroll( \'left\' );");
document.writeln("						} catch ( e ) {");
document.writeln("							return window.setTimeout( doScrollCheck, 50 );");
document.writeln("						}");
document.writeln("");
document.writeln("						// detach all dom ready events");
document.writeln("						detach();");
document.writeln("");
document.writeln("						// and execute any waiting functions");
document.writeln("						jQuery.ready();");
document.writeln("					}");
document.writeln("				} )();");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("	return readyList.promise( obj );");
document.writeln("};");
document.writeln("");
document.writeln("// Kick off the DOM ready check even if the user does not");
document.writeln("jQuery.ready.promise();");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Support: IE<9");
document.writeln("// Iteration over object\'s inherited properties before its own");
document.writeln("var i;");
document.writeln("for ( i in jQuery( support ) ) {");
document.writeln("	break;");
document.writeln("}");
document.writeln("support.ownFirst = i === \'0\';");
document.writeln("");
document.writeln("// Note: most support tests are defined in their respective modules.");
document.writeln("// false until the test is run");
document.writeln("support.inlineBlockNeedsLayout = false;");
document.writeln("");
document.writeln("// Execute ASAP in case we need to set body.style.zoom");
document.writeln("jQuery( function() {");
document.writeln("");
document.writeln("	// Minified: var a,b,c,d");
document.writeln("	var val, div, body, container;");
document.writeln("");
document.writeln("	body = document.getElementsByTagName( \'body\' )[ 0 ];");
document.writeln("	if ( !body || !body.style ) {");
document.writeln("");
document.writeln("		// Return for frameset docs that don\'t have a body");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Setup");
document.writeln("	div = document.createElement( \'div\' );");
document.writeln("	container = document.createElement( \'div\' );");
document.writeln("	container.style.cssText = \'position:absolute;border:0;width:0;height:0;top:0;left:-9999px\';");
document.writeln("	body.appendChild( container ).appendChild( div );");
document.writeln("");
document.writeln("	if ( typeof div.style.zoom !== \'undefined\' ) {");
document.writeln("");
document.writeln("		// Support: IE<8");
document.writeln("		// Check if natively block-level elements act like inline-block");
document.writeln("		// elements when setting their display to \'inline\' and giving");
document.writeln("		// them layout");
document.writeln("		div.style.cssText = \'display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\';");
document.writeln("");
document.writeln("		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;");
document.writeln("		if ( val ) {");
document.writeln("");
document.writeln("			// Prevent IE 6 from affecting layout for positioned elements #11048");
document.writeln("			// Prevent IE from shrinking the body in IE 7 mode #12869");
document.writeln("			// Support: IE<8");
document.writeln("			body.style.zoom = 1;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	body.removeChild( container );");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var div = document.createElement( \'div\' );");
document.writeln("");
document.writeln("	// Support: IE<9");
document.writeln("	support.deleteExpando = true;");
document.writeln("	try {");
document.writeln("		delete div.test;");
document.writeln("	} catch ( e ) {");
document.writeln("		support.deleteExpando = false;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Null elements to avoid leaks in IE.");
document.writeln("	div = null;");
document.writeln("} )();");
document.writeln("var acceptData = function( elem ) {");
document.writeln("	var noData = jQuery.noData[ ( elem.nodeName + \' \' ).toLowerCase() ],");
document.writeln("		nodeType = +elem.nodeType || 1;");
document.writeln("");
document.writeln("	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).");
document.writeln("	return nodeType !== 1 && nodeType !== 9 ?");
document.writeln("		false :");
document.writeln("");
document.writeln("		// Nodes accept data unless otherwise specified; rejection can be conditional");
document.writeln("		!noData || noData !== true && elem.getAttribute( \'classid\' ) === noData;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var rbrace = /^(?:\/\/{[\/\/w\/\/W]*\/\/}|\/\/[[\/\/w\/\/W]*\/\/])$/,");
document.writeln("	rmultiDash = /([A-Z])/g;");
document.writeln("");
document.writeln("function dataAttr( elem, key, data ) {");
document.writeln("");
document.writeln("	// If nothing was found internally, try to fetch any");
document.writeln("	// data from the HTML5 data-* attribute");
document.writeln("	if ( data === undefined && elem.nodeType === 1 ) {");
document.writeln("");
document.writeln("		var name = \'data-\' + key.replace( rmultiDash, \'-$1\' ).toLowerCase();");
document.writeln("");
document.writeln("		data = elem.getAttribute( name );");
document.writeln("");
document.writeln("		if ( typeof data === \'string\' ) {");
document.writeln("			try {");
document.writeln("				data = data === \'true\' ? true :");
document.writeln("					data === \'false\' ? false :");
document.writeln("					data === \'null\' ? null :");
document.writeln("");
document.writeln("					// Only convert to a number if it doesn\'t change the string");
document.writeln("					+data + \'\' === data ? +data :");
document.writeln("					rbrace.test( data ) ? jQuery.parseJSON( data ) :");
document.writeln("					data;");
document.writeln("			} catch ( e ) {}");
document.writeln("");
document.writeln("			// Make sure we set the data so it isn\'t changed later");
document.writeln("			jQuery.data( elem, key, data );");
document.writeln("");
document.writeln("		} else {");
document.writeln("			data = undefined;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return data;");
document.writeln("}");
document.writeln("");
document.writeln("// checks a cache object for emptiness");
document.writeln("function isEmptyDataObject( obj ) {");
document.writeln("	var name;");
document.writeln("	for ( name in obj ) {");
document.writeln("");
document.writeln("		// if the public data object is empty, the private is still empty");
document.writeln("		if ( name === \'data\' && jQuery.isEmptyObject( obj[ name ] ) ) {");
document.writeln("			continue;");
document.writeln("		}");
document.writeln("		if ( name !== \'toJSON\' ) {");
document.writeln("			return false;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return true;");
document.writeln("}");
document.writeln("");
document.writeln("function internalData( elem, name, data, pvt /* Internal Use Only */ ) {");
document.writeln("	if ( !acceptData( elem ) ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	var ret, thisCache,");
document.writeln("		internalKey = jQuery.expando,");
document.writeln("");
document.writeln("		// We have to handle DOM nodes and JS objects differently because IE6-7");
document.writeln("		// can\'t GC object references properly across the DOM-JS boundary");
document.writeln("		isNode = elem.nodeType,");
document.writeln("");
document.writeln("		// Only DOM nodes need the global jQuery cache; JS object data is");
document.writeln("		// attached directly to the object so GC can occur automatically");
document.writeln("		cache = isNode ? jQuery.cache : elem,");
document.writeln("");
document.writeln("		// Only defining an ID for JS objects if its cache already exists allows");
document.writeln("		// the code to shortcut on the same path as a DOM node with no cache");
document.writeln("		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;");
document.writeln("");
document.writeln("	// Avoid doing any more work than we need to when trying to get data on an");
document.writeln("	// object that has no data at all");
document.writeln("	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&");
document.writeln("		data === undefined && typeof name === \'string\' ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( !id ) {");
document.writeln("");
document.writeln("		// Only DOM nodes need a new unique ID for each element since their data");
document.writeln("		// ends up in the global cache");
document.writeln("		if ( isNode ) {");
document.writeln("			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;");
document.writeln("		} else {");
document.writeln("			id = internalKey;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( !cache[ id ] ) {");
document.writeln("");
document.writeln("		// Avoid exposing jQuery metadata on plain JS objects when the object");
document.writeln("		// is serialized using JSON.stringify");
document.writeln("		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };");
document.writeln("	}");
document.writeln("");
document.writeln("	// An object can be passed to jQuery.data instead of a key/value pair; this gets");
document.writeln("	// shallow copied over onto the existing cache");
document.writeln("	if ( typeof name === \'object\' || typeof name === \'function\' ) {");
document.writeln("		if ( pvt ) {");
document.writeln("			cache[ id ] = jQuery.extend( cache[ id ], name );");
document.writeln("		} else {");
document.writeln("			cache[ id ].data = jQuery.extend( cache[ id ].data, name );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	thisCache = cache[ id ];");
document.writeln("");
document.writeln("	// jQuery data() is stored in a separate object inside the object\'s internal data");
document.writeln("	// cache in order to avoid key collisions between internal data and user-defined");
document.writeln("	// data.");
document.writeln("	if ( !pvt ) {");
document.writeln("		if ( !thisCache.data ) {");
document.writeln("			thisCache.data = {};");
document.writeln("		}");
document.writeln("");
document.writeln("		thisCache = thisCache.data;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( data !== undefined ) {");
document.writeln("		thisCache[ jQuery.camelCase( name ) ] = data;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Check for both converted-to-camel and non-converted data property names");
document.writeln("	// If a data property was specified");
document.writeln("	if ( typeof name === \'string\' ) {");
document.writeln("");
document.writeln("		// First Try to find as-is property data");
document.writeln("		ret = thisCache[ name ];");
document.writeln("");
document.writeln("		// Test for null|undefined property data");
document.writeln("		if ( ret == null ) {");
document.writeln("");
document.writeln("			// Try to find the camelCased property");
document.writeln("			ret = thisCache[ jQuery.camelCase( name ) ];");
document.writeln("		}");
document.writeln("	} else {");
document.writeln("		ret = thisCache;");
document.writeln("	}");
document.writeln("");
document.writeln("	return ret;");
document.writeln("}");
document.writeln("");
document.writeln("function internalRemoveData( elem, name, pvt ) {");
document.writeln("	if ( !acceptData( elem ) ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	var thisCache, i,");
document.writeln("		isNode = elem.nodeType,");
document.writeln("");
document.writeln("		// See jQuery.data for more information");
document.writeln("		cache = isNode ? jQuery.cache : elem,");
document.writeln("		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;");
document.writeln("");
document.writeln("	// If there is already no cache entry for this object, there is no");
document.writeln("	// purpose in continuing");
document.writeln("	if ( !cache[ id ] ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( name ) {");
document.writeln("");
document.writeln("		thisCache = pvt ? cache[ id ] : cache[ id ].data;");
document.writeln("");
document.writeln("		if ( thisCache ) {");
document.writeln("");
document.writeln("			// Support array or space separated string names for data keys");
document.writeln("			if ( !jQuery.isArray( name ) ) {");
document.writeln("");
document.writeln("				// try the string as a key before any manipulation");
document.writeln("				if ( name in thisCache ) {");
document.writeln("					name = [ name ];");
document.writeln("				} else {");
document.writeln("");
document.writeln("					// split the camel cased version by spaces unless a key with the spaces exists");
document.writeln("					name = jQuery.camelCase( name );");
document.writeln("					if ( name in thisCache ) {");
document.writeln("						name = [ name ];");
document.writeln("					} else {");
document.writeln("						name = name.split( \' \' );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			} else {");
document.writeln("");
document.writeln("				// If \'name\' is an array of keys...");
document.writeln("				// When data is initially created, via (\'key\', \'val\') signature,");
document.writeln("				// keys will be converted to camelCase.");
document.writeln("				// Since there is no way to tell _how_ a key was added, remove");
document.writeln("				// both plain key and camelCase key. #12786");
document.writeln("				// This will only penalize the array argument path.");
document.writeln("				name = name.concat( jQuery.map( name, jQuery.camelCase ) );");
document.writeln("			}");
document.writeln("");
document.writeln("			i = name.length;");
document.writeln("			while ( i-- ) {");
document.writeln("				delete thisCache[ name[ i ] ];");
document.writeln("			}");
document.writeln("");
document.writeln("			// If there is no data left in the cache, we want to continue");
document.writeln("			// and let the cache object itself get destroyed");
document.writeln("			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {");
document.writeln("				return;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// See jQuery.data for more information");
document.writeln("	if ( !pvt ) {");
document.writeln("		delete cache[ id ].data;");
document.writeln("");
document.writeln("		// Don\'t destroy the parent cache unless the internal data object");
document.writeln("		// had been the only thing left in it");
document.writeln("		if ( !isEmptyDataObject( cache[ id ] ) ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Destroy the cache");
document.writeln("	if ( isNode ) {");
document.writeln("		jQuery.cleanData( [ elem ], true );");
document.writeln("");
document.writeln("	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)");
document.writeln("	/* jshint eqeqeq: false */");
document.writeln("	} else if ( support.deleteExpando || cache != cache.window ) {");
document.writeln("		/* jshint eqeqeq: true */");
document.writeln("		delete cache[ id ];");
document.writeln("");
document.writeln("	// When all else fails, undefined");
document.writeln("	} else {");
document.writeln("		cache[ id ] = undefined;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	cache: {},");
document.writeln("");
document.writeln("	// The following elements (space-suffixed to avoid Object.prototype collisions)");
document.writeln("	// throw uncatchable exceptions if you attempt to set expando properties");
document.writeln("	noData: {");
document.writeln("		\'applet \': true,");
document.writeln("		\'embed \': true,");
document.writeln("");
document.writeln("		// ...but Flash objects (which have this classid) *can* handle expandos");
document.writeln("		\'object \': \'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\'");
document.writeln("	},");
document.writeln("");
document.writeln("	hasData: function( elem ) {");
document.writeln("		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];");
document.writeln("		return !!elem && !isEmptyDataObject( elem );");
document.writeln("	},");
document.writeln("");
document.writeln("	data: function( elem, name, data ) {");
document.writeln("		return internalData( elem, name, data );");
document.writeln("	},");
document.writeln("");
document.writeln("	removeData: function( elem, name ) {");
document.writeln("		return internalRemoveData( elem, name );");
document.writeln("	},");
document.writeln("");
document.writeln("	// For internal use only.");
document.writeln("	_data: function( elem, name, data ) {");
document.writeln("		return internalData( elem, name, data, true );");
document.writeln("	},");
document.writeln("");
document.writeln("	_removeData: function( elem, name ) {");
document.writeln("		return internalRemoveData( elem, name, true );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	data: function( key, value ) {");
document.writeln("		var i, name, data,");
document.writeln("			elem = this[ 0 ],");
document.writeln("			attrs = elem && elem.attributes;");
document.writeln("");
document.writeln("		// Special expections of .data basically thwart jQuery.access,");
document.writeln("		// so implement the relevant behavior ourselves");
document.writeln("");
document.writeln("		// Gets all values");
document.writeln("		if ( key === undefined ) {");
document.writeln("			if ( this.length ) {");
document.writeln("				data = jQuery.data( elem );");
document.writeln("");
document.writeln("				if ( elem.nodeType === 1 && !jQuery._data( elem, \'parsedAttrs\' ) ) {");
document.writeln("					i = attrs.length;");
document.writeln("					while ( i-- ) {");
document.writeln("");
document.writeln("						// Support: IE11+");
document.writeln("						// The attrs elements can be null (#14894)");
document.writeln("						if ( attrs[ i ] ) {");
document.writeln("							name = attrs[ i ].name;");
document.writeln("							if ( name.indexOf( \'data-\' ) === 0 ) {");
document.writeln("								name = jQuery.camelCase( name.slice( 5 ) );");
document.writeln("								dataAttr( elem, name, data[ name ] );");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("					jQuery._data( elem, \'parsedAttrs\', true );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			return data;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Sets multiple values");
document.writeln("		if ( typeof key === \'object\' ) {");
document.writeln("			return this.each( function() {");
document.writeln("				jQuery.data( this, key );");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		return arguments.length > 1 ?");
document.writeln("");
document.writeln("			// Sets one value");
document.writeln("			this.each( function() {");
document.writeln("				jQuery.data( this, key, value );");
document.writeln("			} ) :");
document.writeln("");
document.writeln("			// Gets one value");
document.writeln("			// Try to fetch any internally stored data first");
document.writeln("			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;");
document.writeln("	},");
document.writeln("");
document.writeln("	removeData: function( key ) {");
document.writeln("		return this.each( function() {");
document.writeln("			jQuery.removeData( this, key );");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	queue: function( elem, type, data ) {");
document.writeln("		var queue;");
document.writeln("");
document.writeln("		if ( elem ) {");
document.writeln("			type = ( type || \'fx\' ) + \'queue\';");
document.writeln("			queue = jQuery._data( elem, type );");
document.writeln("");
document.writeln("			// Speed up dequeue by getting out quickly if this is just a lookup");
document.writeln("			if ( data ) {");
document.writeln("				if ( !queue || jQuery.isArray( data ) ) {");
document.writeln("					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );");
document.writeln("				} else {");
document.writeln("					queue.push( data );");
document.writeln("				}");
document.writeln("			}");
document.writeln("			return queue || [];");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	dequeue: function( elem, type ) {");
document.writeln("		type = type || \'fx\';");
document.writeln("");
document.writeln("		var queue = jQuery.queue( elem, type ),");
document.writeln("			startLength = queue.length,");
document.writeln("			fn = queue.shift(),");
document.writeln("			hooks = jQuery._queueHooks( elem, type ),");
document.writeln("			next = function() {");
document.writeln("				jQuery.dequeue( elem, type );");
document.writeln("			};");
document.writeln("");
document.writeln("		// If the fx queue is dequeued, always remove the progress sentinel");
document.writeln("		if ( fn === \'inprogress\' ) {");
document.writeln("			fn = queue.shift();");
document.writeln("			startLength--;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( fn ) {");
document.writeln("");
document.writeln("			// Add a progress sentinel to prevent the fx queue from being");
document.writeln("			// automatically dequeued");
document.writeln("			if ( type === \'fx\' ) {");
document.writeln("				queue.unshift( \'inprogress\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// clear up the last queue stop function");
document.writeln("			delete hooks.stop;");
document.writeln("			fn.call( elem, next, hooks );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( !startLength && hooks ) {");
document.writeln("			hooks.empty.fire();");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// not intended for public consumption - generates a queueHooks object,");
document.writeln("	// or returns the current one");
document.writeln("	_queueHooks: function( elem, type ) {");
document.writeln("		var key = type + \'queueHooks\';");
document.writeln("		return jQuery._data( elem, key ) || jQuery._data( elem, key, {");
document.writeln("			empty: jQuery.Callbacks( \'once memory\' ).add( function() {");
document.writeln("				jQuery._removeData( elem, type + \'queue\' );");
document.writeln("				jQuery._removeData( elem, key );");
document.writeln("			} )");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	queue: function( type, data ) {");
document.writeln("		var setter = 2;");
document.writeln("");
document.writeln("		if ( typeof type !== \'string\' ) {");
document.writeln("			data = type;");
document.writeln("			type = \'fx\';");
document.writeln("			setter--;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( arguments.length < setter ) {");
document.writeln("			return jQuery.queue( this[ 0 ], type );");
document.writeln("		}");
document.writeln("");
document.writeln("		return data === undefined ?");
document.writeln("			this :");
document.writeln("			this.each( function() {");
document.writeln("				var queue = jQuery.queue( this, type, data );");
document.writeln("");
document.writeln("				// ensure a hooks for this queue");
document.writeln("				jQuery._queueHooks( this, type );");
document.writeln("");
document.writeln("				if ( type === \'fx\' && queue[ 0 ] !== \'inprogress\' ) {");
document.writeln("					jQuery.dequeue( this, type );");
document.writeln("				}");
document.writeln("			} );");
document.writeln("	},");
document.writeln("	dequeue: function( type ) {");
document.writeln("		return this.each( function() {");
document.writeln("			jQuery.dequeue( this, type );");
document.writeln("		} );");
document.writeln("	},");
document.writeln("	clearQueue: function( type ) {");
document.writeln("		return this.queue( type || \'fx\', [] );");
document.writeln("	},");
document.writeln("");
document.writeln("	// Get a promise resolved when queues of a certain type");
document.writeln("	// are emptied (fx is the type by default)");
document.writeln("	promise: function( type, obj ) {");
document.writeln("		var tmp,");
document.writeln("			count = 1,");
document.writeln("			defer = jQuery.Deferred(),");
document.writeln("			elements = this,");
document.writeln("			i = this.length,");
document.writeln("			resolve = function() {");
document.writeln("				if ( !( --count ) ) {");
document.writeln("					defer.resolveWith( elements, [ elements ] );");
document.writeln("				}");
document.writeln("			};");
document.writeln("");
document.writeln("		if ( typeof type !== \'string\' ) {");
document.writeln("			obj = type;");
document.writeln("			type = undefined;");
document.writeln("		}");
document.writeln("		type = type || \'fx\';");
document.writeln("");
document.writeln("		while ( i-- ) {");
document.writeln("			tmp = jQuery._data( elements[ i ], type + \'queueHooks\' );");
document.writeln("			if ( tmp && tmp.empty ) {");
document.writeln("				count++;");
document.writeln("				tmp.empty.add( resolve );");
document.writeln("			}");
document.writeln("		}");
document.writeln("		resolve();");
document.writeln("		return defer.promise( obj );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var shrinkWrapBlocksVal;");
document.writeln("");
document.writeln("	support.shrinkWrapBlocks = function() {");
document.writeln("		if ( shrinkWrapBlocksVal != null ) {");
document.writeln("			return shrinkWrapBlocksVal;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Will be changed later if needed.");
document.writeln("		shrinkWrapBlocksVal = false;");
document.writeln("");
document.writeln("		// Minified: var b,c,d");
document.writeln("		var div, body, container;");
document.writeln("");
document.writeln("		body = document.getElementsByTagName( \'body\' )[ 0 ];");
document.writeln("		if ( !body || !body.style ) {");
document.writeln("");
document.writeln("			// Test fired too early or in an unsupported environment, exit.");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Setup");
document.writeln("		div = document.createElement( \'div\' );");
document.writeln("		container = document.createElement( \'div\' );");
document.writeln("		container.style.cssText = \'position:absolute;border:0;width:0;height:0;top:0;left:-9999px\';");
document.writeln("		body.appendChild( container ).appendChild( div );");
document.writeln("");
document.writeln("		// Support: IE6");
document.writeln("		// Check if elements with layout shrink-wrap their children");
document.writeln("		if ( typeof div.style.zoom !== \'undefined\' ) {");
document.writeln("");
document.writeln("			// Reset CSS: box-sizing; display; margin; border");
document.writeln("			div.style.cssText =");
document.writeln("");
document.writeln("				// Support: Firefox<29, Android 2.3");
document.writeln("				// Vendor-prefix box-sizing");
document.writeln("				\'-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\' +");
document.writeln("				\'box-sizing:content-box;display:block;margin:0;border:0;\' +");
document.writeln("				\'padding:1px;width:1px;zoom:1\';");
document.writeln("			div.appendChild( document.createElement( \'div\' ) ).style.width = \'5px\';");
document.writeln("			shrinkWrapBlocksVal = div.offsetWidth !== 3;");
document.writeln("		}");
document.writeln("");
document.writeln("		body.removeChild( container );");
document.writeln("");
document.writeln("		return shrinkWrapBlocksVal;");
document.writeln("	};");
document.writeln("");
document.writeln("} )();");
document.writeln("var pnum = ( /[+-]?(?:\/\/d*\/\/.|)\/\/d+(?:[eE][+-]?\/\/d+|)/ ).source;");
document.writeln("");
document.writeln("var rcssNum = new RegExp( \'^(?:([+-])=|)(\' + pnum + \')([a-z%]*)$\', \'i\' );");
document.writeln("");
document.writeln("");
document.writeln("var cssExpand = [ \'Top\', \'Right\', \'Bottom\', \'Left\' ];");
document.writeln("");
document.writeln("var isHidden = function( elem, el ) {");
document.writeln("");
document.writeln("		// isHidden might be called from jQuery#filter function;");
document.writeln("		// in that case, element will be second argument");
document.writeln("		elem = el || elem;");
document.writeln("		return jQuery.css( elem, \'display\' ) === \'none\' ||");
document.writeln("			!jQuery.contains( elem.ownerDocument, elem );");
document.writeln("	};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("function adjustCSS( elem, prop, valueParts, tween ) {");
document.writeln("	var adjusted,");
document.writeln("		scale = 1,");
document.writeln("		maxIterations = 20,");
document.writeln("		currentValue = tween ?");
document.writeln("			function() { return tween.cur(); } :");
document.writeln("			function() { return jQuery.css( elem, prop, \'\' ); },");
document.writeln("		initial = currentValue(),");
document.writeln("		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \'\' : \'px\' ),");
document.writeln("");
document.writeln("		// Starting value computation is required for potential unit mismatches");
document.writeln("		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \'px\' && +initial ) &&");
document.writeln("			rcssNum.exec( jQuery.css( elem, prop ) );");
document.writeln("");
document.writeln("	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {");
document.writeln("");
document.writeln("		// Trust units reported by jQuery.css");
document.writeln("		unit = unit || initialInUnit[ 3 ];");
document.writeln("");
document.writeln("		// Make sure we update the tween properties later on");
document.writeln("		valueParts = valueParts || [];");
document.writeln("");
document.writeln("		// Iteratively approximate from a nonzero starting point");
document.writeln("		initialInUnit = +initial || 1;");
document.writeln("");
document.writeln("		do {");
document.writeln("");
document.writeln("			// If previous iteration zeroed out, double until we get *something*.");
document.writeln("			// Use string for doubling so we don\'t accidentally see scale as unchanged below");
document.writeln("			scale = scale || \'.5\';");
document.writeln("");
document.writeln("			// Adjust and apply");
document.writeln("			initialInUnit = initialInUnit / scale;");
document.writeln("			jQuery.style( elem, prop, initialInUnit + unit );");
document.writeln("");
document.writeln("		// Update scale, tolerating zero or NaN from tween.cur()");
document.writeln("		// Break the loop if scale is unchanged or perfect, or if we\'ve just had enough.");
document.writeln("		} while (");
document.writeln("			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations");
document.writeln("		);");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( valueParts ) {");
document.writeln("		initialInUnit = +initialInUnit || +initial || 0;");
document.writeln("");
document.writeln("		// Apply relative offset (+=/-=) if specified");
document.writeln("		adjusted = valueParts[ 1 ] ?");
document.writeln("			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :");
document.writeln("			+valueParts[ 2 ];");
document.writeln("		if ( tween ) {");
document.writeln("			tween.unit = unit;");
document.writeln("			tween.start = initialInUnit;");
document.writeln("			tween.end = adjusted;");
document.writeln("		}");
document.writeln("	}");
document.writeln("	return adjusted;");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("// Multifunctional method to get and set values of a collection");
document.writeln("// The value/s can optionally be executed if it\'s a function");
document.writeln("var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {");
document.writeln("	var i = 0,");
document.writeln("		length = elems.length,");
document.writeln("		bulk = key == null;");
document.writeln("");
document.writeln("	// Sets many values");
document.writeln("	if ( jQuery.type( key ) === \'object\' ) {");
document.writeln("		chainable = true;");
document.writeln("		for ( i in key ) {");
document.writeln("			access( elems, fn, i, key[ i ], true, emptyGet, raw );");
document.writeln("		}");
document.writeln("");
document.writeln("	// Sets one value");
document.writeln("	} else if ( value !== undefined ) {");
document.writeln("		chainable = true;");
document.writeln("");
document.writeln("		if ( !jQuery.isFunction( value ) ) {");
document.writeln("			raw = true;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( bulk ) {");
document.writeln("");
document.writeln("			// Bulk operations run against the entire set");
document.writeln("			if ( raw ) {");
document.writeln("				fn.call( elems, value );");
document.writeln("				fn = null;");
document.writeln("");
document.writeln("			// ...except when executing function values");
document.writeln("			} else {");
document.writeln("				bulk = fn;");
document.writeln("				fn = function( elem, key, value ) {");
document.writeln("					return bulk.call( jQuery( elem ), value );");
document.writeln("				};");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( fn ) {");
document.writeln("			for ( ; i < length; i++ ) {");
document.writeln("				fn(");
document.writeln("					elems[ i ],");
document.writeln("					key,");
document.writeln("					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )");
document.writeln("				);");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return chainable ?");
document.writeln("		elems :");
document.writeln("");
document.writeln("		// Gets");
document.writeln("		bulk ?");
document.writeln("			fn.call( elems ) :");
document.writeln("			length ? fn( elems[ 0 ], key ) : emptyGet;");
document.writeln("};");
document.writeln("var rcheckableType = ( /^(?:checkbox|radio)$/i );");
document.writeln("");
document.writeln("var rtagName = ( /<([\/\/w:-]+)/ );");
document.writeln("");
document.writeln("var rscriptType = ( /^$|\/\//(?:java|ecma)script/i );");
document.writeln("");
document.writeln("var rleadingWhitespace = ( /^\/\/s+/ );");
document.writeln("");
document.writeln("var nodeNames = \'abbr|article|aside|audio|bdi|canvas|data|datalist|\' +");
document.writeln("		\'details|dialog|figcaption|figure|footer|header|hgroup|main|\' +");
document.writeln("		\'mark|meter|nav|output|picture|progress|section|summary|template|time|video\';");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("function createSafeFragment( document ) {");
document.writeln("	var list = nodeNames.split( \'|\' ),");
document.writeln("		safeFrag = document.createDocumentFragment();");
document.writeln("");
document.writeln("	if ( safeFrag.createElement ) {");
document.writeln("		while ( list.length ) {");
document.writeln("			safeFrag.createElement(");
document.writeln("				list.pop()");
document.writeln("			);");
document.writeln("		}");
document.writeln("	}");
document.writeln("	return safeFrag;");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var div = document.createElement( \'div\' ),");
document.writeln("		fragment = document.createDocumentFragment(),");
document.writeln("		input = document.createElement( \'input\' );");
document.writeln("");
document.writeln("	// Setup");
document.writeln("	div.innerHTML = \'  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>\';");
document.writeln("");
document.writeln("	// IE strips leading whitespace when .innerHTML is used");
document.writeln("	support.leadingWhitespace = div.firstChild.nodeType === 3;");
document.writeln("");
document.writeln("	// Make sure that tbody elements aren\'t automatically inserted");
document.writeln("	// IE will insert them into empty tables");
document.writeln("	support.tbody = !div.getElementsByTagName( \'tbody\' ).length;");
document.writeln("");
document.writeln("	// Make sure that link elements get serialized correctly by innerHTML");
document.writeln("	// This requires a wrapper element in IE");
document.writeln("	support.htmlSerialize = !!div.getElementsByTagName( \'link\' ).length;");
document.writeln("");
document.writeln("	// Makes sure cloning an html5 element does not cause problems");
document.writeln("	// Where outerHTML is undefined, this still works");
document.writeln("	support.html5Clone =");
document.writeln("		document.createElement( \'nav\' ).cloneNode( true ).outerHTML !== \'<:nav></:nav>\';");
document.writeln("");
document.writeln("	// Check if a disconnected checkbox will retain its checked");
document.writeln("	// value of true after appended to the DOM (IE6/7)");
document.writeln("	input.type = \'checkbox\';");
document.writeln("	input.checked = true;");
document.writeln("	fragment.appendChild( input );");
document.writeln("	support.appendChecked = input.checked;");
document.writeln("");
document.writeln("	// Make sure textarea (and checkbox) defaultValue is properly cloned");
document.writeln("	// Support: IE6-IE11+");
document.writeln("	div.innerHTML = \'<textarea>x</textarea>\';");
document.writeln("	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;");
document.writeln("");
document.writeln("	// #11217 - WebKit loses check when the name is after the checked attribute");
document.writeln("	fragment.appendChild( div );");
document.writeln("");
document.writeln("	// Support: Windows Web Apps (WWA)");
document.writeln("	// `name` and `type` must use .setAttribute for WWA (#14901)");
document.writeln("	input = document.createElement( \'input\' );");
document.writeln("	input.setAttribute( \'type\', \'radio\' );");
document.writeln("	input.setAttribute( \'checked\', \'checked\' );");
document.writeln("	input.setAttribute( \'name\', \'t\' );");
document.writeln("");
document.writeln("	div.appendChild( input );");
document.writeln("");
document.writeln("	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3");
document.writeln("	// old WebKit doesn\'t clone checked state correctly in fragments");
document.writeln("	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;");
document.writeln("");
document.writeln("	// Support: IE<9");
document.writeln("	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+");
document.writeln("	support.noCloneEvent = !!div.addEventListener;");
document.writeln("");
document.writeln("	// Support: IE<9");
document.writeln("	// Since attributes and properties are the same in IE,");
document.writeln("	// cleanData must set properties to undefined rather than use removeAttribute");
document.writeln("	div[ jQuery.expando ] = 1;");
document.writeln("	support.attributes = !div.getAttribute( jQuery.expando );");
document.writeln("} )();");
document.writeln("");
document.writeln("");
document.writeln("// We have to close these tags to support XHTML (#13200)");
document.writeln("var wrapMap = {");
document.writeln("	option: [ 1, \'<select multiple=\'multiple\'>\', \'</select>\' ],");
document.writeln("	legend: [ 1, \'<fieldset>\', \'</fieldset>\' ],");
document.writeln("	area: [ 1, \'<map>\', \'</map>\' ],");
document.writeln("");
document.writeln("	// Support: IE8");
document.writeln("	param: [ 1, \'<object>\', \'</object>\' ],");
document.writeln("	thead: [ 1, \'<table>\', \'</table>\' ],");
document.writeln("	tr: [ 2, \'<table><tbody>\', \'</tbody></table>\' ],");
document.writeln("	col: [ 2, \'<table><tbody></tbody><colgroup>\', \'</colgroup></table>\' ],");
document.writeln("	td: [ 3, \'<table><tbody><tr>\', \'</tr></tbody></table>\' ],");
document.writeln("");
document.writeln("	// IE6-8 can\'t serialize link, script, style, or any html5 (NoScope) tags,");
document.writeln("	// unless wrapped in a div with non-breaking characters in front of it.");
document.writeln("	_default: support.htmlSerialize ? [ 0, \'\', \'\' ] : [ 1, \'X<div>\', \'</div>\' ]");
document.writeln("};");
document.writeln("");
document.writeln("// Support: IE8-IE9");
document.writeln("wrapMap.optgroup = wrapMap.option;");
document.writeln("");
document.writeln("wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;");
document.writeln("wrapMap.th = wrapMap.td;");
document.writeln("");
document.writeln("");
document.writeln("function getAll( context, tag ) {");
document.writeln("	var elems, elem,");
document.writeln("		i = 0,");
document.writeln("		found = typeof context.getElementsByTagName !== \'undefined\' ?");
document.writeln("			context.getElementsByTagName( tag || \'*\' ) :");
document.writeln("			typeof context.querySelectorAll !== \'undefined\' ?");
document.writeln("				context.querySelectorAll( tag || \'*\' ) :");
document.writeln("				undefined;");
document.writeln("");
document.writeln("	if ( !found ) {");
document.writeln("		for ( found = [], elems = context.childNodes || context;");
document.writeln("			( elem = elems[ i ] ) != null;");
document.writeln("			i++");
document.writeln("		) {");
document.writeln("			if ( !tag || jQuery.nodeName( elem, tag ) ) {");
document.writeln("				found.push( elem );");
document.writeln("			} else {");
document.writeln("				jQuery.merge( found, getAll( elem, tag ) );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?");
document.writeln("		jQuery.merge( [ context ], found ) :");
document.writeln("		found;");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("// Mark scripts as having already been evaluated");
document.writeln("function setGlobalEval( elems, refElements ) {");
document.writeln("	var elem,");
document.writeln("		i = 0;");
document.writeln("	for ( ; ( elem = elems[ i ] ) != null; i++ ) {");
document.writeln("		jQuery._data(");
document.writeln("			elem,");
document.writeln("			\'globalEval\',");
document.writeln("			!refElements || jQuery._data( refElements[ i ], \'globalEval\' )");
document.writeln("		);");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("var rhtml = /<|&#?\/\/w+;/,");
document.writeln("	rtbody = /<tbody/i;");
document.writeln("");
document.writeln("function fixDefaultChecked( elem ) {");
document.writeln("	if ( rcheckableType.test( elem.type ) ) {");
document.writeln("		elem.defaultChecked = elem.checked;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function buildFragment( elems, context, scripts, selection, ignored ) {");
document.writeln("	var j, elem, contains,");
document.writeln("		tmp, tag, tbody, wrap,");
document.writeln("		l = elems.length,");
document.writeln("");
document.writeln("		// Ensure a safe fragment");
document.writeln("		safe = createSafeFragment( context ),");
document.writeln("");
document.writeln("		nodes = [],");
document.writeln("		i = 0;");
document.writeln("");
document.writeln("	for ( ; i < l; i++ ) {");
document.writeln("		elem = elems[ i ];");
document.writeln("");
document.writeln("		if ( elem || elem === 0 ) {");
document.writeln("");
document.writeln("			// Add nodes directly");
document.writeln("			if ( jQuery.type( elem ) === \'object\' ) {");
document.writeln("				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );");
document.writeln("");
document.writeln("			// Convert non-html into a text node");
document.writeln("			} else if ( !rhtml.test( elem ) ) {");
document.writeln("				nodes.push( context.createTextNode( elem ) );");
document.writeln("");
document.writeln("			// Convert html into DOM nodes");
document.writeln("			} else {");
document.writeln("				tmp = tmp || safe.appendChild( context.createElement( \'div\' ) );");
document.writeln("");
document.writeln("				// Deserialize a standard representation");
document.writeln("				tag = ( rtagName.exec( elem ) || [ \'\', \'\' ] )[ 1 ].toLowerCase();");
document.writeln("				wrap = wrapMap[ tag ] || wrapMap._default;");
document.writeln("");
document.writeln("				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];");
document.writeln("");
document.writeln("				// Descend through wrappers to the right content");
document.writeln("				j = wrap[ 0 ];");
document.writeln("				while ( j-- ) {");
document.writeln("					tmp = tmp.lastChild;");
document.writeln("				}");
document.writeln("");
document.writeln("				// Manually add leading whitespace removed by IE");
document.writeln("				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {");
document.writeln("					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );");
document.writeln("				}");
document.writeln("");
document.writeln("				// Remove IE\'s autoinserted <tbody> from table fragments");
document.writeln("				if ( !support.tbody ) {");
document.writeln("");
document.writeln("					// String was a <table>, *may* have spurious <tbody>");
document.writeln("					elem = tag === \'table\' && !rtbody.test( elem ) ?");
document.writeln("						tmp.firstChild :");
document.writeln("");
document.writeln("						// String was a bare <thead> or <tfoot>");
document.writeln("						wrap[ 1 ] === \'<table>\' && !rtbody.test( elem ) ?");
document.writeln("							tmp :");
document.writeln("							0;");
document.writeln("");
document.writeln("					j = elem && elem.childNodes.length;");
document.writeln("					while ( j-- ) {");
document.writeln("						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), \'tbody\' ) &&");
document.writeln("							!tbody.childNodes.length ) {");
document.writeln("");
document.writeln("							elem.removeChild( tbody );");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				jQuery.merge( nodes, tmp.childNodes );");
document.writeln("");
document.writeln("				// Fix #12392 for WebKit and IE > 9");
document.writeln("				tmp.textContent = \'\';");
document.writeln("");
document.writeln("				// Fix #12392 for oldIE");
document.writeln("				while ( tmp.firstChild ) {");
document.writeln("					tmp.removeChild( tmp.firstChild );");
document.writeln("				}");
document.writeln("");
document.writeln("				// Remember the top-level container for proper cleanup");
document.writeln("				tmp = safe.lastChild;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Fix #11356: Clear elements from fragment");
document.writeln("	if ( tmp ) {");
document.writeln("		safe.removeChild( tmp );");
document.writeln("	}");
document.writeln("");
document.writeln("	// Reset defaultChecked for any radios and checkboxes");
document.writeln("	// about to be appended to the DOM in IE 6/7 (#8060)");
document.writeln("	if ( !support.appendChecked ) {");
document.writeln("		jQuery.grep( getAll( nodes, \'input\' ), fixDefaultChecked );");
document.writeln("	}");
document.writeln("");
document.writeln("	i = 0;");
document.writeln("	while ( ( elem = nodes[ i++ ] ) ) {");
document.writeln("");
document.writeln("		// Skip elements already in the context collection (trac-4087)");
document.writeln("		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {");
document.writeln("			if ( ignored ) {");
document.writeln("				ignored.push( elem );");
document.writeln("			}");
document.writeln("");
document.writeln("			continue;");
document.writeln("		}");
document.writeln("");
document.writeln("		contains = jQuery.contains( elem.ownerDocument, elem );");
document.writeln("");
document.writeln("		// Append to fragment");
document.writeln("		tmp = getAll( safe.appendChild( elem ), \'script\' );");
document.writeln("");
document.writeln("		// Preserve script evaluation history");
document.writeln("		if ( contains ) {");
document.writeln("			setGlobalEval( tmp );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Capture executables");
document.writeln("		if ( scripts ) {");
document.writeln("			j = 0;");
document.writeln("			while ( ( elem = tmp[ j++ ] ) ) {");
document.writeln("				if ( rscriptType.test( elem.type || \'\' ) ) {");
document.writeln("					scripts.push( elem );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	tmp = null;");
document.writeln("");
document.writeln("	return safe;");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var i, eventName,");
document.writeln("		div = document.createElement( \'div\' );");
document.writeln("");
document.writeln("	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)");
document.writeln("	for ( i in { submit: true, change: true, focusin: true } ) {");
document.writeln("		eventName = \'on\' + i;");
document.writeln("");
document.writeln("		if ( !( support[ i ] = eventName in window ) ) {");
document.writeln("");
document.writeln("			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)");
document.writeln("			div.setAttribute( eventName, \'t\' );");
document.writeln("			support[ i ] = div.attributes[ eventName ].expando === false;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Null elements to avoid leaks in IE.");
document.writeln("	div = null;");
document.writeln("} )();");
document.writeln("");
document.writeln("");
document.writeln("var rformElems = /^(?:input|select|textarea)$/i,");
document.writeln("	rkeyEvent = /^key/,");
document.writeln("	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,");
document.writeln("	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,");
document.writeln("	rtypenamespace = /^([^.]*)(?:\/\/.(.+)|)/;");
document.writeln("");
document.writeln("function returnTrue() {");
document.writeln("	return true;");
document.writeln("}");
document.writeln("");
document.writeln("function returnFalse() {");
document.writeln("	return false;");
document.writeln("}");
document.writeln("");
document.writeln("// Support: IE9");
document.writeln("// See #13393 for more info");
document.writeln("function safeActiveElement() {");
document.writeln("	try {");
document.writeln("		return document.activeElement;");
document.writeln("	} catch ( err ) { }");
document.writeln("}");
document.writeln("");
document.writeln("function on( elem, types, selector, data, fn, one ) {");
document.writeln("	var origFn, type;");
document.writeln("");
document.writeln("	// Types can be a map of types/handlers");
document.writeln("	if ( typeof types === \'object\' ) {");
document.writeln("");
document.writeln("		// ( types-Object, selector, data )");
document.writeln("		if ( typeof selector !== \'string\' ) {");
document.writeln("");
document.writeln("			// ( types-Object, data )");
document.writeln("			data = data || selector;");
document.writeln("			selector = undefined;");
document.writeln("		}");
document.writeln("		for ( type in types ) {");
document.writeln("			on( elem, type, selector, data, types[ type ], one );");
document.writeln("		}");
document.writeln("		return elem;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( data == null && fn == null ) {");
document.writeln("");
document.writeln("		// ( types, fn )");
document.writeln("		fn = selector;");
document.writeln("		data = selector = undefined;");
document.writeln("	} else if ( fn == null ) {");
document.writeln("		if ( typeof selector === \'string\' ) {");
document.writeln("");
document.writeln("			// ( types, selector, fn )");
document.writeln("			fn = data;");
document.writeln("			data = undefined;");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// ( types, data, fn )");
document.writeln("			fn = data;");
document.writeln("			data = selector;");
document.writeln("			selector = undefined;");
document.writeln("		}");
document.writeln("	}");
document.writeln("	if ( fn === false ) {");
document.writeln("		fn = returnFalse;");
document.writeln("	} else if ( !fn ) {");
document.writeln("		return elem;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( one === 1 ) {");
document.writeln("		origFn = fn;");
document.writeln("		fn = function( event ) {");
document.writeln("");
document.writeln("			// Can use an empty set, since event contains the info");
document.writeln("			jQuery().off( event );");
document.writeln("			return origFn.apply( this, arguments );");
document.writeln("		};");
document.writeln("");
document.writeln("		// Use same guid so caller can remove using origFn");
document.writeln("		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );");
document.writeln("	}");
document.writeln("	return elem.each( function() {");
document.writeln("		jQuery.event.add( this, types, fn, data, selector );");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("/*");
document.writeln(" * Helper functions for managing events -- not part of the public interface.");
document.writeln(" * Props to Dean Edwards\' addEvent library for many of the ideas.");
document.writeln(" */");
document.writeln("jQuery.event = {");
document.writeln("");
document.writeln("	global: {},");
document.writeln("");
document.writeln("	add: function( elem, types, handler, data, selector ) {");
document.writeln("		var tmp, events, t, handleObjIn,");
document.writeln("			special, eventHandle, handleObj,");
document.writeln("			handlers, type, namespaces, origType,");
document.writeln("			elemData = jQuery._data( elem );");
document.writeln("");
document.writeln("		// Don\'t attach events to noData or text/comment nodes (but allow plain objects)");
document.writeln("		if ( !elemData ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Caller can pass in an object of custom data in lieu of the handler");
document.writeln("		if ( handler.handler ) {");
document.writeln("			handleObjIn = handler;");
document.writeln("			handler = handleObjIn.handler;");
document.writeln("			selector = handleObjIn.selector;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Make sure that the handler has a unique ID, used to find/remove it later");
document.writeln("		if ( !handler.guid ) {");
document.writeln("			handler.guid = jQuery.guid++;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Init the element\'s event structure and main handler, if this is the first");
document.writeln("		if ( !( events = elemData.events ) ) {");
document.writeln("			events = elemData.events = {};");
document.writeln("		}");
document.writeln("		if ( !( eventHandle = elemData.handle ) ) {");
document.writeln("			eventHandle = elemData.handle = function( e ) {");
document.writeln("");
document.writeln("				// Discard the second event of a jQuery.event.trigger() and");
document.writeln("				// when an event is called after a page has unloaded");
document.writeln("				return typeof jQuery !== \'undefined\' &&");
document.writeln("					( !e || jQuery.event.triggered !== e.type ) ?");
document.writeln("					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :");
document.writeln("					undefined;");
document.writeln("			};");
document.writeln("");
document.writeln("			// Add elem as a property of the handle fn to prevent a memory leak");
document.writeln("			// with IE non-native events");
document.writeln("			eventHandle.elem = elem;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Handle multiple events separated by a space");
document.writeln("		types = ( types || \'\' ).match( rnotwhite ) || [ \'\' ];");
document.writeln("		t = types.length;");
document.writeln("		while ( t-- ) {");
document.writeln("			tmp = rtypenamespace.exec( types[ t ] ) || [];");
document.writeln("			type = origType = tmp[ 1 ];");
document.writeln("			namespaces = ( tmp[ 2 ] || \'\' ).split( \'.\' ).sort();");
document.writeln("");
document.writeln("			// There *must* be a type, no attaching namespace-only handlers");
document.writeln("			if ( !type ) {");
document.writeln("				continue;");
document.writeln("			}");
document.writeln("");
document.writeln("			// If event changes its type, use the special event handlers for the changed type");
document.writeln("			special = jQuery.event.special[ type ] || {};");
document.writeln("");
document.writeln("			// If selector defined, determine special event api type, otherwise given type");
document.writeln("			type = ( selector ? special.delegateType : special.bindType ) || type;");
document.writeln("");
document.writeln("			// Update special based on newly reset type");
document.writeln("			special = jQuery.event.special[ type ] || {};");
document.writeln("");
document.writeln("			// handleObj is passed to all event handlers");
document.writeln("			handleObj = jQuery.extend( {");
document.writeln("				type: type,");
document.writeln("				origType: origType,");
document.writeln("				data: data,");
document.writeln("				handler: handler,");
document.writeln("				guid: handler.guid,");
document.writeln("				selector: selector,");
document.writeln("				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),");
document.writeln("				namespace: namespaces.join( \'.\' )");
document.writeln("			}, handleObjIn );");
document.writeln("");
document.writeln("			// Init the event handler queue if we\'re the first");
document.writeln("			if ( !( handlers = events[ type ] ) ) {");
document.writeln("				handlers = events[ type ] = [];");
document.writeln("				handlers.delegateCount = 0;");
document.writeln("");
document.writeln("				// Only use addEventListener/attachEvent if the special events handler returns false");
document.writeln("				if ( !special.setup ||");
document.writeln("					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {");
document.writeln("");
document.writeln("					// Bind the global event handler to the element");
document.writeln("					if ( elem.addEventListener ) {");
document.writeln("						elem.addEventListener( type, eventHandle, false );");
document.writeln("");
document.writeln("					} else if ( elem.attachEvent ) {");
document.writeln("						elem.attachEvent( \'on\' + type, eventHandle );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( special.add ) {");
document.writeln("				special.add.call( elem, handleObj );");
document.writeln("");
document.writeln("				if ( !handleObj.handler.guid ) {");
document.writeln("					handleObj.handler.guid = handler.guid;");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add to the element\'s handler list, delegates in front");
document.writeln("			if ( selector ) {");
document.writeln("				handlers.splice( handlers.delegateCount++, 0, handleObj );");
document.writeln("			} else {");
document.writeln("				handlers.push( handleObj );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Keep track of which events have ever been used, for event optimization");
document.writeln("			jQuery.event.global[ type ] = true;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Nullify elem to prevent memory leaks in IE");
document.writeln("		elem = null;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Detach an event or set of events from an element");
document.writeln("	remove: function( elem, types, handler, selector, mappedTypes ) {");
document.writeln("		var j, handleObj, tmp,");
document.writeln("			origCount, t, events,");
document.writeln("			special, handlers, type,");
document.writeln("			namespaces, origType,");
document.writeln("			elemData = jQuery.hasData( elem ) && jQuery._data( elem );");
document.writeln("");
document.writeln("		if ( !elemData || !( events = elemData.events ) ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Once for each type.namespace in types; type may be omitted");
document.writeln("		types = ( types || \'\' ).match( rnotwhite ) || [ \'\' ];");
document.writeln("		t = types.length;");
document.writeln("		while ( t-- ) {");
document.writeln("			tmp = rtypenamespace.exec( types[ t ] ) || [];");
document.writeln("			type = origType = tmp[ 1 ];");
document.writeln("			namespaces = ( tmp[ 2 ] || \'\' ).split( \'.\' ).sort();");
document.writeln("");
document.writeln("			// Unbind all events (on this namespace, if provided) for the element");
document.writeln("			if ( !type ) {");
document.writeln("				for ( type in events ) {");
document.writeln("					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );");
document.writeln("				}");
document.writeln("				continue;");
document.writeln("			}");
document.writeln("");
document.writeln("			special = jQuery.event.special[ type ] || {};");
document.writeln("			type = ( selector ? special.delegateType : special.bindType ) || type;");
document.writeln("			handlers = events[ type ] || [];");
document.writeln("			tmp = tmp[ 2 ] &&");
document.writeln("				new RegExp( \'(^|\/\/\/\/.)\' + namespaces.join( \'\/\/\/\/.(?:.*\/\/\/\/.|)\' ) + \'(\/\/\/\/.|$)\' );");
document.writeln("");
document.writeln("			// Remove matching events");
document.writeln("			origCount = j = handlers.length;");
document.writeln("			while ( j-- ) {");
document.writeln("				handleObj = handlers[ j ];");
document.writeln("");
document.writeln("				if ( ( mappedTypes || origType === handleObj.origType ) &&");
document.writeln("					( !handler || handler.guid === handleObj.guid ) &&");
document.writeln("					( !tmp || tmp.test( handleObj.namespace ) ) &&");
document.writeln("					( !selector || selector === handleObj.selector ||");
document.writeln("						selector === \'**\' && handleObj.selector ) ) {");
document.writeln("					handlers.splice( j, 1 );");
document.writeln("");
document.writeln("					if ( handleObj.selector ) {");
document.writeln("						handlers.delegateCount--;");
document.writeln("					}");
document.writeln("					if ( special.remove ) {");
document.writeln("						special.remove.call( elem, handleObj );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Remove generic event handler if we removed something and no more handlers exist");
document.writeln("			// (avoids potential for endless recursion during removal of special event handlers)");
document.writeln("			if ( origCount && !handlers.length ) {");
document.writeln("				if ( !special.teardown ||");
document.writeln("					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {");
document.writeln("");
document.writeln("					jQuery.removeEvent( elem, type, elemData.handle );");
document.writeln("				}");
document.writeln("");
document.writeln("				delete events[ type ];");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Remove the expando if it\'s no longer used");
document.writeln("		if ( jQuery.isEmptyObject( events ) ) {");
document.writeln("			delete elemData.handle;");
document.writeln("");
document.writeln("			// removeData also checks for emptiness and clears the expando if empty");
document.writeln("			// so use it instead of delete");
document.writeln("			jQuery._removeData( elem, \'events\' );");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	trigger: function( event, data, elem, onlyHandlers ) {");
document.writeln("		var handle, ontype, cur,");
document.writeln("			bubbleType, special, tmp, i,");
document.writeln("			eventPath = [ elem || document ],");
document.writeln("			type = hasOwn.call( event, \'type\' ) ? event.type : event,");
document.writeln("			namespaces = hasOwn.call( event, \'namespace\' ) ? event.namespace.split( \'.\' ) : [];");
document.writeln("");
document.writeln("		cur = tmp = elem = elem || document;");
document.writeln("");
document.writeln("		// Don\'t do events on text and comment nodes");
document.writeln("		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// focus/blur morphs to focusin/out; ensure we\'re not firing them right now");
document.writeln("		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( type.indexOf( \'.\' ) > -1 ) {");
document.writeln("");
document.writeln("			// Namespaced trigger; create a regexp to match event type in handle()");
document.writeln("			namespaces = type.split( \'.\' );");
document.writeln("			type = namespaces.shift();");
document.writeln("			namespaces.sort();");
document.writeln("		}");
document.writeln("		ontype = type.indexOf( \':\' ) < 0 && \'on\' + type;");
document.writeln("");
document.writeln("		// Caller can pass in a jQuery.Event object, Object, or just an event type string");
document.writeln("		event = event[ jQuery.expando ] ?");
document.writeln("			event :");
document.writeln("			new jQuery.Event( type, typeof event === \'object\' && event );");
document.writeln("");
document.writeln("		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)");
document.writeln("		event.isTrigger = onlyHandlers ? 2 : 3;");
document.writeln("		event.namespace = namespaces.join( \'.\' );");
document.writeln("		event.rnamespace = event.namespace ?");
document.writeln("			new RegExp( \'(^|\/\/\/\/.)\' + namespaces.join( \'\/\/\/\/.(?:.*\/\/\/\/.|)\' ) + \'(\/\/\/\/.|$)\' ) :");
document.writeln("			null;");
document.writeln("");
document.writeln("		// Clean up the event in case it is being reused");
document.writeln("		event.result = undefined;");
document.writeln("		if ( !event.target ) {");
document.writeln("			event.target = elem;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Clone any incoming data and prepend the event, creating the handler arg list");
document.writeln("		data = data == null ?");
document.writeln("			[ event ] :");
document.writeln("			jQuery.makeArray( data, [ event ] );");
document.writeln("");
document.writeln("		// Allow special events to draw outside the lines");
document.writeln("		special = jQuery.event.special[ type ] || {};");
document.writeln("		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Determine event propagation path in advance, per W3C events spec (#9951)");
document.writeln("		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)");
document.writeln("		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {");
document.writeln("");
document.writeln("			bubbleType = special.delegateType || type;");
document.writeln("			if ( !rfocusMorph.test( bubbleType + type ) ) {");
document.writeln("				cur = cur.parentNode;");
document.writeln("			}");
document.writeln("			for ( ; cur; cur = cur.parentNode ) {");
document.writeln("				eventPath.push( cur );");
document.writeln("				tmp = cur;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Only add window if we got to document (e.g., not plain obj or detached DOM)");
document.writeln("			if ( tmp === ( elem.ownerDocument || document ) ) {");
document.writeln("				eventPath.push( tmp.defaultView || tmp.parentWindow || window );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Fire handlers on the event path");
document.writeln("		i = 0;");
document.writeln("		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {");
document.writeln("");
document.writeln("			event.type = i > 1 ?");
document.writeln("				bubbleType :");
document.writeln("				special.bindType || type;");
document.writeln("");
document.writeln("			// jQuery handler");
document.writeln("			handle = ( jQuery._data( cur, \'events\' ) || {} )[ event.type ] &&");
document.writeln("				jQuery._data( cur, \'handle\' );");
document.writeln("");
document.writeln("			if ( handle ) {");
document.writeln("				handle.apply( cur, data );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Native handler");
document.writeln("			handle = ontype && cur[ ontype ];");
document.writeln("			if ( handle && handle.apply && acceptData( cur ) ) {");
document.writeln("				event.result = handle.apply( cur, data );");
document.writeln("				if ( event.result === false ) {");
document.writeln("					event.preventDefault();");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("		event.type = type;");
document.writeln("");
document.writeln("		// If nobody prevented the default action, do it now");
document.writeln("		if ( !onlyHandlers && !event.isDefaultPrevented() ) {");
document.writeln("");
document.writeln("			if (");
document.writeln("				( !special._default ||");
document.writeln("				 special._default.apply( eventPath.pop(), data ) === false");
document.writeln("				) && acceptData( elem )");
document.writeln("			) {");
document.writeln("");
document.writeln("				// Call a native DOM method on the target with the same name name as the event.");
document.writeln("				// Can\'t use an .isFunction() check here because IE6/7 fails that test.");
document.writeln("				// Don\'t do default actions on window, that\'s where global variables be (#6170)");
document.writeln("				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {");
document.writeln("");
document.writeln("					// Don\'t re-trigger an onFOO event when we call its FOO() method");
document.writeln("					tmp = elem[ ontype ];");
document.writeln("");
document.writeln("					if ( tmp ) {");
document.writeln("						elem[ ontype ] = null;");
document.writeln("					}");
document.writeln("");
document.writeln("					// Prevent re-triggering of the same event, since we already bubbled it above");
document.writeln("					jQuery.event.triggered = type;");
document.writeln("					try {");
document.writeln("						elem[ type ]();");
document.writeln("					} catch ( e ) {");
document.writeln("");
document.writeln("						// IE<9 dies on focus/blur to hidden element (#1486,#12518)");
document.writeln("						// only reproducible on winXP IE8 native, not IE9 in IE8 mode");
document.writeln("					}");
document.writeln("					jQuery.event.triggered = undefined;");
document.writeln("");
document.writeln("					if ( tmp ) {");
document.writeln("						elem[ ontype ] = tmp;");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return event.result;");
document.writeln("	},");
document.writeln("");
document.writeln("	dispatch: function( event ) {");
document.writeln("");
document.writeln("		// Make a writable jQuery.Event from the native event object");
document.writeln("		event = jQuery.event.fix( event );");
document.writeln("");
document.writeln("		var i, j, ret, matched, handleObj,");
document.writeln("			handlerQueue = [],");
document.writeln("			args = slice.call( arguments ),");
document.writeln("			handlers = ( jQuery._data( this, \'events\' ) || {} )[ event.type ] || [],");
document.writeln("			special = jQuery.event.special[ event.type ] || {};");
document.writeln("");
document.writeln("		// Use the fix-ed jQuery.Event rather than the (read-only) native event");
document.writeln("		args[ 0 ] = event;");
document.writeln("		event.delegateTarget = this;");
document.writeln("");
document.writeln("		// Call the preDispatch hook for the mapped type, and let it bail if desired");
document.writeln("		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Determine handlers");
document.writeln("		handlerQueue = jQuery.event.handlers.call( this, event, handlers );");
document.writeln("");
document.writeln("		// Run delegates first; they may want to stop propagation beneath us");
document.writeln("		i = 0;");
document.writeln("		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {");
document.writeln("			event.currentTarget = matched.elem;");
document.writeln("");
document.writeln("			j = 0;");
document.writeln("			while ( ( handleObj = matched.handlers[ j++ ] ) &&");
document.writeln("				!event.isImmediatePropagationStopped() ) {");
document.writeln("");
document.writeln("				// Triggered event must either 1) have no namespace, or 2) have namespace(s)");
document.writeln("				// a subset or equal to those in the bound event (both can have no namespace).");
document.writeln("				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {");
document.writeln("");
document.writeln("					event.handleObj = handleObj;");
document.writeln("					event.data = handleObj.data;");
document.writeln("");
document.writeln("					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||");
document.writeln("						handleObj.handler ).apply( matched.elem, args );");
document.writeln("");
document.writeln("					if ( ret !== undefined ) {");
document.writeln("						if ( ( event.result = ret ) === false ) {");
document.writeln("							event.preventDefault();");
document.writeln("							event.stopPropagation();");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Call the postDispatch hook for the mapped type");
document.writeln("		if ( special.postDispatch ) {");
document.writeln("			special.postDispatch.call( this, event );");
document.writeln("		}");
document.writeln("");
document.writeln("		return event.result;");
document.writeln("	},");
document.writeln("");
document.writeln("	handlers: function( event, handlers ) {");
document.writeln("		var i, matches, sel, handleObj,");
document.writeln("			handlerQueue = [],");
document.writeln("			delegateCount = handlers.delegateCount,");
document.writeln("			cur = event.target;");
document.writeln("");
document.writeln("		// Support (at least): Chrome, IE9");
document.writeln("		// Find delegate handlers");
document.writeln("		// Black-hole SVG <use> instance trees (#13180)");
document.writeln("		//");
document.writeln("		// Support: Firefox<=42+");
document.writeln("		// Avoid non-left-click in FF but don\'t block IE radio events (#3861, gh-2343)");
document.writeln("		if ( delegateCount && cur.nodeType &&");
document.writeln("			( event.type !== \'click\' || isNaN( event.button ) || event.button < 1 ) ) {");
document.writeln("");
document.writeln("			/* jshint eqeqeq: false */");
document.writeln("			for ( ; cur != this; cur = cur.parentNode || this ) {");
document.writeln("				/* jshint eqeqeq: true */");
document.writeln("");
document.writeln("				// Don\'t check non-elements (#13208)");
document.writeln("				// Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)");
document.writeln("				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \'click\' ) ) {");
document.writeln("					matches = [];");
document.writeln("					for ( i = 0; i < delegateCount; i++ ) {");
document.writeln("						handleObj = handlers[ i ];");
document.writeln("");
document.writeln("						// Don\'t conflict with Object.prototype properties (#13203)");
document.writeln("						sel = handleObj.selector + \' \';");
document.writeln("");
document.writeln("						if ( matches[ sel ] === undefined ) {");
document.writeln("							matches[ sel ] = handleObj.needsContext ?");
document.writeln("								jQuery( sel, this ).index( cur ) > -1 :");
document.writeln("								jQuery.find( sel, this, null, [ cur ] ).length;");
document.writeln("						}");
document.writeln("						if ( matches[ sel ] ) {");
document.writeln("							matches.push( handleObj );");
document.writeln("						}");
document.writeln("					}");
document.writeln("					if ( matches.length ) {");
document.writeln("						handlerQueue.push( { elem: cur, handlers: matches } );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Add the remaining (directly-bound) handlers");
document.writeln("		if ( delegateCount < handlers.length ) {");
document.writeln("			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );");
document.writeln("		}");
document.writeln("");
document.writeln("		return handlerQueue;");
document.writeln("	},");
document.writeln("");
document.writeln("	fix: function( event ) {");
document.writeln("		if ( event[ jQuery.expando ] ) {");
document.writeln("			return event;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Create a writable copy of the event object and normalize some properties");
document.writeln("		var i, prop, copy,");
document.writeln("			type = event.type,");
document.writeln("			originalEvent = event,");
document.writeln("			fixHook = this.fixHooks[ type ];");
document.writeln("");
document.writeln("		if ( !fixHook ) {");
document.writeln("			this.fixHooks[ type ] = fixHook =");
document.writeln("				rmouseEvent.test( type ) ? this.mouseHooks :");
document.writeln("				rkeyEvent.test( type ) ? this.keyHooks :");
document.writeln("				{};");
document.writeln("		}");
document.writeln("		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;");
document.writeln("");
document.writeln("		event = new jQuery.Event( originalEvent );");
document.writeln("");
document.writeln("		i = copy.length;");
document.writeln("		while ( i-- ) {");
document.writeln("			prop = copy[ i ];");
document.writeln("			event[ prop ] = originalEvent[ prop ];");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// Fix target property (#1925)");
document.writeln("		if ( !event.target ) {");
document.writeln("			event.target = originalEvent.srcElement || document;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: Safari 6-8+");
document.writeln("		// Target should not be a text node (#504, #13143)");
document.writeln("		if ( event.target.nodeType === 3 ) {");
document.writeln("			event.target = event.target.parentNode;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// For mouse/key events, metaKey==false if it\'s undefined (#3368, #11328)");
document.writeln("		event.metaKey = !!event.metaKey;");
document.writeln("");
document.writeln("		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;");
document.writeln("	},");
document.writeln("");
document.writeln("	// Includes some event props shared by KeyEvent and MouseEvent");
document.writeln("	props: ( \'altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \' +");
document.writeln("		\'metaKey relatedTarget shiftKey target timeStamp view which\' ).split( \' \' ),");
document.writeln("");
document.writeln("	fixHooks: {},");
document.writeln("");
document.writeln("	keyHooks: {");
document.writeln("		props: \'char charCode key keyCode\'.split( \' \' ),");
document.writeln("		filter: function( event, original ) {");
document.writeln("");
document.writeln("			// Add which for key events");
document.writeln("			if ( event.which == null ) {");
document.writeln("				event.which = original.charCode != null ? original.charCode : original.keyCode;");
document.writeln("			}");
document.writeln("");
document.writeln("			return event;");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	mouseHooks: {");
document.writeln("		props: ( \'button buttons clientX clientY fromElement offsetX offsetY \' +");
document.writeln("			\'pageX pageY screenX screenY toElement\' ).split( \' \' ),");
document.writeln("		filter: function( event, original ) {");
document.writeln("			var body, eventDoc, doc,");
document.writeln("				button = original.button,");
document.writeln("				fromElement = original.fromElement;");
document.writeln("");
document.writeln("			// Calculate pageX/Y if missing and clientX/Y available");
document.writeln("			if ( event.pageX == null && original.clientX != null ) {");
document.writeln("				eventDoc = event.target.ownerDocument || document;");
document.writeln("				doc = eventDoc.documentElement;");
document.writeln("				body = eventDoc.body;");
document.writeln("");
document.writeln("				event.pageX = original.clientX +");
document.writeln("					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -");
document.writeln("					( doc && doc.clientLeft || body && body.clientLeft || 0 );");
document.writeln("				event.pageY = original.clientY +");
document.writeln("					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -");
document.writeln("					( doc && doc.clientTop  || body && body.clientTop  || 0 );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add relatedTarget, if necessary");
document.writeln("			if ( !event.relatedTarget && fromElement ) {");
document.writeln("				event.relatedTarget = fromElement === event.target ?");
document.writeln("					original.toElement :");
document.writeln("					fromElement;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add which for click: 1 === left; 2 === middle; 3 === right");
document.writeln("			// Note: button is not normalized, so don\'t use it");
document.writeln("			if ( !event.which && button !== undefined ) {");
document.writeln("				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );");
document.writeln("			}");
document.writeln("");
document.writeln("			return event;");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	special: {");
document.writeln("		load: {");
document.writeln("");
document.writeln("			// Prevent triggered image.load events from bubbling to window.load");
document.writeln("			noBubble: true");
document.writeln("		},");
document.writeln("		focus: {");
document.writeln("");
document.writeln("			// Fire native event if possible so blur/focus sequence is correct");
document.writeln("			trigger: function() {");
document.writeln("				if ( this !== safeActiveElement() && this.focus ) {");
document.writeln("					try {");
document.writeln("						this.focus();");
document.writeln("						return false;");
document.writeln("					} catch ( e ) {");
document.writeln("");
document.writeln("						// Support: IE<9");
document.writeln("						// If we error on focus to hidden element (#1486, #12518),");
document.writeln("						// let .trigger() run the handlers");
document.writeln("					}");
document.writeln("				}");
document.writeln("			},");
document.writeln("			delegateType: \'focusin\'");
document.writeln("		},");
document.writeln("		blur: {");
document.writeln("			trigger: function() {");
document.writeln("				if ( this === safeActiveElement() && this.blur ) {");
document.writeln("					this.blur();");
document.writeln("					return false;");
document.writeln("				}");
document.writeln("			},");
document.writeln("			delegateType: \'focusout\'");
document.writeln("		},");
document.writeln("		click: {");
document.writeln("");
document.writeln("			// For checkbox, fire native event so checked state will be right");
document.writeln("			trigger: function() {");
document.writeln("				if ( jQuery.nodeName( this, \'input\' ) && this.type === \'checkbox\' && this.click ) {");
document.writeln("					this.click();");
document.writeln("					return false;");
document.writeln("				}");
document.writeln("			},");
document.writeln("");
document.writeln("			// For cross-browser consistency, don\'t fire native .click() on links");
document.writeln("			_default: function( event ) {");
document.writeln("				return jQuery.nodeName( event.target, \'a\' );");
document.writeln("			}");
document.writeln("		},");
document.writeln("");
document.writeln("		beforeunload: {");
document.writeln("			postDispatch: function( event ) {");
document.writeln("");
document.writeln("				// Support: Firefox 20+");
document.writeln("				// Firefox doesn\'t alert if the returnValue field is not set.");
document.writeln("				if ( event.result !== undefined && event.originalEvent ) {");
document.writeln("					event.originalEvent.returnValue = event.result;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// Piggyback on a donor event to simulate a different one");
document.writeln("	simulate: function( type, elem, event ) {");
document.writeln("		var e = jQuery.extend(");
document.writeln("			new jQuery.Event(),");
document.writeln("			event,");
document.writeln("			{");
document.writeln("				type: type,");
document.writeln("				isSimulated: true");
document.writeln("");
document.writeln("				// Previously, `originalEvent: {}` was set here, so stopPropagation call");
document.writeln("				// would not be triggered on donor event, since in our own");
document.writeln("				// jQuery.event.stopPropagation function we had a check for existence of");
document.writeln("				// originalEvent.stopPropagation method, so, consequently it would be a noop.");
document.writeln("				//");
document.writeln("				// Guard for simulated events was moved to jQuery.event.stopPropagation function");
document.writeln("				// since `originalEvent` should point to the original event for the");
document.writeln("				// constancy with other events and for more focused logic");
document.writeln("			}");
document.writeln("		);");
document.writeln("");
document.writeln("		jQuery.event.trigger( e, null, elem );");
document.writeln("");
document.writeln("		if ( e.isDefaultPrevented() ) {");
document.writeln("			event.preventDefault();");
document.writeln("		}");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.removeEvent = document.removeEventListener ?");
document.writeln("	function( elem, type, handle ) {");
document.writeln("");
document.writeln("		// This \'if\' is needed for plain objects");
document.writeln("		if ( elem.removeEventListener ) {");
document.writeln("			elem.removeEventListener( type, handle );");
document.writeln("		}");
document.writeln("	} :");
document.writeln("	function( elem, type, handle ) {");
document.writeln("		var name = \'on\' + type;");
document.writeln("");
document.writeln("		if ( elem.detachEvent ) {");
document.writeln("");
document.writeln("			// #8545, #7054, preventing memory leaks for custom events in IE6-8");
document.writeln("			// detachEvent needed property on element, by name of that event,");
document.writeln("			// to properly expose it to GC");
document.writeln("			if ( typeof elem[ name ] === \'undefined\' ) {");
document.writeln("				elem[ name ] = null;");
document.writeln("			}");
document.writeln("");
document.writeln("			elem.detachEvent( name, handle );");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("jQuery.Event = function( src, props ) {");
document.writeln("");
document.writeln("	// Allow instantiation without the \'new\' keyword");
document.writeln("	if ( !( this instanceof jQuery.Event ) ) {");
document.writeln("		return new jQuery.Event( src, props );");
document.writeln("	}");
document.writeln("");
document.writeln("	// Event object");
document.writeln("	if ( src && src.type ) {");
document.writeln("		this.originalEvent = src;");
document.writeln("		this.type = src.type;");
document.writeln("");
document.writeln("		// Events bubbling up the document may have been marked as prevented");
document.writeln("		// by a handler lower down the tree; reflect the correct value.");
document.writeln("		this.isDefaultPrevented = src.defaultPrevented ||");
document.writeln("				src.defaultPrevented === undefined &&");
document.writeln("");
document.writeln("				// Support: IE < 9, Android < 4.0");
document.writeln("				src.returnValue === false ?");
document.writeln("			returnTrue :");
document.writeln("			returnFalse;");
document.writeln("");
document.writeln("	// Event type");
document.writeln("	} else {");
document.writeln("		this.type = src;");
document.writeln("	}");
document.writeln("");
document.writeln("	// Put explicitly provided properties onto the event object");
document.writeln("	if ( props ) {");
document.writeln("		jQuery.extend( this, props );");
document.writeln("	}");
document.writeln("");
document.writeln("	// Create a timestamp if incoming event doesn\'t have one");
document.writeln("	this.timeStamp = src && src.timeStamp || jQuery.now();");
document.writeln("");
document.writeln("	// Mark it as fixed");
document.writeln("	this[ jQuery.expando ] = true;");
document.writeln("};");
document.writeln("");
document.writeln("// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding");
document.writeln("// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html");
document.writeln("jQuery.Event.prototype = {");
document.writeln("	constructor: jQuery.Event,");
document.writeln("	isDefaultPrevented: returnFalse,");
document.writeln("	isPropagationStopped: returnFalse,");
document.writeln("	isImmediatePropagationStopped: returnFalse,");
document.writeln("");
document.writeln("	preventDefault: function() {");
document.writeln("		var e = this.originalEvent;");
document.writeln("");
document.writeln("		this.isDefaultPrevented = returnTrue;");
document.writeln("		if ( !e ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// If preventDefault exists, run it on the original event");
document.writeln("		if ( e.preventDefault ) {");
document.writeln("			e.preventDefault();");
document.writeln("");
document.writeln("		// Support: IE");
document.writeln("		// Otherwise set the returnValue property of the original event to false");
document.writeln("		} else {");
document.writeln("			e.returnValue = false;");
document.writeln("		}");
document.writeln("	},");
document.writeln("	stopPropagation: function() {");
document.writeln("		var e = this.originalEvent;");
document.writeln("");
document.writeln("		this.isPropagationStopped = returnTrue;");
document.writeln("");
document.writeln("		if ( !e || this.isSimulated ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// If stopPropagation exists, run it on the original event");
document.writeln("		if ( e.stopPropagation ) {");
document.writeln("			e.stopPropagation();");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE");
document.writeln("		// Set the cancelBubble property of the original event to true");
document.writeln("		e.cancelBubble = true;");
document.writeln("	},");
document.writeln("	stopImmediatePropagation: function() {");
document.writeln("		var e = this.originalEvent;");
document.writeln("");
document.writeln("		this.isImmediatePropagationStopped = returnTrue;");
document.writeln("");
document.writeln("		if ( e && e.stopImmediatePropagation ) {");
document.writeln("			e.stopImmediatePropagation();");
document.writeln("		}");
document.writeln("");
document.writeln("		this.stopPropagation();");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("// Create mouseenter/leave events using mouseover/out and event-time checks");
document.writeln("// so that event delegation works in jQuery.");
document.writeln("// Do the same for pointerenter/pointerleave and pointerover/pointerout");
document.writeln("//");
document.writeln("// Support: Safari 7 only");
document.writeln("// Safari sends mouseenter too often; see:");
document.writeln("// https://code.google.com/p/chromium/issues/detail?id=470258");
document.writeln("// for the description of the bug (it existed in older Chrome versions as well).");
document.writeln("jQuery.each( {");
document.writeln("	mouseenter: \'mouseover\',");
document.writeln("	mouseleave: \'mouseout\',");
document.writeln("	pointerenter: \'pointerover\',");
document.writeln("	pointerleave: \'pointerout\'");
document.writeln("}, function( orig, fix ) {");
document.writeln("	jQuery.event.special[ orig ] = {");
document.writeln("		delegateType: fix,");
document.writeln("		bindType: fix,");
document.writeln("");
document.writeln("		handle: function( event ) {");
document.writeln("			var ret,");
document.writeln("				target = this,");
document.writeln("				related = event.relatedTarget,");
document.writeln("				handleObj = event.handleObj;");
document.writeln("");
document.writeln("			// For mouseenter/leave call the handler if related is outside the target.");
document.writeln("			// NB: No relatedTarget if the mouse left/entered the browser window");
document.writeln("			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {");
document.writeln("				event.type = handleObj.origType;");
document.writeln("				ret = handleObj.handler.apply( this, arguments );");
document.writeln("				event.type = fix;");
document.writeln("			}");
document.writeln("			return ret;");
document.writeln("		}");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("// IE submit delegation");
document.writeln("if ( !support.submit ) {");
document.writeln("");
document.writeln("	jQuery.event.special.submit = {");
document.writeln("		setup: function() {");
document.writeln("");
document.writeln("			// Only need this for delegated form submit events");
document.writeln("			if ( jQuery.nodeName( this, \'form\' ) ) {");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Lazy-add a submit handler when a descendant form may potentially be submitted");
document.writeln("			jQuery.event.add( this, \'click._submit keypress._submit\', function( e ) {");
document.writeln("");
document.writeln("				// Node name check avoids a VML-related crash in IE (#9807)");
document.writeln("				var elem = e.target,");
document.writeln("					form = jQuery.nodeName( elem, \'input\' ) || jQuery.nodeName( elem, \'button\' ) ?");
document.writeln("");
document.writeln("						// Support: IE <=8");
document.writeln("						// We use jQuery.prop instead of elem.form");
document.writeln("						// to allow fixing the IE8 delegated submit issue (gh-2332)");
document.writeln("						// by 3rd party polyfills/workarounds.");
document.writeln("						jQuery.prop( elem, \'form\' ) :");
document.writeln("						undefined;");
document.writeln("");
document.writeln("				if ( form && !jQuery._data( form, \'submit\' ) ) {");
document.writeln("					jQuery.event.add( form, \'submit._submit\', function( event ) {");
document.writeln("						event._submitBubble = true;");
document.writeln("					} );");
document.writeln("					jQuery._data( form, \'submit\', true );");
document.writeln("				}");
document.writeln("			} );");
document.writeln("");
document.writeln("			// return undefined since we don\'t need an event listener");
document.writeln("		},");
document.writeln("");
document.writeln("		postDispatch: function( event ) {");
document.writeln("");
document.writeln("			// If form was submitted by the user, bubble the event up the tree");
document.writeln("			if ( event._submitBubble ) {");
document.writeln("				delete event._submitBubble;");
document.writeln("				if ( this.parentNode && !event.isTrigger ) {");
document.writeln("					jQuery.event.simulate( \'submit\', this.parentNode, event );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		},");
document.writeln("");
document.writeln("		teardown: function() {");
document.writeln("");
document.writeln("			// Only need this for delegated form submit events");
document.writeln("			if ( jQuery.nodeName( this, \'form\' ) ) {");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above");
document.writeln("			jQuery.event.remove( this, \'._submit\' );");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("// IE change delegation and checkbox/radio fix");
document.writeln("if ( !support.change ) {");
document.writeln("");
document.writeln("	jQuery.event.special.change = {");
document.writeln("");
document.writeln("		setup: function() {");
document.writeln("");
document.writeln("			if ( rformElems.test( this.nodeName ) ) {");
document.writeln("");
document.writeln("				// IE doesn\'t fire change on a check/radio until blur; trigger it on click");
document.writeln("				// after a propertychange. Eat the blur-change in special.change.handle.");
document.writeln("				// This still fires onchange a second time for check/radio after blur.");
document.writeln("				if ( this.type === \'checkbox\' || this.type === \'radio\' ) {");
document.writeln("					jQuery.event.add( this, \'propertychange._change\', function( event ) {");
document.writeln("						if ( event.originalEvent.propertyName === \'checked\' ) {");
document.writeln("							this._justChanged = true;");
document.writeln("						}");
document.writeln("					} );");
document.writeln("					jQuery.event.add( this, \'click._change\', function( event ) {");
document.writeln("						if ( this._justChanged && !event.isTrigger ) {");
document.writeln("							this._justChanged = false;");
document.writeln("						}");
document.writeln("");
document.writeln("						// Allow triggered, simulated change events (#11500)");
document.writeln("						jQuery.event.simulate( \'change\', this, event );");
document.writeln("					} );");
document.writeln("				}");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Delegated event; lazy-add a change handler on descendant inputs");
document.writeln("			jQuery.event.add( this, \'beforeactivate._change\', function( e ) {");
document.writeln("				var elem = e.target;");
document.writeln("");
document.writeln("				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \'change\' ) ) {");
document.writeln("					jQuery.event.add( elem, \'change._change\', function( event ) {");
document.writeln("						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {");
document.writeln("							jQuery.event.simulate( \'change\', this.parentNode, event );");
document.writeln("						}");
document.writeln("					} );");
document.writeln("					jQuery._data( elem, \'change\', true );");
document.writeln("				}");
document.writeln("			} );");
document.writeln("		},");
document.writeln("");
document.writeln("		handle: function( event ) {");
document.writeln("			var elem = event.target;");
document.writeln("");
document.writeln("			// Swallow native change events from checkbox/radio, we already triggered them above");
document.writeln("			if ( this !== elem || event.isSimulated || event.isTrigger ||");
document.writeln("				( elem.type !== \'radio\' && elem.type !== \'checkbox\' ) ) {");
document.writeln("");
document.writeln("				return event.handleObj.handler.apply( this, arguments );");
document.writeln("			}");
document.writeln("		},");
document.writeln("");
document.writeln("		teardown: function() {");
document.writeln("			jQuery.event.remove( this, \'._change\' );");
document.writeln("");
document.writeln("			return !rformElems.test( this.nodeName );");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("// Support: Firefox");
document.writeln("// Firefox doesn\'t have focus(in | out) events");
document.writeln("// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787");
document.writeln("//");
document.writeln("// Support: Chrome, Safari");
document.writeln("// focus(in | out) events fire after focus & blur events,");
document.writeln("// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order");
document.writeln("// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857");
document.writeln("if ( !support.focusin ) {");
document.writeln("	jQuery.each( { focus: \'focusin\', blur: \'focusout\' }, function( orig, fix ) {");
document.writeln("");
document.writeln("		// Attach a single capturing handler on the document while someone wants focusin/focusout");
document.writeln("		var handler = function( event ) {");
document.writeln("			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );");
document.writeln("		};");
document.writeln("");
document.writeln("		jQuery.event.special[ fix ] = {");
document.writeln("			setup: function() {");
document.writeln("				var doc = this.ownerDocument || this,");
document.writeln("					attaches = jQuery._data( doc, fix );");
document.writeln("");
document.writeln("				if ( !attaches ) {");
document.writeln("					doc.addEventListener( orig, handler, true );");
document.writeln("				}");
document.writeln("				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );");
document.writeln("			},");
document.writeln("			teardown: function() {");
document.writeln("				var doc = this.ownerDocument || this,");
document.writeln("					attaches = jQuery._data( doc, fix ) - 1;");
document.writeln("");
document.writeln("				if ( !attaches ) {");
document.writeln("					doc.removeEventListener( orig, handler, true );");
document.writeln("					jQuery._removeData( doc, fix );");
document.writeln("				} else {");
document.writeln("					jQuery._data( doc, fix, attaches );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		};");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("");
document.writeln("	on: function( types, selector, data, fn ) {");
document.writeln("		return on( this, types, selector, data, fn );");
document.writeln("	},");
document.writeln("	one: function( types, selector, data, fn ) {");
document.writeln("		return on( this, types, selector, data, fn, 1 );");
document.writeln("	},");
document.writeln("	off: function( types, selector, fn ) {");
document.writeln("		var handleObj, type;");
document.writeln("		if ( types && types.preventDefault && types.handleObj ) {");
document.writeln("");
document.writeln("			// ( event )  dispatched jQuery.Event");
document.writeln("			handleObj = types.handleObj;");
document.writeln("			jQuery( types.delegateTarget ).off(");
document.writeln("				handleObj.namespace ?");
document.writeln("					handleObj.origType + \'.\' + handleObj.namespace :");
document.writeln("					handleObj.origType,");
document.writeln("				handleObj.selector,");
document.writeln("				handleObj.handler");
document.writeln("			);");
document.writeln("			return this;");
document.writeln("		}");
document.writeln("		if ( typeof types === \'object\' ) {");
document.writeln("");
document.writeln("			// ( types-object [, selector] )");
document.writeln("			for ( type in types ) {");
document.writeln("				this.off( type, selector, types[ type ] );");
document.writeln("			}");
document.writeln("			return this;");
document.writeln("		}");
document.writeln("		if ( selector === false || typeof selector === \'function\' ) {");
document.writeln("");
document.writeln("			// ( types [, fn] )");
document.writeln("			fn = selector;");
document.writeln("			selector = undefined;");
document.writeln("		}");
document.writeln("		if ( fn === false ) {");
document.writeln("			fn = returnFalse;");
document.writeln("		}");
document.writeln("		return this.each( function() {");
document.writeln("			jQuery.event.remove( this, types, fn, selector );");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	trigger: function( type, data ) {");
document.writeln("		return this.each( function() {");
document.writeln("			jQuery.event.trigger( type, data, this );");
document.writeln("		} );");
document.writeln("	},");
document.writeln("	triggerHandler: function( type, data ) {");
document.writeln("		var elem = this[ 0 ];");
document.writeln("		if ( elem ) {");
document.writeln("			return jQuery.event.trigger( type, data, elem, true );");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("var rinlinejQuery = / jQuery\/\/d+=\'(?:null|\/\/d+)\'/g,");
document.writeln("	rnoshimcache = new RegExp( \'<(?:\' + nodeNames + \')[\/\/\/\/s/>]\', \'i\' ),");
document.writeln("	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\/\/w:-]+)[^>]*)\/\//>/gi,");
document.writeln("");
document.writeln("	// Support: IE 10-11, Edge 10240+");
document.writeln("	// In IE/Edge using regex groups here causes severe slowdowns.");
document.writeln("	// See https://connect.microsoft.com/IE/feedback/details/1736512/");
document.writeln("	rnoInnerhtml = /<script|<style|<link/i,");
document.writeln("");
document.writeln("	// checked=\'checked\' or checked");
document.writeln("	rchecked = /checked\/\/s*(?:[^=]|=\/\/s*.checked.)/i,");
document.writeln("	rscriptTypeMasked = /^true\/\//(.*)/,");
document.writeln("	rcleanScript = /^\/\/s*<!(?:\/\/[CDATA\/\/[|--)|(?:\/\/]\/\/]|--)>\/\/s*$/g,");
document.writeln("	safeFragment = createSafeFragment( document ),");
document.writeln("	fragmentDiv = safeFragment.appendChild( document.createElement( \'div\' ) );");
document.writeln("");
document.writeln("// Support: IE<8");
document.writeln("// Manipulating tables requires a tbody");
document.writeln("function manipulationTarget( elem, content ) {");
document.writeln("	return jQuery.nodeName( elem, \'table\' ) &&");
document.writeln("		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \'tr\' ) ?");
document.writeln("");
document.writeln("		elem.getElementsByTagName( \'tbody\' )[ 0 ] ||");
document.writeln("			elem.appendChild( elem.ownerDocument.createElement( \'tbody\' ) ) :");
document.writeln("		elem;");
document.writeln("}");
document.writeln("");
document.writeln("// Replace/restore the type attribute of script elements for safe DOM manipulation");
document.writeln("function disableScript( elem ) {");
document.writeln("	elem.type = ( jQuery.find.attr( elem, \'type\' ) !== null ) + \'/\' + elem.type;");
document.writeln("	return elem;");
document.writeln("}");
document.writeln("function restoreScript( elem ) {");
document.writeln("	var match = rscriptTypeMasked.exec( elem.type );");
document.writeln("	if ( match ) {");
document.writeln("		elem.type = match[ 1 ];");
document.writeln("	} else {");
document.writeln("		elem.removeAttribute( \'type\' );");
document.writeln("	}");
document.writeln("	return elem;");
document.writeln("}");
document.writeln("");
document.writeln("function cloneCopyEvent( src, dest ) {");
document.writeln("	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	var type, i, l,");
document.writeln("		oldData = jQuery._data( src ),");
document.writeln("		curData = jQuery._data( dest, oldData ),");
document.writeln("		events = oldData.events;");
document.writeln("");
document.writeln("	if ( events ) {");
document.writeln("		delete curData.handle;");
document.writeln("		curData.events = {};");
document.writeln("");
document.writeln("		for ( type in events ) {");
document.writeln("			for ( i = 0, l = events[ type ].length; i < l; i++ ) {");
document.writeln("				jQuery.event.add( dest, type, events[ type ][ i ] );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// make the cloned public data object a copy from the original");
document.writeln("	if ( curData.data ) {");
document.writeln("		curData.data = jQuery.extend( {}, curData.data );");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function fixCloneNodeIssues( src, dest ) {");
document.writeln("	var nodeName, e, data;");
document.writeln("");
document.writeln("	// We do not need to do anything for non-Elements");
document.writeln("	if ( dest.nodeType !== 1 ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	nodeName = dest.nodeName.toLowerCase();");
document.writeln("");
document.writeln("	// IE6-8 copies events bound via attachEvent when using cloneNode.");
document.writeln("	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {");
document.writeln("		data = jQuery._data( dest );");
document.writeln("");
document.writeln("		for ( e in data.events ) {");
document.writeln("			jQuery.removeEvent( dest, e, data.handle );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Event data gets referenced instead of copied if the expando gets copied too");
document.writeln("		dest.removeAttribute( jQuery.expando );");
document.writeln("	}");
document.writeln("");
document.writeln("	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text");
document.writeln("	if ( nodeName === \'script\' && dest.text !== src.text ) {");
document.writeln("		disableScript( dest ).text = src.text;");
document.writeln("		restoreScript( dest );");
document.writeln("");
document.writeln("	// IE6-10 improperly clones children of object elements using classid.");
document.writeln("	// IE10 throws NoModificationAllowedError if parent is null, #12132.");
document.writeln("	} else if ( nodeName === \'object\' ) {");
document.writeln("		if ( dest.parentNode ) {");
document.writeln("			dest.outerHTML = src.outerHTML;");
document.writeln("		}");
document.writeln("");
document.writeln("		// This path appears unavoidable for IE9. When cloning an object");
document.writeln("		// element in IE9, the outerHTML strategy above is not sufficient.");
document.writeln("		// If the src has innerHTML and the destination does not,");
document.writeln("		// copy the src.innerHTML into the dest.innerHTML. #10324");
document.writeln("		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {");
document.writeln("			dest.innerHTML = src.innerHTML;");
document.writeln("		}");
document.writeln("");
document.writeln("	} else if ( nodeName === \'input\' && rcheckableType.test( src.type ) ) {");
document.writeln("");
document.writeln("		// IE6-8 fails to persist the checked state of a cloned checkbox");
document.writeln("		// or radio button. Worse, IE6-7 fail to give the cloned element");
document.writeln("		// a checked appearance if the defaultChecked value isn\'t also set");
document.writeln("");
document.writeln("		dest.defaultChecked = dest.checked = src.checked;");
document.writeln("");
document.writeln("		// IE6-7 get confused and end up setting the value of a cloned");
document.writeln("		// checkbox/radio button to an empty string instead of \'on\'");
document.writeln("		if ( dest.value !== src.value ) {");
document.writeln("			dest.value = src.value;");
document.writeln("		}");
document.writeln("");
document.writeln("	// IE6-8 fails to return the selected option to the default selected");
document.writeln("	// state when cloning options");
document.writeln("	} else if ( nodeName === \'option\' ) {");
document.writeln("		dest.defaultSelected = dest.selected = src.defaultSelected;");
document.writeln("");
document.writeln("	// IE6-8 fails to set the defaultValue to the correct value when");
document.writeln("	// cloning other types of input fields");
document.writeln("	} else if ( nodeName === \'input\' || nodeName === \'textarea\' ) {");
document.writeln("		dest.defaultValue = src.defaultValue;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function domManip( collection, args, callback, ignored ) {");
document.writeln("");
document.writeln("	// Flatten any nested arrays");
document.writeln("	args = concat.apply( [], args );");
document.writeln("");
document.writeln("	var first, node, hasScripts,");
document.writeln("		scripts, doc, fragment,");
document.writeln("		i = 0,");
document.writeln("		l = collection.length,");
document.writeln("		iNoClone = l - 1,");
document.writeln("		value = args[ 0 ],");
document.writeln("		isFunction = jQuery.isFunction( value );");
document.writeln("");
document.writeln("	// We can\'t cloneNode fragments that contain checked, in WebKit");
document.writeln("	if ( isFunction ||");
document.writeln("			( l > 1 && typeof value === \'string\' &&");
document.writeln("				!support.checkClone && rchecked.test( value ) ) ) {");
document.writeln("		return collection.each( function( index ) {");
document.writeln("			var self = collection.eq( index );");
document.writeln("			if ( isFunction ) {");
document.writeln("				args[ 0 ] = value.call( this, index, self.html() );");
document.writeln("			}");
document.writeln("			domManip( self, args, callback, ignored );");
document.writeln("		} );");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( l ) {");
document.writeln("		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );");
document.writeln("		first = fragment.firstChild;");
document.writeln("");
document.writeln("		if ( fragment.childNodes.length === 1 ) {");
document.writeln("			fragment = first;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Require either new content or an interest in ignored elements to invoke the callback");
document.writeln("		if ( first || ignored ) {");
document.writeln("			scripts = jQuery.map( getAll( fragment, \'script\' ), disableScript );");
document.writeln("			hasScripts = scripts.length;");
document.writeln("");
document.writeln("			// Use the original fragment for the last item");
document.writeln("			// instead of the first because it can end up");
document.writeln("			// being emptied incorrectly in certain situations (#8070).");
document.writeln("			for ( ; i < l; i++ ) {");
document.writeln("				node = fragment;");
document.writeln("");
document.writeln("				if ( i !== iNoClone ) {");
document.writeln("					node = jQuery.clone( node, true, true );");
document.writeln("");
document.writeln("					// Keep references to cloned scripts for later restoration");
document.writeln("					if ( hasScripts ) {");
document.writeln("");
document.writeln("						// Support: Android<4.1, PhantomJS<2");
document.writeln("						// push.apply(_, arraylike) throws on ancient WebKit");
document.writeln("						jQuery.merge( scripts, getAll( node, \'script\' ) );");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				callback.call( collection[ i ], node, i );");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( hasScripts ) {");
document.writeln("				doc = scripts[ scripts.length - 1 ].ownerDocument;");
document.writeln("");
document.writeln("				// Reenable scripts");
document.writeln("				jQuery.map( scripts, restoreScript );");
document.writeln("");
document.writeln("				// Evaluate executable scripts on first document insertion");
document.writeln("				for ( i = 0; i < hasScripts; i++ ) {");
document.writeln("					node = scripts[ i ];");
document.writeln("					if ( rscriptType.test( node.type || \'\' ) &&");
document.writeln("						!jQuery._data( node, \'globalEval\' ) &&");
document.writeln("						jQuery.contains( doc, node ) ) {");
document.writeln("");
document.writeln("						if ( node.src ) {");
document.writeln("");
document.writeln("							// Optional AJAX dependency, but won\'t run scripts if not present");
document.writeln("							if ( jQuery._evalUrl ) {");
document.writeln("								jQuery._evalUrl( node.src );");
document.writeln("							}");
document.writeln("						} else {");
document.writeln("							jQuery.globalEval(");
document.writeln("								( node.text || node.textContent || node.innerHTML || \'\' )");
document.writeln("									.replace( rcleanScript, \'\' )");
document.writeln("							);");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Fix #11809: Avoid leaking memory");
document.writeln("			fragment = first = null;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return collection;");
document.writeln("}");
document.writeln("");
document.writeln("function remove( elem, selector, keepData ) {");
document.writeln("	var node,");
document.writeln("		elems = selector ? jQuery.filter( selector, elem ) : elem,");
document.writeln("		i = 0;");
document.writeln("");
document.writeln("	for ( ; ( node = elems[ i ] ) != null; i++ ) {");
document.writeln("");
document.writeln("		if ( !keepData && node.nodeType === 1 ) {");
document.writeln("			jQuery.cleanData( getAll( node ) );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( node.parentNode ) {");
document.writeln("			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {");
document.writeln("				setGlobalEval( getAll( node, \'script\' ) );");
document.writeln("			}");
document.writeln("			node.parentNode.removeChild( node );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return elem;");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	htmlPrefilter: function( html ) {");
document.writeln("		return html.replace( rxhtmlTag, \'<$1></$2>\' );");
document.writeln("	},");
document.writeln("");
document.writeln("	clone: function( elem, dataAndEvents, deepDataAndEvents ) {");
document.writeln("		var destElements, node, clone, i, srcElements,");
document.writeln("			inPage = jQuery.contains( elem.ownerDocument, elem );");
document.writeln("");
document.writeln("		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||");
document.writeln("			!rnoshimcache.test( \'<\' + elem.nodeName + \'>\' ) ) {");
document.writeln("");
document.writeln("			clone = elem.cloneNode( true );");
document.writeln("");
document.writeln("		// IE<=8 does not properly clone detached, unknown element nodes");
document.writeln("		} else {");
document.writeln("			fragmentDiv.innerHTML = elem.outerHTML;");
document.writeln("			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&");
document.writeln("				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {");
document.writeln("");
document.writeln("			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2");
document.writeln("			destElements = getAll( clone );");
document.writeln("			srcElements = getAll( elem );");
document.writeln("");
document.writeln("			// Fix all IE cloning issues");
document.writeln("			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {");
document.writeln("");
document.writeln("				// Ensure that the destination node is not null; Fixes #9587");
document.writeln("				if ( destElements[ i ] ) {");
document.writeln("					fixCloneNodeIssues( node, destElements[ i ] );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Copy the events from the original to the clone");
document.writeln("		if ( dataAndEvents ) {");
document.writeln("			if ( deepDataAndEvents ) {");
document.writeln("				srcElements = srcElements || getAll( elem );");
document.writeln("				destElements = destElements || getAll( clone );");
document.writeln("");
document.writeln("				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {");
document.writeln("					cloneCopyEvent( node, destElements[ i ] );");
document.writeln("				}");
document.writeln("			} else {");
document.writeln("				cloneCopyEvent( elem, clone );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Preserve script evaluation history");
document.writeln("		destElements = getAll( clone, \'script\' );");
document.writeln("		if ( destElements.length > 0 ) {");
document.writeln("			setGlobalEval( destElements, !inPage && getAll( elem, \'script\' ) );");
document.writeln("		}");
document.writeln("");
document.writeln("		destElements = srcElements = node = null;");
document.writeln("");
document.writeln("		// Return the cloned set");
document.writeln("		return clone;");
document.writeln("	},");
document.writeln("");
document.writeln("	cleanData: function( elems, /* internal */ forceAcceptData ) {");
document.writeln("		var elem, type, id, data,");
document.writeln("			i = 0,");
document.writeln("			internalKey = jQuery.expando,");
document.writeln("			cache = jQuery.cache,");
document.writeln("			attributes = support.attributes,");
document.writeln("			special = jQuery.event.special;");
document.writeln("");
document.writeln("		for ( ; ( elem = elems[ i ] ) != null; i++ ) {");
document.writeln("			if ( forceAcceptData || acceptData( elem ) ) {");
document.writeln("");
document.writeln("				id = elem[ internalKey ];");
document.writeln("				data = id && cache[ id ];");
document.writeln("");
document.writeln("				if ( data ) {");
document.writeln("					if ( data.events ) {");
document.writeln("						for ( type in data.events ) {");
document.writeln("							if ( special[ type ] ) {");
document.writeln("								jQuery.event.remove( elem, type );");
document.writeln("");
document.writeln("							// This is a shortcut to avoid jQuery.event.remove\'s overhead");
document.writeln("							} else {");
document.writeln("								jQuery.removeEvent( elem, type, data.handle );");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// Remove cache only if it was not already removed by jQuery.event.remove");
document.writeln("					if ( cache[ id ] ) {");
document.writeln("");
document.writeln("						delete cache[ id ];");
document.writeln("");
document.writeln("						// Support: IE<9");
document.writeln("						// IE does not allow us to delete expando properties from nodes");
document.writeln("						// IE creates expando attributes along with the property");
document.writeln("						// IE does not have a removeAttribute function on Document nodes");
document.writeln("						if ( !attributes && typeof elem.removeAttribute !== \'undefined\' ) {");
document.writeln("							elem.removeAttribute( internalKey );");
document.writeln("");
document.writeln("						// Webkit & Blink performance suffers when deleting properties");
document.writeln("						// from DOM nodes, so set to undefined instead");
document.writeln("						// https://code.google.com/p/chromium/issues/detail?id=378607");
document.writeln("						} else {");
document.writeln("							elem[ internalKey ] = undefined;");
document.writeln("						}");
document.writeln("");
document.writeln("						deletedIds.push( id );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("");
document.writeln("	// Keep domManip exposed until 3.0 (gh-2225)");
document.writeln("	domManip: domManip,");
document.writeln("");
document.writeln("	detach: function( selector ) {");
document.writeln("		return remove( this, selector, true );");
document.writeln("	},");
document.writeln("");
document.writeln("	remove: function( selector ) {");
document.writeln("		return remove( this, selector );");
document.writeln("	},");
document.writeln("");
document.writeln("	text: function( value ) {");
document.writeln("		return access( this, function( value ) {");
document.writeln("			return value === undefined ?");
document.writeln("				jQuery.text( this ) :");
document.writeln("				this.empty().append(");
document.writeln("					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )");
document.writeln("				);");
document.writeln("		}, null, value, arguments.length );");
document.writeln("	},");
document.writeln("");
document.writeln("	append: function() {");
document.writeln("		return domManip( this, arguments, function( elem ) {");
document.writeln("			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {");
document.writeln("				var target = manipulationTarget( this, elem );");
document.writeln("				target.appendChild( elem );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	prepend: function() {");
document.writeln("		return domManip( this, arguments, function( elem ) {");
document.writeln("			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {");
document.writeln("				var target = manipulationTarget( this, elem );");
document.writeln("				target.insertBefore( elem, target.firstChild );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	before: function() {");
document.writeln("		return domManip( this, arguments, function( elem ) {");
document.writeln("			if ( this.parentNode ) {");
document.writeln("				this.parentNode.insertBefore( elem, this );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	after: function() {");
document.writeln("		return domManip( this, arguments, function( elem ) {");
document.writeln("			if ( this.parentNode ) {");
document.writeln("				this.parentNode.insertBefore( elem, this.nextSibling );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	empty: function() {");
document.writeln("		var elem,");
document.writeln("			i = 0;");
document.writeln("");
document.writeln("		for ( ; ( elem = this[ i ] ) != null; i++ ) {");
document.writeln("");
document.writeln("			// Remove element nodes and prevent memory leaks");
document.writeln("			if ( elem.nodeType === 1 ) {");
document.writeln("				jQuery.cleanData( getAll( elem, false ) );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Remove any remaining nodes");
document.writeln("			while ( elem.firstChild ) {");
document.writeln("				elem.removeChild( elem.firstChild );");
document.writeln("			}");
document.writeln("");
document.writeln("			// If this is a select, ensure that it displays empty (#12336)");
document.writeln("			// Support: IE<9");
document.writeln("			if ( elem.options && jQuery.nodeName( elem, \'select\' ) ) {");
document.writeln("				elem.options.length = 0;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return this;");
document.writeln("	},");
document.writeln("");
document.writeln("	clone: function( dataAndEvents, deepDataAndEvents ) {");
document.writeln("		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;");
document.writeln("		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;");
document.writeln("");
document.writeln("		return this.map( function() {");
document.writeln("			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	html: function( value ) {");
document.writeln("		return access( this, function( value ) {");
document.writeln("			var elem = this[ 0 ] || {},");
document.writeln("				i = 0,");
document.writeln("				l = this.length;");
document.writeln("");
document.writeln("			if ( value === undefined ) {");
document.writeln("				return elem.nodeType === 1 ?");
document.writeln("					elem.innerHTML.replace( rinlinejQuery, \'\' ) :");
document.writeln("					undefined;");
document.writeln("			}");
document.writeln("");
document.writeln("			// See if we can take a shortcut and just use innerHTML");
document.writeln("			if ( typeof value === \'string\' && !rnoInnerhtml.test( value ) &&");
document.writeln("				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&");
document.writeln("				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&");
document.writeln("				!wrapMap[ ( rtagName.exec( value ) || [ \'\', \'\' ] )[ 1 ].toLowerCase() ] ) {");
document.writeln("");
document.writeln("				value = jQuery.htmlPrefilter( value );");
document.writeln("");
document.writeln("				try {");
document.writeln("					for ( ; i < l; i++ ) {");
document.writeln("");
document.writeln("						// Remove element nodes and prevent memory leaks");
document.writeln("						elem = this[ i ] || {};");
document.writeln("						if ( elem.nodeType === 1 ) {");
document.writeln("							jQuery.cleanData( getAll( elem, false ) );");
document.writeln("							elem.innerHTML = value;");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					elem = 0;");
document.writeln("");
document.writeln("				// If using innerHTML throws an exception, use the fallback method");
document.writeln("				} catch ( e ) {}");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( elem ) {");
document.writeln("				this.empty().append( value );");
document.writeln("			}");
document.writeln("		}, null, value, arguments.length );");
document.writeln("	},");
document.writeln("");
document.writeln("	replaceWith: function() {");
document.writeln("		var ignored = [];");
document.writeln("");
document.writeln("		// Make the changes, replacing each non-ignored context element with the new content");
document.writeln("		return domManip( this, arguments, function( elem ) {");
document.writeln("			var parent = this.parentNode;");
document.writeln("");
document.writeln("			if ( jQuery.inArray( this, ignored ) < 0 ) {");
document.writeln("				jQuery.cleanData( getAll( this ) );");
document.writeln("				if ( parent ) {");
document.writeln("					parent.replaceChild( elem, this );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("		// Force callback invocation");
document.writeln("		}, ignored );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.each( {");
document.writeln("	appendTo: \'append\',");
document.writeln("	prependTo: \'prepend\',");
document.writeln("	insertBefore: \'before\',");
document.writeln("	insertAfter: \'after\',");
document.writeln("	replaceAll: \'replaceWith\'");
document.writeln("}, function( name, original ) {");
document.writeln("	jQuery.fn[ name ] = function( selector ) {");
document.writeln("		var elems,");
document.writeln("			i = 0,");
document.writeln("			ret = [],");
document.writeln("			insert = jQuery( selector ),");
document.writeln("			last = insert.length - 1;");
document.writeln("");
document.writeln("		for ( ; i <= last; i++ ) {");
document.writeln("			elems = i === last ? this : this.clone( true );");
document.writeln("			jQuery( insert[ i ] )[ original ]( elems );");
document.writeln("");
document.writeln("			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()");
document.writeln("			push.apply( ret, elems.get() );");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.pushStack( ret );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("var iframe,");
document.writeln("	elemdisplay = {");
document.writeln("");
document.writeln("		// Support: Firefox");
document.writeln("		// We have to pre-define these values for FF (#10227)");
document.writeln("		HTML: \'block\',");
document.writeln("		BODY: \'block\'");
document.writeln("	};");
document.writeln("");
document.writeln("/**");
document.writeln(" * Retrieve the actual display of a element");
document.writeln(" * @param {String} name nodeName of the element");
document.writeln(" * @param {Object} doc Document object");
document.writeln(" */");
document.writeln("");
document.writeln("// Called only from within defaultDisplay");
document.writeln("function actualDisplay( name, doc ) {");
document.writeln("	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),");
document.writeln("");
document.writeln("		display = jQuery.css( elem[ 0 ], \'display\' );");
document.writeln("");
document.writeln("	// We don\'t have any data stored on the element,");
document.writeln("	// so use \'detach\' method as fast way to get rid of the element");
document.writeln("	elem.detach();");
document.writeln("");
document.writeln("	return display;");
document.writeln("}");
document.writeln("");
document.writeln("/**");
document.writeln(" * Try to determine the default display value of an element");
document.writeln(" * @param {String} nodeName");
document.writeln(" */");
document.writeln("function defaultDisplay( nodeName ) {");
document.writeln("	var doc = document,");
document.writeln("		display = elemdisplay[ nodeName ];");
document.writeln("");
document.writeln("	if ( !display ) {");
document.writeln("		display = actualDisplay( nodeName, doc );");
document.writeln("");
document.writeln("		// If the simple way fails, read from inside an iframe");
document.writeln("		if ( display === \'none\' || !display ) {");
document.writeln("");
document.writeln("			// Use the already-created iframe if possible");
document.writeln("			iframe = ( iframe || jQuery( \'<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>\' ) )");
document.writeln("				.appendTo( doc.documentElement );");
document.writeln("");
document.writeln("			// Always write a new HTML skeleton so Webkit and Firefox don\'t choke on reuse");
document.writeln("			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;");
document.writeln("");
document.writeln("			// Support: IE");
document.writeln("			doc.write();");
document.writeln("			doc.close();");
document.writeln("");
document.writeln("			display = actualDisplay( nodeName, doc );");
document.writeln("			iframe.detach();");
document.writeln("		}");
document.writeln("");
document.writeln("		// Store the correct default display");
document.writeln("		elemdisplay[ nodeName ] = display;");
document.writeln("	}");
document.writeln("");
document.writeln("	return display;");
document.writeln("}");
document.writeln("var rmargin = ( /^margin/ );");
document.writeln("");
document.writeln("var rnumnonpx = new RegExp( \'^(\' + pnum + \')(?!px)[a-z%]+$\', \'i\' );");
document.writeln("");
document.writeln("var swap = function( elem, options, callback, args ) {");
document.writeln("	var ret, name,");
document.writeln("		old = {};");
document.writeln("");
document.writeln("	// Remember the old values, and insert the new ones");
document.writeln("	for ( name in options ) {");
document.writeln("		old[ name ] = elem.style[ name ];");
document.writeln("		elem.style[ name ] = options[ name ];");
document.writeln("	}");
document.writeln("");
document.writeln("	ret = callback.apply( elem, args || [] );");
document.writeln("");
document.writeln("	// Revert the old values");
document.writeln("	for ( name in options ) {");
document.writeln("		elem.style[ name ] = old[ name ];");
document.writeln("	}");
document.writeln("");
document.writeln("	return ret;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("var documentElement = document.documentElement;");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,");
document.writeln("		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,");
document.writeln("		container = document.createElement( \'div\' ),");
document.writeln("		div = document.createElement( \'div\' );");
document.writeln("");
document.writeln("	// Finish early in limited (non-browser) environments");
document.writeln("	if ( !div.style ) {");
document.writeln("		return;");
document.writeln("	}");
document.writeln("");
document.writeln("	div.style.cssText = \'float:left;opacity:.5\';");
document.writeln("");
document.writeln("	// Support: IE<9");
document.writeln("	// Make sure that element opacity exists (as opposed to filter)");
document.writeln("	support.opacity = div.style.opacity === \'0.5\';");
document.writeln("");
document.writeln("	// Verify style float existence");
document.writeln("	// (IE uses styleFloat instead of cssFloat)");
document.writeln("	support.cssFloat = !!div.style.cssFloat;");
document.writeln("");
document.writeln("	div.style.backgroundClip = \'content-box\';");
document.writeln("	div.cloneNode( true ).style.backgroundClip = \'\';");
document.writeln("	support.clearCloneStyle = div.style.backgroundClip === \'content-box\';");
document.writeln("");
document.writeln("	container = document.createElement( \'div\' );");
document.writeln("	container.style.cssText = \'border:0;width:8px;height:0;top:0;left:-9999px;\' +");
document.writeln("		\'padding:0;margin-top:1px;position:absolute\';");
document.writeln("	div.innerHTML = \'\';");
document.writeln("	container.appendChild( div );");
document.writeln("");
document.writeln("	// Support: Firefox<29, Android 2.3");
document.writeln("	// Vendor-prefix box-sizing");
document.writeln("	support.boxSizing = div.style.boxSizing === \'\' || div.style.MozBoxSizing === \'\' ||");
document.writeln("		div.style.WebkitBoxSizing === \'\';");
document.writeln("");
document.writeln("	jQuery.extend( support, {");
document.writeln("		reliableHiddenOffsets: function() {");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return reliableHiddenOffsetsVal;");
document.writeln("		},");
document.writeln("");
document.writeln("		boxSizingReliable: function() {");
document.writeln("");
document.writeln("			// We\'re checking for pixelPositionVal here instead of boxSizingReliableVal");
document.writeln("			// since that compresses better and they\'re computed together anyway.");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return boxSizingReliableVal;");
document.writeln("		},");
document.writeln("");
document.writeln("		pixelMarginRight: function() {");
document.writeln("");
document.writeln("			// Support: Android 4.0-4.3");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return pixelMarginRightVal;");
document.writeln("		},");
document.writeln("");
document.writeln("		pixelPosition: function() {");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return pixelPositionVal;");
document.writeln("		},");
document.writeln("");
document.writeln("		reliableMarginRight: function() {");
document.writeln("");
document.writeln("			// Support: Android 2.3");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return reliableMarginRightVal;");
document.writeln("		},");
document.writeln("");
document.writeln("		reliableMarginLeft: function() {");
document.writeln("");
document.writeln("			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37");
document.writeln("			if ( pixelPositionVal == null ) {");
document.writeln("				computeStyleTests();");
document.writeln("			}");
document.writeln("			return reliableMarginLeftVal;");
document.writeln("		}");
document.writeln("	} );");
document.writeln("");
document.writeln("	function computeStyleTests() {");
document.writeln("		var contents, divStyle,");
document.writeln("			documentElement = document.documentElement;");
document.writeln("");
document.writeln("		// Setup");
document.writeln("		documentElement.appendChild( container );");
document.writeln("");
document.writeln("		div.style.cssText =");
document.writeln("");
document.writeln("			// Support: Android 2.3");
document.writeln("			// Vendor-prefix box-sizing");
document.writeln("			\'-webkit-box-sizing:border-box;box-sizing:border-box;\' +");
document.writeln("			\'position:relative;display:block;\' +");
document.writeln("			\'margin:auto;border:1px;padding:1px;\' +");
document.writeln("			\'top:1%;width:50%\';");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// Assume reasonable values in the absence of getComputedStyle");
document.writeln("		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;");
document.writeln("		pixelMarginRightVal = reliableMarginRightVal = true;");
document.writeln("");
document.writeln("		// Check for getComputedStyle so that this code is not run in IE<9.");
document.writeln("		if ( window.getComputedStyle ) {");
document.writeln("			divStyle = window.getComputedStyle( div );");
document.writeln("			pixelPositionVal = ( divStyle || {} ).top !== \'1%\';");
document.writeln("			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === \'2px\';");
document.writeln("			boxSizingReliableVal = ( divStyle || { width: \'4px\' } ).width === \'4px\';");
document.writeln("");
document.writeln("			// Support: Android 4.0 - 4.3 only");
document.writeln("			// Some styles come back with percentage values, even though they shouldn\'t");
document.writeln("			div.style.marginRight = \'50%\';");
document.writeln("			pixelMarginRightVal = ( divStyle || { marginRight: \'4px\' } ).marginRight === \'4px\';");
document.writeln("");
document.writeln("			// Support: Android 2.3 only");
document.writeln("			// Div with explicit width and no margin-right incorrectly");
document.writeln("			// gets computed margin-right based on width of container (#3333)");
document.writeln("			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right");
document.writeln("			contents = div.appendChild( document.createElement( \'div\' ) );");
document.writeln("");
document.writeln("			// Reset CSS: box-sizing; display; margin; border; padding");
document.writeln("			contents.style.cssText = div.style.cssText =");
document.writeln("");
document.writeln("				// Support: Android 2.3");
document.writeln("				// Vendor-prefix box-sizing");
document.writeln("				\'-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\' +");
document.writeln("				\'box-sizing:content-box;display:block;margin:0;border:0;padding:0\';");
document.writeln("			contents.style.marginRight = contents.style.width = \'0\';");
document.writeln("			div.style.width = \'1px\';");
document.writeln("");
document.writeln("			reliableMarginRightVal =");
document.writeln("				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );");
document.writeln("");
document.writeln("			div.removeChild( contents );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE6-8");
document.writeln("		// First check that getClientRects works as expected");
document.writeln("		// Check if table cells still have offsetWidth/Height when they are set");
document.writeln("		// to display:none and there are still other visible table cells in a");
document.writeln("		// table row; if so, offsetWidth/Height are not reliable for use when");
document.writeln("		// determining if an element has been hidden directly using");
document.writeln("		// display:none (it is still safe to use offsets if a parent element is");
document.writeln("		// hidden; don safety goggles and see bug #4512 for more information).");
document.writeln("		div.style.display = \'none\';");
document.writeln("		reliableHiddenOffsetsVal = div.getClientRects().length === 0;");
document.writeln("		if ( reliableHiddenOffsetsVal ) {");
document.writeln("			div.style.display = \'\';");
document.writeln("			div.innerHTML = \'<table><tr><td></td><td>t</td></tr></table>\';");
document.writeln("			div.childNodes[ 0 ].style.borderCollapse = \'separate\';");
document.writeln("			contents = div.getElementsByTagName( \'td\' );");
document.writeln("			contents[ 0 ].style.cssText = \'margin:0;border:0;padding:0;display:none\';");
document.writeln("			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;");
document.writeln("			if ( reliableHiddenOffsetsVal ) {");
document.writeln("				contents[ 0 ].style.display = \'\';");
document.writeln("				contents[ 1 ].style.display = \'none\';");
document.writeln("				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Teardown");
document.writeln("		documentElement.removeChild( container );");
document.writeln("	}");
document.writeln("");
document.writeln("} )();");
document.writeln("");
document.writeln("");
document.writeln("var getStyles, curCSS,");
document.writeln("	rposition = /^(top|right|bottom|left)$/;");
document.writeln("");
document.writeln("if ( window.getComputedStyle ) {");
document.writeln("	getStyles = function( elem ) {");
document.writeln("");
document.writeln("		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)");
document.writeln("		// IE throws on elements created in popups");
document.writeln("		// FF meanwhile throws on frame elements through \'defaultView.getComputedStyle\'");
document.writeln("		var view = elem.ownerDocument.defaultView;");
document.writeln("");
document.writeln("		if ( !view || !view.opener ) {");
document.writeln("			view = window;");
document.writeln("		}");
document.writeln("");
document.writeln("		return view.getComputedStyle( elem );");
document.writeln("	};");
document.writeln("");
document.writeln("	curCSS = function( elem, name, computed ) {");
document.writeln("		var width, minWidth, maxWidth, ret,");
document.writeln("			style = elem.style;");
document.writeln("");
document.writeln("		computed = computed || getStyles( elem );");
document.writeln("");
document.writeln("		// getPropertyValue is only needed for .css(\'filter\') in IE9, see #12537");
document.writeln("		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;");
document.writeln("");
document.writeln("		// Support: Opera 12.1x only");
document.writeln("		// Fall back to style even without computed");
document.writeln("		// computed is undefined for elems on document fragments");
document.writeln("		if ( ( ret === \'\' || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {");
document.writeln("			ret = jQuery.style( elem, name );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( computed ) {");
document.writeln("");
document.writeln("			// A tribute to the \'awesome hack by Dean Edwards\'");
document.writeln("			// Chrome < 17 and Safari 5.0 uses \'computed value\'");
document.writeln("			// instead of \'used value\' for margin-right");
document.writeln("			// Safari 5.1.7 (at least) returns percentage for a larger set of values,");
document.writeln("			// but width seems to be reliably pixels");
document.writeln("			// this is against the CSSOM draft spec:");
document.writeln("			// http://dev.w3.org/csswg/cssom/#resolved-values");
document.writeln("			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {");
document.writeln("");
document.writeln("				// Remember the original values");
document.writeln("				width = style.width;");
document.writeln("				minWidth = style.minWidth;");
document.writeln("				maxWidth = style.maxWidth;");
document.writeln("");
document.writeln("				// Put in the new values to get a computed value out");
document.writeln("				style.minWidth = style.maxWidth = style.width = ret;");
document.writeln("				ret = computed.width;");
document.writeln("");
document.writeln("				// Revert the changed values");
document.writeln("				style.width = width;");
document.writeln("				style.minWidth = minWidth;");
document.writeln("				style.maxWidth = maxWidth;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE");
document.writeln("		// IE returns zIndex value as an integer.");
document.writeln("		return ret === undefined ?");
document.writeln("			ret :");
document.writeln("			ret + \'\';");
document.writeln("	};");
document.writeln("} else if ( documentElement.currentStyle ) {");
document.writeln("	getStyles = function( elem ) {");
document.writeln("		return elem.currentStyle;");
document.writeln("	};");
document.writeln("");
document.writeln("	curCSS = function( elem, name, computed ) {");
document.writeln("		var left, rs, rsLeft, ret,");
document.writeln("			style = elem.style;");
document.writeln("");
document.writeln("		computed = computed || getStyles( elem );");
document.writeln("		ret = computed ? computed[ name ] : undefined;");
document.writeln("");
document.writeln("		// Avoid setting ret to empty string here");
document.writeln("		// so we don\'t default to auto");
document.writeln("		if ( ret == null && style && style[ name ] ) {");
document.writeln("			ret = style[ name ];");
document.writeln("		}");
document.writeln("");
document.writeln("		// From the awesome hack by Dean Edwards");
document.writeln("		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291");
document.writeln("");
document.writeln("		// If we\'re not dealing with a regular pixel number");
document.writeln("		// but a number that has a weird ending, we need to convert it to pixels");
document.writeln("		// but not position css attributes, as those are");
document.writeln("		// proportional to the parent element instead");
document.writeln("		// and we can\'t measure the parent instead because it");
document.writeln("		// might trigger a \'stacking dolls\' problem");
document.writeln("		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {");
document.writeln("");
document.writeln("			// Remember the original values");
document.writeln("			left = style.left;");
document.writeln("			rs = elem.runtimeStyle;");
document.writeln("			rsLeft = rs && rs.left;");
document.writeln("");
document.writeln("			// Put in the new values to get a computed value out");
document.writeln("			if ( rsLeft ) {");
document.writeln("				rs.left = elem.currentStyle.left;");
document.writeln("			}");
document.writeln("			style.left = name === \'fontSize\' ? \'1em\' : ret;");
document.writeln("			ret = style.pixelLeft + \'px\';");
document.writeln("");
document.writeln("			// Revert the changed values");
document.writeln("			style.left = left;");
document.writeln("			if ( rsLeft ) {");
document.writeln("				rs.left = rsLeft;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE");
document.writeln("		// IE returns zIndex value as an integer.");
document.writeln("		return ret === undefined ?");
document.writeln("			ret :");
document.writeln("			ret + \'\' || \'auto\';");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("function addGetHookIf( conditionFn, hookFn ) {");
document.writeln("");
document.writeln("	// Define the hook, we\'ll check on the first run if it\'s really needed.");
document.writeln("	return {");
document.writeln("		get: function() {");
document.writeln("			if ( conditionFn() ) {");
document.writeln("");
document.writeln("				// Hook not needed (or it\'s not possible to use it due");
document.writeln("				// to missing dependency), remove it.");
document.writeln("				delete this.get;");
document.writeln("				return;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Hook needed; redefine it so that the support test is not executed again.");
document.writeln("			return ( this.get = hookFn ).apply( this, arguments );");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("var");
document.writeln("");
document.writeln("		ralpha = /alpha\/\/([^)]*\/\/)/i,");
document.writeln("	ropacity = /opacity\/\/s*=\/\/s*([^)]*)/i,");
document.writeln("");
document.writeln("	// swappable if display is none or starts with table except");
document.writeln("	// \'table\', \'table-cell\', or \'table-caption\'");
document.writeln("	// see here for display values:");
document.writeln("	// https://developer.mozilla.org/en-US/docs/CSS/display");
document.writeln("	rdisplayswap = /^(none|table(?!-c[ea]).+)/,");
document.writeln("	rnumsplit = new RegExp( \'^(\' + pnum + \')(.*)$\', \'i\' ),");
document.writeln("");
document.writeln("	cssShow = { position: \'absolute\', visibility: \'hidden\', display: \'block\' },");
document.writeln("	cssNormalTransform = {");
document.writeln("		letterSpacing: \'0\',");
document.writeln("		fontWeight: \'400\'");
document.writeln("	},");
document.writeln("");
document.writeln("	cssPrefixes = [ \'Webkit\', \'O\', \'Moz\', \'ms\' ],");
document.writeln("	emptyStyle = document.createElement( \'div\' ).style;");
document.writeln("");
document.writeln("");
document.writeln("// return a css property mapped to a potentially vendor prefixed property");
document.writeln("function vendorPropName( name ) {");
document.writeln("");
document.writeln("	// shortcut for names that are not vendor prefixed");
document.writeln("	if ( name in emptyStyle ) {");
document.writeln("		return name;");
document.writeln("	}");
document.writeln("");
document.writeln("	// check for vendor prefixed names");
document.writeln("	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),");
document.writeln("		i = cssPrefixes.length;");
document.writeln("");
document.writeln("	while ( i-- ) {");
document.writeln("		name = cssPrefixes[ i ] + capName;");
document.writeln("		if ( name in emptyStyle ) {");
document.writeln("			return name;");
document.writeln("		}");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function showHide( elements, show ) {");
document.writeln("	var display, elem, hidden,");
document.writeln("		values = [],");
document.writeln("		index = 0,");
document.writeln("		length = elements.length;");
document.writeln("");
document.writeln("	for ( ; index < length; index++ ) {");
document.writeln("		elem = elements[ index ];");
document.writeln("		if ( !elem.style ) {");
document.writeln("			continue;");
document.writeln("		}");
document.writeln("");
document.writeln("		values[ index ] = jQuery._data( elem, \'olddisplay\' );");
document.writeln("		display = elem.style.display;");
document.writeln("		if ( show ) {");
document.writeln("");
document.writeln("			// Reset the inline display of this element to learn if it is");
document.writeln("			// being hidden by cascaded rules or not");
document.writeln("			if ( !values[ index ] && display === \'none\' ) {");
document.writeln("				elem.style.display = \'\';");
document.writeln("			}");
document.writeln("");
document.writeln("			// Set elements which have been overridden with display: none");
document.writeln("			// in a stylesheet to whatever the default browser style is");
document.writeln("			// for such an element");
document.writeln("			if ( elem.style.display === \'\' && isHidden( elem ) ) {");
document.writeln("				values[ index ] =");
document.writeln("					jQuery._data( elem, \'olddisplay\', defaultDisplay( elem.nodeName ) );");
document.writeln("			}");
document.writeln("		} else {");
document.writeln("			hidden = isHidden( elem );");
document.writeln("");
document.writeln("			if ( display && display !== \'none\' || !hidden ) {");
document.writeln("				jQuery._data(");
document.writeln("					elem,");
document.writeln("					\'olddisplay\',");
document.writeln("					hidden ? display : jQuery.css( elem, \'display\' )");
document.writeln("				);");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Set the display of most of the elements in a second loop");
document.writeln("	// to avoid the constant reflow");
document.writeln("	for ( index = 0; index < length; index++ ) {");
document.writeln("		elem = elements[ index ];");
document.writeln("		if ( !elem.style ) {");
document.writeln("			continue;");
document.writeln("		}");
document.writeln("		if ( !show || elem.style.display === \'none\' || elem.style.display === \'\' ) {");
document.writeln("			elem.style.display = show ? values[ index ] || \'\' : \'none\';");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return elements;");
document.writeln("}");
document.writeln("");
document.writeln("function setPositiveNumber( elem, value, subtract ) {");
document.writeln("	var matches = rnumsplit.exec( value );");
document.writeln("	return matches ?");
document.writeln("");
document.writeln("		// Guard against undefined \'subtract\', e.g., when used as in cssHooks");
document.writeln("		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \'px\' ) :");
document.writeln("		value;");
document.writeln("}");
document.writeln("");
document.writeln("function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {");
document.writeln("	var i = extra === ( isBorderBox ? \'border\' : \'content\' ) ?");
document.writeln("");
document.writeln("		// If we already have the right measurement, avoid augmentation");
document.writeln("		4 :");
document.writeln("");
document.writeln("		// Otherwise initialize for horizontal or vertical properties");
document.writeln("		name === \'width\' ? 1 : 0,");
document.writeln("");
document.writeln("		val = 0;");
document.writeln("");
document.writeln("	for ( ; i < 4; i += 2 ) {");
document.writeln("");
document.writeln("		// both box models exclude margin, so add it if we want it");
document.writeln("		if ( extra === \'margin\' ) {");
document.writeln("			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( isBorderBox ) {");
document.writeln("");
document.writeln("			// border-box includes padding, so remove it if we want content");
document.writeln("			if ( extra === \'content\' ) {");
document.writeln("				val -= jQuery.css( elem, \'padding\' + cssExpand[ i ], true, styles );");
document.writeln("			}");
document.writeln("");
document.writeln("			// at this point, extra isn\'t border nor margin, so remove border");
document.writeln("			if ( extra !== \'margin\' ) {");
document.writeln("				val -= jQuery.css( elem, \'border\' + cssExpand[ i ] + \'Width\', true, styles );");
document.writeln("			}");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// at this point, extra isn\'t content, so add padding");
document.writeln("			val += jQuery.css( elem, \'padding\' + cssExpand[ i ], true, styles );");
document.writeln("");
document.writeln("			// at this point, extra isn\'t content nor padding, so add border");
document.writeln("			if ( extra !== \'padding\' ) {");
document.writeln("				val += jQuery.css( elem, \'border\' + cssExpand[ i ] + \'Width\', true, styles );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return val;");
document.writeln("}");
document.writeln("");
document.writeln("function getWidthOrHeight( elem, name, extra ) {");
document.writeln("");
document.writeln("	// Start with offset property, which is equivalent to the border-box value");
document.writeln("	var valueIsBorderBox = true,");
document.writeln("		val = name === \'width\' ? elem.offsetWidth : elem.offsetHeight,");
document.writeln("		styles = getStyles( elem ),");
document.writeln("		isBorderBox = support.boxSizing &&");
document.writeln("			jQuery.css( elem, \'boxSizing\', false, styles ) === \'border-box\';");
document.writeln("");
document.writeln("	// some non-html elements return undefined for offsetWidth, so check for null/undefined");
document.writeln("	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285");
document.writeln("	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668");
document.writeln("	if ( val <= 0 || val == null ) {");
document.writeln("");
document.writeln("		// Fall back to computed then uncomputed css if necessary");
document.writeln("		val = curCSS( elem, name, styles );");
document.writeln("		if ( val < 0 || val == null ) {");
document.writeln("			val = elem.style[ name ];");
document.writeln("		}");
document.writeln("");
document.writeln("		// Computed unit is not pixels. Stop here and return.");
document.writeln("		if ( rnumnonpx.test( val ) ) {");
document.writeln("			return val;");
document.writeln("		}");
document.writeln("");
document.writeln("		// we need the check for style in case a browser which returns unreliable values");
document.writeln("		// for getComputedStyle silently falls back to the reliable elem.style");
document.writeln("		valueIsBorderBox = isBorderBox &&");
document.writeln("			( support.boxSizingReliable() || val === elem.style[ name ] );");
document.writeln("");
document.writeln("		// Normalize \'\', auto, and prepare for extra");
document.writeln("		val = parseFloat( val ) || 0;");
document.writeln("	}");
document.writeln("");
document.writeln("	// use the active box-sizing model to add/subtract irrelevant styles");
document.writeln("	return ( val +");
document.writeln("		augmentWidthOrHeight(");
document.writeln("			elem,");
document.writeln("			name,");
document.writeln("			extra || ( isBorderBox ? \'border\' : \'content\' ),");
document.writeln("			valueIsBorderBox,");
document.writeln("			styles");
document.writeln("		)");
document.writeln("	) + \'px\';");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("");
document.writeln("	// Add in style property hooks for overriding the default");
document.writeln("	// behavior of getting and setting a style property");
document.writeln("	cssHooks: {");
document.writeln("		opacity: {");
document.writeln("			get: function( elem, computed ) {");
document.writeln("				if ( computed ) {");
document.writeln("");
document.writeln("					// We should always get a number back from opacity");
document.writeln("					var ret = curCSS( elem, \'opacity\' );");
document.writeln("					return ret === \'\' ? \'1\' : ret;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// Don\'t automatically add \'px\' to these possibly-unitless properties");
document.writeln("	cssNumber: {");
document.writeln("		\'animationIterationCount\': true,");
document.writeln("		\'columnCount\': true,");
document.writeln("		\'fillOpacity\': true,");
document.writeln("		\'flexGrow\': true,");
document.writeln("		\'flexShrink\': true,");
document.writeln("		\'fontWeight\': true,");
document.writeln("		\'lineHeight\': true,");
document.writeln("		\'opacity\': true,");
document.writeln("		\'order\': true,");
document.writeln("		\'orphans\': true,");
document.writeln("		\'widows\': true,");
document.writeln("		\'zIndex\': true,");
document.writeln("		\'zoom\': true");
document.writeln("	},");
document.writeln("");
document.writeln("	// Add in properties whose names you wish to fix before");
document.writeln("	// setting or getting the value");
document.writeln("	cssProps: {");
document.writeln("");
document.writeln("		// normalize float css property");
document.writeln("		\'float\': support.cssFloat ? \'cssFloat\' : \'styleFloat\'");
document.writeln("	},");
document.writeln("");
document.writeln("	// Get and set the style property on a DOM Node");
document.writeln("	style: function( elem, name, value, extra ) {");
document.writeln("");
document.writeln("		// Don\'t set styles on text and comment nodes");
document.writeln("		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Make sure that we\'re working with the right name");
document.writeln("		var ret, type, hooks,");
document.writeln("			origName = jQuery.camelCase( name ),");
document.writeln("			style = elem.style;");
document.writeln("");
document.writeln("		name = jQuery.cssProps[ origName ] ||");
document.writeln("			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );");
document.writeln("");
document.writeln("		// gets hook for the prefixed version");
document.writeln("		// followed by the unprefixed version");
document.writeln("		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];");
document.writeln("");
document.writeln("		// Check if we\'re setting a value");
document.writeln("		if ( value !== undefined ) {");
document.writeln("			type = typeof value;");
document.writeln("");
document.writeln("			// Convert \'+=\' or \'-=\' to relative numbers (#7345)");
document.writeln("			if ( type === \'string\' && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {");
document.writeln("				value = adjustCSS( elem, name, ret );");
document.writeln("");
document.writeln("				// Fixes bug #9237");
document.writeln("				type = \'number\';");
document.writeln("			}");
document.writeln("");
document.writeln("			// Make sure that null and NaN values aren\'t set. See: #7116");
document.writeln("			if ( value == null || value !== value ) {");
document.writeln("				return;");
document.writeln("			}");
document.writeln("");
document.writeln("			// If a number was passed in, add the unit (except for certain CSS properties)");
document.writeln("			if ( type === \'number\' ) {");
document.writeln("				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \'\' : \'px\' );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,");
document.writeln("			// but it would mean to define eight");
document.writeln("			// (for every problematic property) identical functions");
document.writeln("			if ( !support.clearCloneStyle && value === \'\' && name.indexOf( \'background\' ) === 0 ) {");
document.writeln("				style[ name ] = \'inherit\';");
document.writeln("			}");
document.writeln("");
document.writeln("			// If a hook was provided, use that value, otherwise just set the specified value");
document.writeln("			if ( !hooks || !( \'set\' in hooks ) ||");
document.writeln("				( value = hooks.set( elem, value, extra ) ) !== undefined ) {");
document.writeln("");
document.writeln("				// Support: IE");
document.writeln("				// Swallow errors from \'invalid\' CSS values (#5509)");
document.writeln("				try {");
document.writeln("					style[ name ] = value;");
document.writeln("				} catch ( e ) {}");
document.writeln("			}");
document.writeln("");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// If a hook was provided get the non-computed value from there");
document.writeln("			if ( hooks && \'get\' in hooks &&");
document.writeln("				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {");
document.writeln("");
document.writeln("				return ret;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Otherwise just get the value from the style object");
document.writeln("			return style[ name ];");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	css: function( elem, name, extra, styles ) {");
document.writeln("		var num, val, hooks,");
document.writeln("			origName = jQuery.camelCase( name );");
document.writeln("");
document.writeln("		// Make sure that we\'re working with the right name");
document.writeln("		name = jQuery.cssProps[ origName ] ||");
document.writeln("			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );");
document.writeln("");
document.writeln("		// gets hook for the prefixed version");
document.writeln("		// followed by the unprefixed version");
document.writeln("		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];");
document.writeln("");
document.writeln("		// If a hook was provided get the computed value from there");
document.writeln("		if ( hooks && \'get\' in hooks ) {");
document.writeln("			val = hooks.get( elem, true, extra );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Otherwise, if a way to get the computed value exists, use that");
document.writeln("		if ( val === undefined ) {");
document.writeln("			val = curCSS( elem, name, styles );");
document.writeln("		}");
document.writeln("");
document.writeln("		//convert \'normal\' to computed value");
document.writeln("		if ( val === \'normal\' && name in cssNormalTransform ) {");
document.writeln("			val = cssNormalTransform[ name ];");
document.writeln("		}");
document.writeln("");
document.writeln("		// Return, converting to number if forced or a qualifier was provided and val looks numeric");
document.writeln("		if ( extra === \'\' || extra ) {");
document.writeln("			num = parseFloat( val );");
document.writeln("			return extra === true || isFinite( num ) ? num || 0 : val;");
document.writeln("		}");
document.writeln("		return val;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.each( [ \'height\', \'width\' ], function( i, name ) {");
document.writeln("	jQuery.cssHooks[ name ] = {");
document.writeln("		get: function( elem, computed, extra ) {");
document.writeln("			if ( computed ) {");
document.writeln("");
document.writeln("				// certain elements can have dimension info if we invisibly show them");
document.writeln("				// however, it must have a current display style that would benefit from this");
document.writeln("				return rdisplayswap.test( jQuery.css( elem, \'display\' ) ) &&");
document.writeln("					elem.offsetWidth === 0 ?");
document.writeln("						swap( elem, cssShow, function() {");
document.writeln("							return getWidthOrHeight( elem, name, extra );");
document.writeln("						} ) :");
document.writeln("						getWidthOrHeight( elem, name, extra );");
document.writeln("			}");
document.writeln("		},");
document.writeln("");
document.writeln("		set: function( elem, value, extra ) {");
document.writeln("			var styles = extra && getStyles( elem );");
document.writeln("			return setPositiveNumber( elem, value, extra ?");
document.writeln("				augmentWidthOrHeight(");
document.writeln("					elem,");
document.writeln("					name,");
document.writeln("					extra,");
document.writeln("					support.boxSizing &&");
document.writeln("						jQuery.css( elem, \'boxSizing\', false, styles ) === \'border-box\',");
document.writeln("					styles");
document.writeln("				) : 0");
document.writeln("			);");
document.writeln("		}");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("if ( !support.opacity ) {");
document.writeln("	jQuery.cssHooks.opacity = {");
document.writeln("		get: function( elem, computed ) {");
document.writeln("");
document.writeln("			// IE uses filters for opacity");
document.writeln("			return ropacity.test( ( computed && elem.currentStyle ?");
document.writeln("				elem.currentStyle.filter :");
document.writeln("				elem.style.filter ) || \'\' ) ?");
document.writeln("					( 0.01 * parseFloat( RegExp.$1 ) ) + \'\' :");
document.writeln("					computed ? \'1\' : \'\';");
document.writeln("		},");
document.writeln("");
document.writeln("		set: function( elem, value ) {");
document.writeln("			var style = elem.style,");
document.writeln("				currentStyle = elem.currentStyle,");
document.writeln("				opacity = jQuery.isNumeric( value ) ? \'alpha(opacity=\' + value * 100 + \')\' : \'\',");
document.writeln("				filter = currentStyle && currentStyle.filter || style.filter || \'\';");
document.writeln("");
document.writeln("			// IE has trouble with opacity if it does not have layout");
document.writeln("			// Force it by setting the zoom level");
document.writeln("			style.zoom = 1;");
document.writeln("");
document.writeln("			// if setting opacity to 1, and no other filters exist -");
document.writeln("			// attempt to remove filter attribute #6652");
document.writeln("			// if value === \'\', then remove inline opacity #12685");
document.writeln("			if ( ( value >= 1 || value === \'\' ) &&");
document.writeln("					jQuery.trim( filter.replace( ralpha, \'\' ) ) === \'\' &&");
document.writeln("					style.removeAttribute ) {");
document.writeln("");
document.writeln("				// Setting style.filter to null, \'\' & \' \' still leave \'filter:\' in the cssText");
document.writeln("				// if \'filter:\' is present at all, clearType is disabled, we want to avoid this");
document.writeln("				// style.removeAttribute is IE Only, but so apparently is this code path...");
document.writeln("				style.removeAttribute( \'filter\' );");
document.writeln("");
document.writeln("				// if there is no filter style applied in a css rule");
document.writeln("				// or unset inline opacity, we are done");
document.writeln("				if ( value === \'\' || currentStyle && !currentStyle.filter ) {");
document.writeln("					return;");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// otherwise, set new filter values");
document.writeln("			style.filter = ralpha.test( filter ) ?");
document.writeln("				filter.replace( ralpha, opacity ) :");
document.writeln("				filter + \' \' + opacity;");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,");
document.writeln("	function( elem, computed ) {");
document.writeln("		if ( computed ) {");
document.writeln("			return swap( elem, { \'display\': \'inline-block\' },");
document.writeln("				curCSS, [ elem, \'marginRight\' ] );");
document.writeln("		}");
document.writeln("	}");
document.writeln(");");
document.writeln("");
document.writeln("jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,");
document.writeln("	function( elem, computed ) {");
document.writeln("		if ( computed ) {");
document.writeln("			return (");
document.writeln("				parseFloat( curCSS( elem, \'marginLeft\' ) ) ||");
document.writeln("");
document.writeln("				// Support: IE<=11+");
document.writeln("				// Running getBoundingClientRect on a disconnected node in IE throws an error");
document.writeln("				// Support: IE8 only");
document.writeln("				// getClientRects() errors on disconnected elems");
document.writeln("				( jQuery.contains( elem.ownerDocument, elem ) ?");
document.writeln("					elem.getBoundingClientRect().left -");
document.writeln("						swap( elem, { marginLeft: 0 }, function() {");
document.writeln("							return elem.getBoundingClientRect().left;");
document.writeln("						} ) :");
document.writeln("					0");
document.writeln("				)");
document.writeln("			) + \'px\';");
document.writeln("		}");
document.writeln("	}");
document.writeln(");");
document.writeln("");
document.writeln("// These hooks are used by animate to expand properties");
document.writeln("jQuery.each( {");
document.writeln("	margin: \'\',");
document.writeln("	padding: \'\',");
document.writeln("	border: \'Width\'");
document.writeln("}, function( prefix, suffix ) {");
document.writeln("	jQuery.cssHooks[ prefix + suffix ] = {");
document.writeln("		expand: function( value ) {");
document.writeln("			var i = 0,");
document.writeln("				expanded = {},");
document.writeln("");
document.writeln("				// assumes a single number if not a string");
document.writeln("				parts = typeof value === \'string\' ? value.split( \' \' ) : [ value ];");
document.writeln("");
document.writeln("			for ( ; i < 4; i++ ) {");
document.writeln("				expanded[ prefix + cssExpand[ i ] + suffix ] =");
document.writeln("					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];");
document.writeln("			}");
document.writeln("");
document.writeln("			return expanded;");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("	if ( !rmargin.test( prefix ) ) {");
document.writeln("		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	css: function( name, value ) {");
document.writeln("		return access( this, function( elem, name, value ) {");
document.writeln("			var styles, len,");
document.writeln("				map = {},");
document.writeln("				i = 0;");
document.writeln("");
document.writeln("			if ( jQuery.isArray( name ) ) {");
document.writeln("				styles = getStyles( elem );");
document.writeln("				len = name.length;");
document.writeln("");
document.writeln("				for ( ; i < len; i++ ) {");
document.writeln("					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );");
document.writeln("				}");
document.writeln("");
document.writeln("				return map;");
document.writeln("			}");
document.writeln("");
document.writeln("			return value !== undefined ?");
document.writeln("				jQuery.style( elem, name, value ) :");
document.writeln("				jQuery.css( elem, name );");
document.writeln("		}, name, value, arguments.length > 1 );");
document.writeln("	},");
document.writeln("	show: function() {");
document.writeln("		return showHide( this, true );");
document.writeln("	},");
document.writeln("	hide: function() {");
document.writeln("		return showHide( this );");
document.writeln("	},");
document.writeln("	toggle: function( state ) {");
document.writeln("		if ( typeof state === \'boolean\' ) {");
document.writeln("			return state ? this.show() : this.hide();");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.each( function() {");
document.writeln("			if ( isHidden( this ) ) {");
document.writeln("				jQuery( this ).show();");
document.writeln("			} else {");
document.writeln("				jQuery( this ).hide();");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("function Tween( elem, options, prop, end, easing ) {");
document.writeln("	return new Tween.prototype.init( elem, options, prop, end, easing );");
document.writeln("}");
document.writeln("jQuery.Tween = Tween;");
document.writeln("");
document.writeln("Tween.prototype = {");
document.writeln("	constructor: Tween,");
document.writeln("	init: function( elem, options, prop, end, easing, unit ) {");
document.writeln("		this.elem = elem;");
document.writeln("		this.prop = prop;");
document.writeln("		this.easing = easing || jQuery.easing._default;");
document.writeln("		this.options = options;");
document.writeln("		this.start = this.now = this.cur();");
document.writeln("		this.end = end;");
document.writeln("		this.unit = unit || ( jQuery.cssNumber[ prop ] ? \'\' : \'px\' );");
document.writeln("	},");
document.writeln("	cur: function() {");
document.writeln("		var hooks = Tween.propHooks[ this.prop ];");
document.writeln("");
document.writeln("		return hooks && hooks.get ?");
document.writeln("			hooks.get( this ) :");
document.writeln("			Tween.propHooks._default.get( this );");
document.writeln("	},");
document.writeln("	run: function( percent ) {");
document.writeln("		var eased,");
document.writeln("			hooks = Tween.propHooks[ this.prop ];");
document.writeln("");
document.writeln("		if ( this.options.duration ) {");
document.writeln("			this.pos = eased = jQuery.easing[ this.easing ](");
document.writeln("				percent, this.options.duration * percent, 0, 1, this.options.duration");
document.writeln("			);");
document.writeln("		} else {");
document.writeln("			this.pos = eased = percent;");
document.writeln("		}");
document.writeln("		this.now = ( this.end - this.start ) * eased + this.start;");
document.writeln("");
document.writeln("		if ( this.options.step ) {");
document.writeln("			this.options.step.call( this.elem, this.now, this );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( hooks && hooks.set ) {");
document.writeln("			hooks.set( this );");
document.writeln("		} else {");
document.writeln("			Tween.propHooks._default.set( this );");
document.writeln("		}");
document.writeln("		return this;");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("Tween.prototype.init.prototype = Tween.prototype;");
document.writeln("");
document.writeln("Tween.propHooks = {");
document.writeln("	_default: {");
document.writeln("		get: function( tween ) {");
document.writeln("			var result;");
document.writeln("");
document.writeln("			// Use a property on the element directly when it is not a DOM element,");
document.writeln("			// or when there is no matching style property that exists.");
document.writeln("			if ( tween.elem.nodeType !== 1 ||");
document.writeln("				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {");
document.writeln("				return tween.elem[ tween.prop ];");
document.writeln("			}");
document.writeln("");
document.writeln("			// passing an empty string as a 3rd parameter to .css will automatically");
document.writeln("			// attempt a parseFloat and fallback to a string if the parse fails");
document.writeln("			// so, simple values such as \'10px\' are parsed to Float.");
document.writeln("			// complex values such as \'rotate(1rad)\' are returned as is.");
document.writeln("			result = jQuery.css( tween.elem, tween.prop, \'\' );");
document.writeln("");
document.writeln("			// Empty strings, null, undefined and \'auto\' are converted to 0.");
document.writeln("			return !result || result === \'auto\' ? 0 : result;");
document.writeln("		},");
document.writeln("		set: function( tween ) {");
document.writeln("");
document.writeln("			// use step hook for back compat - use cssHook if its there - use .style if its");
document.writeln("			// available and use plain properties where available");
document.writeln("			if ( jQuery.fx.step[ tween.prop ] ) {");
document.writeln("				jQuery.fx.step[ tween.prop ]( tween );");
document.writeln("			} else if ( tween.elem.nodeType === 1 &&");
document.writeln("				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||");
document.writeln("					jQuery.cssHooks[ tween.prop ] ) ) {");
document.writeln("				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );");
document.writeln("			} else {");
document.writeln("				tween.elem[ tween.prop ] = tween.now;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("// Support: IE <=9");
document.writeln("// Panic based approach to setting things on disconnected nodes");
document.writeln("");
document.writeln("Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {");
document.writeln("	set: function( tween ) {");
document.writeln("		if ( tween.elem.nodeType && tween.elem.parentNode ) {");
document.writeln("			tween.elem[ tween.prop ] = tween.now;");
document.writeln("		}");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.easing = {");
document.writeln("	linear: function( p ) {");
document.writeln("		return p;");
document.writeln("	},");
document.writeln("	swing: function( p ) {");
document.writeln("		return 0.5 - Math.cos( p * Math.PI ) / 2;");
document.writeln("	},");
document.writeln("	_default: \'swing\'");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fx = Tween.prototype.init;");
document.writeln("");
document.writeln("// Back Compat <1.8 extension point");
document.writeln("jQuery.fx.step = {};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var");
document.writeln("	fxNow, timerId,");
document.writeln("	rfxtypes = /^(?:toggle|show|hide)$/,");
document.writeln("	rrun = /queueHooks$/;");
document.writeln("");
document.writeln("// Animations created synchronously will run synchronously");
document.writeln("function createFxNow() {");
document.writeln("	window.setTimeout( function() {");
document.writeln("		fxNow = undefined;");
document.writeln("	} );");
document.writeln("	return ( fxNow = jQuery.now() );");
document.writeln("}");
document.writeln("");
document.writeln("// Generate parameters to create a standard animation");
document.writeln("function genFx( type, includeWidth ) {");
document.writeln("	var which,");
document.writeln("		attrs = { height: type },");
document.writeln("		i = 0;");
document.writeln("");
document.writeln("	// if we include width, step value is 1 to do all cssExpand values,");
document.writeln("	// if we don\'t include width, step value is 2 to skip over Left and Right");
document.writeln("	includeWidth = includeWidth ? 1 : 0;");
document.writeln("	for ( ; i < 4 ; i += 2 - includeWidth ) {");
document.writeln("		which = cssExpand[ i ];");
document.writeln("		attrs[ \'margin\' + which ] = attrs[ \'padding\' + which ] = type;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( includeWidth ) {");
document.writeln("		attrs.opacity = attrs.width = type;");
document.writeln("	}");
document.writeln("");
document.writeln("	return attrs;");
document.writeln("}");
document.writeln("");
document.writeln("function createTween( value, prop, animation ) {");
document.writeln("	var tween,");
document.writeln("		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \'*\' ] ),");
document.writeln("		index = 0,");
document.writeln("		length = collection.length;");
document.writeln("	for ( ; index < length; index++ ) {");
document.writeln("		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {");
document.writeln("");
document.writeln("			// we\'re done with this property");
document.writeln("			return tween;");
document.writeln("		}");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function defaultPrefilter( elem, props, opts ) {");
document.writeln("	/* jshint validthis: true */");
document.writeln("	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,");
document.writeln("		anim = this,");
document.writeln("		orig = {},");
document.writeln("		style = elem.style,");
document.writeln("		hidden = elem.nodeType && isHidden( elem ),");
document.writeln("		dataShow = jQuery._data( elem, \'fxshow\' );");
document.writeln("");
document.writeln("	// handle queue: false promises");
document.writeln("	if ( !opts.queue ) {");
document.writeln("		hooks = jQuery._queueHooks( elem, \'fx\' );");
document.writeln("		if ( hooks.unqueued == null ) {");
document.writeln("			hooks.unqueued = 0;");
document.writeln("			oldfire = hooks.empty.fire;");
document.writeln("			hooks.empty.fire = function() {");
document.writeln("				if ( !hooks.unqueued ) {");
document.writeln("					oldfire();");
document.writeln("				}");
document.writeln("			};");
document.writeln("		}");
document.writeln("		hooks.unqueued++;");
document.writeln("");
document.writeln("		anim.always( function() {");
document.writeln("");
document.writeln("			// doing this makes sure that the complete handler will be called");
document.writeln("			// before this completes");
document.writeln("			anim.always( function() {");
document.writeln("				hooks.unqueued--;");
document.writeln("				if ( !jQuery.queue( elem, \'fx\' ).length ) {");
document.writeln("					hooks.empty.fire();");
document.writeln("				}");
document.writeln("			} );");
document.writeln("		} );");
document.writeln("	}");
document.writeln("");
document.writeln("	// height/width overflow pass");
document.writeln("	if ( elem.nodeType === 1 && ( \'height\' in props || \'width\' in props ) ) {");
document.writeln("");
document.writeln("		// Make sure that nothing sneaks out");
document.writeln("		// Record all 3 overflow attributes because IE does not");
document.writeln("		// change the overflow attribute when overflowX and");
document.writeln("		// overflowY are set to the same value");
document.writeln("		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];");
document.writeln("");
document.writeln("		// Set display property to inline-block for height/width");
document.writeln("		// animations on inline elements that are having width/height animated");
document.writeln("		display = jQuery.css( elem, \'display\' );");
document.writeln("");
document.writeln("		// Test default display if display is currently \'none\'");
document.writeln("		checkDisplay = display === \'none\' ?");
document.writeln("			jQuery._data( elem, \'olddisplay\' ) || defaultDisplay( elem.nodeName ) : display;");
document.writeln("");
document.writeln("		if ( checkDisplay === \'inline\' && jQuery.css( elem, \'float\' ) === \'none\' ) {");
document.writeln("");
document.writeln("			// inline-level elements accept inline-block;");
document.writeln("			// block-level elements need to be inline with layout");
document.writeln("			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === \'inline\' ) {");
document.writeln("				style.display = \'inline-block\';");
document.writeln("			} else {");
document.writeln("				style.zoom = 1;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( opts.overflow ) {");
document.writeln("		style.overflow = \'hidden\';");
document.writeln("		if ( !support.shrinkWrapBlocks() ) {");
document.writeln("			anim.always( function() {");
document.writeln("				style.overflow = opts.overflow[ 0 ];");
document.writeln("				style.overflowX = opts.overflow[ 1 ];");
document.writeln("				style.overflowY = opts.overflow[ 2 ];");
document.writeln("			} );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// show/hide pass");
document.writeln("	for ( prop in props ) {");
document.writeln("		value = props[ prop ];");
document.writeln("		if ( rfxtypes.exec( value ) ) {");
document.writeln("			delete props[ prop ];");
document.writeln("			toggle = toggle || value === \'toggle\';");
document.writeln("			if ( value === ( hidden ? \'hide\' : \'show\' ) ) {");
document.writeln("");
document.writeln("				// If there is dataShow left over from a stopped hide or show");
document.writeln("				// and we are going to proceed with show, we should pretend to be hidden");
document.writeln("				if ( value === \'show\' && dataShow && dataShow[ prop ] !== undefined ) {");
document.writeln("					hidden = true;");
document.writeln("				} else {");
document.writeln("					continue;");
document.writeln("				}");
document.writeln("			}");
document.writeln("			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );");
document.writeln("");
document.writeln("		// Any non-fx value stops us from restoring the original display value");
document.writeln("		} else {");
document.writeln("			display = undefined;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( !jQuery.isEmptyObject( orig ) ) {");
document.writeln("		if ( dataShow ) {");
document.writeln("			if ( \'hidden\' in dataShow ) {");
document.writeln("				hidden = dataShow.hidden;");
document.writeln("			}");
document.writeln("		} else {");
document.writeln("			dataShow = jQuery._data( elem, \'fxshow\', {} );");
document.writeln("		}");
document.writeln("");
document.writeln("		// store state if its toggle - enables .stop().toggle() to \'reverse\'");
document.writeln("		if ( toggle ) {");
document.writeln("			dataShow.hidden = !hidden;");
document.writeln("		}");
document.writeln("		if ( hidden ) {");
document.writeln("			jQuery( elem ).show();");
document.writeln("		} else {");
document.writeln("			anim.done( function() {");
document.writeln("				jQuery( elem ).hide();");
document.writeln("			} );");
document.writeln("		}");
document.writeln("		anim.done( function() {");
document.writeln("			var prop;");
document.writeln("			jQuery._removeData( elem, \'fxshow\' );");
document.writeln("			for ( prop in orig ) {");
document.writeln("				jQuery.style( elem, prop, orig[ prop ] );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("		for ( prop in orig ) {");
document.writeln("			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );");
document.writeln("");
document.writeln("			if ( !( prop in dataShow ) ) {");
document.writeln("				dataShow[ prop ] = tween.start;");
document.writeln("				if ( hidden ) {");
document.writeln("					tween.end = tween.start;");
document.writeln("					tween.start = prop === \'width\' || prop === \'height\' ? 1 : 0;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("	// If this is a noop like .hide().hide(), restore an overwritten display value");
document.writeln("	} else if ( ( display === \'none\' ? defaultDisplay( elem.nodeName ) : display ) === \'inline\' ) {");
document.writeln("		style.display = display;");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function propFilter( props, specialEasing ) {");
document.writeln("	var index, name, easing, value, hooks;");
document.writeln("");
document.writeln("	// camelCase, specialEasing and expand cssHook pass");
document.writeln("	for ( index in props ) {");
document.writeln("		name = jQuery.camelCase( index );");
document.writeln("		easing = specialEasing[ name ];");
document.writeln("		value = props[ index ];");
document.writeln("		if ( jQuery.isArray( value ) ) {");
document.writeln("			easing = value[ 1 ];");
document.writeln("			value = props[ index ] = value[ 0 ];");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( index !== name ) {");
document.writeln("			props[ name ] = value;");
document.writeln("			delete props[ index ];");
document.writeln("		}");
document.writeln("");
document.writeln("		hooks = jQuery.cssHooks[ name ];");
document.writeln("		if ( hooks && \'expand\' in hooks ) {");
document.writeln("			value = hooks.expand( value );");
document.writeln("			delete props[ name ];");
document.writeln("");
document.writeln("			// not quite $.extend, this wont overwrite keys already present.");
document.writeln("			// also - reusing \'index\' from above because we have the correct \'name\'");
document.writeln("			for ( index in value ) {");
document.writeln("				if ( !( index in props ) ) {");
document.writeln("					props[ index ] = value[ index ];");
document.writeln("					specialEasing[ index ] = easing;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		} else {");
document.writeln("			specialEasing[ name ] = easing;");
document.writeln("		}");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("function Animation( elem, properties, options ) {");
document.writeln("	var result,");
document.writeln("		stopped,");
document.writeln("		index = 0,");
document.writeln("		length = Animation.prefilters.length,");
document.writeln("		deferred = jQuery.Deferred().always( function() {");
document.writeln("");
document.writeln("			// don\'t match elem in the :animated selector");
document.writeln("			delete tick.elem;");
document.writeln("		} ),");
document.writeln("		tick = function() {");
document.writeln("			if ( stopped ) {");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("			var currentTime = fxNow || createFxNow(),");
document.writeln("				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),");
document.writeln("");
document.writeln("				// Support: Android 2.3");
document.writeln("				// Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)");
document.writeln("				temp = remaining / animation.duration || 0,");
document.writeln("				percent = 1 - temp,");
document.writeln("				index = 0,");
document.writeln("				length = animation.tweens.length;");
document.writeln("");
document.writeln("			for ( ; index < length ; index++ ) {");
document.writeln("				animation.tweens[ index ].run( percent );");
document.writeln("			}");
document.writeln("");
document.writeln("			deferred.notifyWith( elem, [ animation, percent, remaining ] );");
document.writeln("");
document.writeln("			if ( percent < 1 && length ) {");
document.writeln("				return remaining;");
document.writeln("			} else {");
document.writeln("				deferred.resolveWith( elem, [ animation ] );");
document.writeln("				return false;");
document.writeln("			}");
document.writeln("		},");
document.writeln("		animation = deferred.promise( {");
document.writeln("			elem: elem,");
document.writeln("			props: jQuery.extend( {}, properties ),");
document.writeln("			opts: jQuery.extend( true, {");
document.writeln("				specialEasing: {},");
document.writeln("				easing: jQuery.easing._default");
document.writeln("			}, options ),");
document.writeln("			originalProperties: properties,");
document.writeln("			originalOptions: options,");
document.writeln("			startTime: fxNow || createFxNow(),");
document.writeln("			duration: options.duration,");
document.writeln("			tweens: [],");
document.writeln("			createTween: function( prop, end ) {");
document.writeln("				var tween = jQuery.Tween( elem, animation.opts, prop, end,");
document.writeln("						animation.opts.specialEasing[ prop ] || animation.opts.easing );");
document.writeln("				animation.tweens.push( tween );");
document.writeln("				return tween;");
document.writeln("			},");
document.writeln("			stop: function( gotoEnd ) {");
document.writeln("				var index = 0,");
document.writeln("");
document.writeln("					// if we are going to the end, we want to run all the tweens");
document.writeln("					// otherwise we skip this part");
document.writeln("					length = gotoEnd ? animation.tweens.length : 0;");
document.writeln("				if ( stopped ) {");
document.writeln("					return this;");
document.writeln("				}");
document.writeln("				stopped = true;");
document.writeln("				for ( ; index < length ; index++ ) {");
document.writeln("					animation.tweens[ index ].run( 1 );");
document.writeln("				}");
document.writeln("");
document.writeln("				// resolve when we played the last frame");
document.writeln("				// otherwise, reject");
document.writeln("				if ( gotoEnd ) {");
document.writeln("					deferred.notifyWith( elem, [ animation, 1, 0 ] );");
document.writeln("					deferred.resolveWith( elem, [ animation, gotoEnd ] );");
document.writeln("				} else {");
document.writeln("					deferred.rejectWith( elem, [ animation, gotoEnd ] );");
document.writeln("				}");
document.writeln("				return this;");
document.writeln("			}");
document.writeln("		} ),");
document.writeln("		props = animation.props;");
document.writeln("");
document.writeln("	propFilter( props, animation.opts.specialEasing );");
document.writeln("");
document.writeln("	for ( ; index < length ; index++ ) {");
document.writeln("		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );");
document.writeln("		if ( result ) {");
document.writeln("			if ( jQuery.isFunction( result.stop ) ) {");
document.writeln("				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =");
document.writeln("					jQuery.proxy( result.stop, result );");
document.writeln("			}");
document.writeln("			return result;");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	jQuery.map( props, createTween, animation );");
document.writeln("");
document.writeln("	if ( jQuery.isFunction( animation.opts.start ) ) {");
document.writeln("		animation.opts.start.call( elem, animation );");
document.writeln("	}");
document.writeln("");
document.writeln("	jQuery.fx.timer(");
document.writeln("		jQuery.extend( tick, {");
document.writeln("			elem: elem,");
document.writeln("			anim: animation,");
document.writeln("			queue: animation.opts.queue");
document.writeln("		} )");
document.writeln("	);");
document.writeln("");
document.writeln("	// attach callbacks from options");
document.writeln("	return animation.progress( animation.opts.progress )");
document.writeln("		.done( animation.opts.done, animation.opts.complete )");
document.writeln("		.fail( animation.opts.fail )");
document.writeln("		.always( animation.opts.always );");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.Animation = jQuery.extend( Animation, {");
document.writeln("");
document.writeln("	tweeners: {");
document.writeln("		\'*\': [ function( prop, value ) {");
document.writeln("			var tween = this.createTween( prop, value );");
document.writeln("			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );");
document.writeln("			return tween;");
document.writeln("		} ]");
document.writeln("	},");
document.writeln("");
document.writeln("	tweener: function( props, callback ) {");
document.writeln("		if ( jQuery.isFunction( props ) ) {");
document.writeln("			callback = props;");
document.writeln("			props = [ \'*\' ];");
document.writeln("		} else {");
document.writeln("			props = props.match( rnotwhite );");
document.writeln("		}");
document.writeln("");
document.writeln("		var prop,");
document.writeln("			index = 0,");
document.writeln("			length = props.length;");
document.writeln("");
document.writeln("		for ( ; index < length ; index++ ) {");
document.writeln("			prop = props[ index ];");
document.writeln("			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];");
document.writeln("			Animation.tweeners[ prop ].unshift( callback );");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	prefilters: [ defaultPrefilter ],");
document.writeln("");
document.writeln("	prefilter: function( callback, prepend ) {");
document.writeln("		if ( prepend ) {");
document.writeln("			Animation.prefilters.unshift( callback );");
document.writeln("		} else {");
document.writeln("			Animation.prefilters.push( callback );");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.speed = function( speed, easing, fn ) {");
document.writeln("	var opt = speed && typeof speed === \'object\' ? jQuery.extend( {}, speed ) : {");
document.writeln("		complete: fn || !fn && easing ||");
document.writeln("			jQuery.isFunction( speed ) && speed,");
document.writeln("		duration: speed,");
document.writeln("		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing");
document.writeln("	};");
document.writeln("");
document.writeln("	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \'number\' ? opt.duration :");
document.writeln("		opt.duration in jQuery.fx.speeds ?");
document.writeln("			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;");
document.writeln("");
document.writeln("	// normalize opt.queue - true/undefined/null -> \'fx\'");
document.writeln("	if ( opt.queue == null || opt.queue === true ) {");
document.writeln("		opt.queue = \'fx\';");
document.writeln("	}");
document.writeln("");
document.writeln("	// Queueing");
document.writeln("	opt.old = opt.complete;");
document.writeln("");
document.writeln("	opt.complete = function() {");
document.writeln("		if ( jQuery.isFunction( opt.old ) ) {");
document.writeln("			opt.old.call( this );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( opt.queue ) {");
document.writeln("			jQuery.dequeue( this, opt.queue );");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("	return opt;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	fadeTo: function( speed, to, easing, callback ) {");
document.writeln("");
document.writeln("		// show any hidden elements after setting opacity to 0");
document.writeln("		return this.filter( isHidden ).css( \'opacity\', 0 ).show()");
document.writeln("");
document.writeln("			// animate to the value specified");
document.writeln("			.end().animate( { opacity: to }, speed, easing, callback );");
document.writeln("	},");
document.writeln("	animate: function( prop, speed, easing, callback ) {");
document.writeln("		var empty = jQuery.isEmptyObject( prop ),");
document.writeln("			optall = jQuery.speed( speed, easing, callback ),");
document.writeln("			doAnimation = function() {");
document.writeln("");
document.writeln("				// Operate on a copy of prop so per-property easing won\'t be lost");
document.writeln("				var anim = Animation( this, jQuery.extend( {}, prop ), optall );");
document.writeln("");
document.writeln("				// Empty animations, or finishing resolves immediately");
document.writeln("				if ( empty || jQuery._data( this, \'finish\' ) ) {");
document.writeln("					anim.stop( true );");
document.writeln("				}");
document.writeln("			};");
document.writeln("			doAnimation.finish = doAnimation;");
document.writeln("");
document.writeln("		return empty || optall.queue === false ?");
document.writeln("			this.each( doAnimation ) :");
document.writeln("			this.queue( optall.queue, doAnimation );");
document.writeln("	},");
document.writeln("	stop: function( type, clearQueue, gotoEnd ) {");
document.writeln("		var stopQueue = function( hooks ) {");
document.writeln("			var stop = hooks.stop;");
document.writeln("			delete hooks.stop;");
document.writeln("			stop( gotoEnd );");
document.writeln("		};");
document.writeln("");
document.writeln("		if ( typeof type !== \'string\' ) {");
document.writeln("			gotoEnd = clearQueue;");
document.writeln("			clearQueue = type;");
document.writeln("			type = undefined;");
document.writeln("		}");
document.writeln("		if ( clearQueue && type !== false ) {");
document.writeln("			this.queue( type || \'fx\', [] );");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.each( function() {");
document.writeln("			var dequeue = true,");
document.writeln("				index = type != null && type + \'queueHooks\',");
document.writeln("				timers = jQuery.timers,");
document.writeln("				data = jQuery._data( this );");
document.writeln("");
document.writeln("			if ( index ) {");
document.writeln("				if ( data[ index ] && data[ index ].stop ) {");
document.writeln("					stopQueue( data[ index ] );");
document.writeln("				}");
document.writeln("			} else {");
document.writeln("				for ( index in data ) {");
document.writeln("					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {");
document.writeln("						stopQueue( data[ index ] );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			for ( index = timers.length; index--; ) {");
document.writeln("				if ( timers[ index ].elem === this &&");
document.writeln("					( type == null || timers[ index ].queue === type ) ) {");
document.writeln("");
document.writeln("					timers[ index ].anim.stop( gotoEnd );");
document.writeln("					dequeue = false;");
document.writeln("					timers.splice( index, 1 );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// start the next in the queue if the last step wasn\'t forced");
document.writeln("			// timers currently will call their complete callbacks, which will dequeue");
document.writeln("			// but only if they were gotoEnd");
document.writeln("			if ( dequeue || !gotoEnd ) {");
document.writeln("				jQuery.dequeue( this, type );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("	finish: function( type ) {");
document.writeln("		if ( type !== false ) {");
document.writeln("			type = type || \'fx\';");
document.writeln("		}");
document.writeln("		return this.each( function() {");
document.writeln("			var index,");
document.writeln("				data = jQuery._data( this ),");
document.writeln("				queue = data[ type + \'queue\' ],");
document.writeln("				hooks = data[ type + \'queueHooks\' ],");
document.writeln("				timers = jQuery.timers,");
document.writeln("				length = queue ? queue.length : 0;");
document.writeln("");
document.writeln("			// enable finishing flag on private data");
document.writeln("			data.finish = true;");
document.writeln("");
document.writeln("			// empty the queue first");
document.writeln("			jQuery.queue( this, type, [] );");
document.writeln("");
document.writeln("			if ( hooks && hooks.stop ) {");
document.writeln("				hooks.stop.call( this, true );");
document.writeln("			}");
document.writeln("");
document.writeln("			// look for any active animations, and finish them");
document.writeln("			for ( index = timers.length; index--; ) {");
document.writeln("				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {");
document.writeln("					timers[ index ].anim.stop( true );");
document.writeln("					timers.splice( index, 1 );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// look for any animations in the old queue and finish them");
document.writeln("			for ( index = 0; index < length; index++ ) {");
document.writeln("				if ( queue[ index ] && queue[ index ].finish ) {");
document.writeln("					queue[ index ].finish.call( this );");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// turn off finishing flag");
document.writeln("			delete data.finish;");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.each( [ \'toggle\', \'show\', \'hide\' ], function( i, name ) {");
document.writeln("	var cssFn = jQuery.fn[ name ];");
document.writeln("	jQuery.fn[ name ] = function( speed, easing, callback ) {");
document.writeln("		return speed == null || typeof speed === \'boolean\' ?");
document.writeln("			cssFn.apply( this, arguments ) :");
document.writeln("			this.animate( genFx( name, true ), speed, easing, callback );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("// Generate shortcuts for custom animations");
document.writeln("jQuery.each( {");
document.writeln("	slideDown: genFx( \'show\' ),");
document.writeln("	slideUp: genFx( \'hide\' ),");
document.writeln("	slideToggle: genFx( \'toggle\' ),");
document.writeln("	fadeIn: { opacity: \'show\' },");
document.writeln("	fadeOut: { opacity: \'hide\' },");
document.writeln("	fadeToggle: { opacity: \'toggle\' }");
document.writeln("}, function( name, props ) {");
document.writeln("	jQuery.fn[ name ] = function( speed, easing, callback ) {");
document.writeln("		return this.animate( props, speed, easing, callback );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.timers = [];");
document.writeln("jQuery.fx.tick = function() {");
document.writeln("	var timer,");
document.writeln("		timers = jQuery.timers,");
document.writeln("		i = 0;");
document.writeln("");
document.writeln("	fxNow = jQuery.now();");
document.writeln("");
document.writeln("	for ( ; i < timers.length; i++ ) {");
document.writeln("		timer = timers[ i ];");
document.writeln("");
document.writeln("		// Checks the timer has not already been removed");
document.writeln("		if ( !timer() && timers[ i ] === timer ) {");
document.writeln("			timers.splice( i--, 1 );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( !timers.length ) {");
document.writeln("		jQuery.fx.stop();");
document.writeln("	}");
document.writeln("	fxNow = undefined;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fx.timer = function( timer ) {");
document.writeln("	jQuery.timers.push( timer );");
document.writeln("	if ( timer() ) {");
document.writeln("		jQuery.fx.start();");
document.writeln("	} else {");
document.writeln("		jQuery.timers.pop();");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fx.interval = 13;");
document.writeln("");
document.writeln("jQuery.fx.start = function() {");
document.writeln("	if ( !timerId ) {");
document.writeln("		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fx.stop = function() {");
document.writeln("	window.clearInterval( timerId );");
document.writeln("	timerId = null;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fx.speeds = {");
document.writeln("	slow: 600,");
document.writeln("	fast: 200,");
document.writeln("");
document.writeln("	// Default speed");
document.writeln("	_default: 400");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("// Based off of the plugin by Clint Helfers, with permission.");
document.writeln("// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/");
document.writeln("jQuery.fn.delay = function( time, type ) {");
document.writeln("	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;");
document.writeln("	type = type || \'fx\';");
document.writeln("");
document.writeln("	return this.queue( type, function( next, hooks ) {");
document.writeln("		var timeout = window.setTimeout( next, time );");
document.writeln("		hooks.stop = function() {");
document.writeln("			window.clearTimeout( timeout );");
document.writeln("		};");
document.writeln("	} );");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("( function() {");
document.writeln("	var a,");
document.writeln("		input = document.createElement( \'input\' ),");
document.writeln("		div = document.createElement( \'div\' ),");
document.writeln("		select = document.createElement( \'select\' ),");
document.writeln("		opt = select.appendChild( document.createElement( \'option\' ) );");
document.writeln("");
document.writeln("	// Setup");
document.writeln("	div = document.createElement( \'div\' );");
document.writeln("	div.setAttribute( \'className\', \'t\' );");
document.writeln("	div.innerHTML = \'  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>\';");
document.writeln("	a = div.getElementsByTagName( \'a\' )[ 0 ];");
document.writeln("");
document.writeln("	// Support: Windows Web Apps (WWA)");
document.writeln("	// `type` must use .setAttribute for WWA (#14901)");
document.writeln("	input.setAttribute( \'type\', \'checkbox\' );");
document.writeln("	div.appendChild( input );");
document.writeln("");
document.writeln("	a = div.getElementsByTagName( \'a\' )[ 0 ];");
document.writeln("");
document.writeln("	// First batch of tests.");
document.writeln("	a.style.cssText = \'top:1px\';");
document.writeln("");
document.writeln("	// Test setAttribute on camelCase class.");
document.writeln("	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)");
document.writeln("	support.getSetAttribute = div.className !== \'t\';");
document.writeln("");
document.writeln("	// Get the style information from getAttribute");
document.writeln("	// (IE uses .cssText instead)");
document.writeln("	support.style = /top/.test( a.getAttribute( \'style\' ) );");
document.writeln("");
document.writeln("	// Make sure that URLs aren\'t manipulated");
document.writeln("	// (IE normalizes it by default)");
document.writeln("	support.hrefNormalized = a.getAttribute( \'href\' ) === \'/a\';");
document.writeln("");
document.writeln("	// Check the default checkbox/radio value (\'\' on WebKit; \'on\' elsewhere)");
document.writeln("	support.checkOn = !!input.value;");
document.writeln("");
document.writeln("	// Make sure that a selected-by-default option has a working selected property.");
document.writeln("	// (WebKit defaults to false instead of true, IE too, if it\'s in an optgroup)");
document.writeln("	support.optSelected = opt.selected;");
document.writeln("");
document.writeln("	// Tests for enctype support on a form (#6743)");
document.writeln("	support.enctype = !!document.createElement( \'form\' ).enctype;");
document.writeln("");
document.writeln("	// Make sure that the options inside disabled selects aren\'t marked as disabled");
document.writeln("	// (WebKit marks them as disabled)");
document.writeln("	select.disabled = true;");
document.writeln("	support.optDisabled = !opt.disabled;");
document.writeln("");
document.writeln("	// Support: IE8 only");
document.writeln("	// Check if we can trust getAttribute(\'value\')");
document.writeln("	input = document.createElement( \'input\' );");
document.writeln("	input.setAttribute( \'value\', \'\' );");
document.writeln("	support.input = input.getAttribute( \'value\' ) === \'\';");
document.writeln("");
document.writeln("	// Check if an input maintains its value after becoming a radio");
document.writeln("	input.value = \'t\';");
document.writeln("	input.setAttribute( \'type\', \'radio\' );");
document.writeln("	support.radioValue = input.value === \'t\';");
document.writeln("} )();");
document.writeln("");
document.writeln("");
document.writeln("var rreturn = /\/\/r/g,");
document.writeln("	rspaces = /[\/\/x20\/\/t\/\/r\/\/n\/\/f]+/g;");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	val: function( value ) {");
document.writeln("		var hooks, ret, isFunction,");
document.writeln("			elem = this[ 0 ];");
document.writeln("");
document.writeln("		if ( !arguments.length ) {");
document.writeln("			if ( elem ) {");
document.writeln("				hooks = jQuery.valHooks[ elem.type ] ||");
document.writeln("					jQuery.valHooks[ elem.nodeName.toLowerCase() ];");
document.writeln("");
document.writeln("				if (");
document.writeln("					hooks &&");
document.writeln("					\'get\' in hooks &&");
document.writeln("					( ret = hooks.get( elem, \'value\' ) ) !== undefined");
document.writeln("				) {");
document.writeln("					return ret;");
document.writeln("				}");
document.writeln("");
document.writeln("				ret = elem.value;");
document.writeln("");
document.writeln("				return typeof ret === \'string\' ?");
document.writeln("");
document.writeln("					// handle most common string cases");
document.writeln("					ret.replace( rreturn, \'\' ) :");
document.writeln("");
document.writeln("					// handle cases where value is null/undef or number");
document.writeln("					ret == null ? \'\' : ret;");
document.writeln("			}");
document.writeln("");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		isFunction = jQuery.isFunction( value );");
document.writeln("");
document.writeln("		return this.each( function( i ) {");
document.writeln("			var val;");
document.writeln("");
document.writeln("			if ( this.nodeType !== 1 ) {");
document.writeln("				return;");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( isFunction ) {");
document.writeln("				val = value.call( this, i, jQuery( this ).val() );");
document.writeln("			} else {");
document.writeln("				val = value;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Treat null/undefined as \'\'; convert numbers to string");
document.writeln("			if ( val == null ) {");
document.writeln("				val = \'\';");
document.writeln("			} else if ( typeof val === \'number\' ) {");
document.writeln("				val += \'\';");
document.writeln("			} else if ( jQuery.isArray( val ) ) {");
document.writeln("				val = jQuery.map( val, function( value ) {");
document.writeln("					return value == null ? \'\' : value + \'\';");
document.writeln("				} );");
document.writeln("			}");
document.writeln("");
document.writeln("			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];");
document.writeln("");
document.writeln("			// If set returns undefined, fall back to normal setting");
document.writeln("			if ( !hooks || !( \'set\' in hooks ) || hooks.set( this, val, \'value\' ) === undefined ) {");
document.writeln("				this.value = val;");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	valHooks: {");
document.writeln("		option: {");
document.writeln("			get: function( elem ) {");
document.writeln("				var val = jQuery.find.attr( elem, \'value\' );");
document.writeln("				return val != null ?");
document.writeln("					val :");
document.writeln("");
document.writeln("					// Support: IE10-11+");
document.writeln("					// option.text throws exceptions (#14686, #14858)");
document.writeln("					// Strip and collapse whitespace");
document.writeln("					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace");
document.writeln("					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, \' \' );");
document.writeln("			}");
document.writeln("		},");
document.writeln("		select: {");
document.writeln("			get: function( elem ) {");
document.writeln("				var value, option,");
document.writeln("					options = elem.options,");
document.writeln("					index = elem.selectedIndex,");
document.writeln("					one = elem.type === \'select-one\' || index < 0,");
document.writeln("					values = one ? null : [],");
document.writeln("					max = one ? index + 1 : options.length,");
document.writeln("					i = index < 0 ?");
document.writeln("						max :");
document.writeln("						one ? index : 0;");
document.writeln("");
document.writeln("				// Loop through all the selected options");
document.writeln("				for ( ; i < max; i++ ) {");
document.writeln("					option = options[ i ];");
document.writeln("");
document.writeln("					// oldIE doesn\'t update selected after form reset (#2551)");
document.writeln("					if ( ( option.selected || i === index ) &&");
document.writeln("");
document.writeln("							// Don\'t return options that are disabled or in a disabled optgroup");
document.writeln("							( support.optDisabled ?");
document.writeln("								!option.disabled :");
document.writeln("								option.getAttribute( \'disabled\' ) === null ) &&");
document.writeln("							( !option.parentNode.disabled ||");
document.writeln("								!jQuery.nodeName( option.parentNode, \'optgroup\' ) ) ) {");
document.writeln("");
document.writeln("						// Get the specific value for the option");
document.writeln("						value = jQuery( option ).val();");
document.writeln("");
document.writeln("						// We don\'t need an array for one selects");
document.writeln("						if ( one ) {");
document.writeln("							return value;");
document.writeln("						}");
document.writeln("");
document.writeln("						// Multi-Selects return an array");
document.writeln("						values.push( value );");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				return values;");
document.writeln("			},");
document.writeln("");
document.writeln("			set: function( elem, value ) {");
document.writeln("				var optionSet, option,");
document.writeln("					options = elem.options,");
document.writeln("					values = jQuery.makeArray( value ),");
document.writeln("					i = options.length;");
document.writeln("");
document.writeln("				while ( i-- ) {");
document.writeln("					option = options[ i ];");
document.writeln("");
document.writeln("					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {");
document.writeln("");
document.writeln("						// Support: IE6");
document.writeln("						// When new option element is added to select box we need to");
document.writeln("						// force reflow of newly added node in order to workaround delay");
document.writeln("						// of initialization properties");
document.writeln("						try {");
document.writeln("							option.selected = optionSet = true;");
document.writeln("");
document.writeln("						} catch ( _ ) {");
document.writeln("");
document.writeln("							// Will be executed only in IE6");
document.writeln("							option.scrollHeight;");
document.writeln("						}");
document.writeln("");
document.writeln("					} else {");
document.writeln("						option.selected = false;");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				// Force browsers to behave consistently when non-matching value is set");
document.writeln("				if ( !optionSet ) {");
document.writeln("					elem.selectedIndex = -1;");
document.writeln("				}");
document.writeln("");
document.writeln("				return options;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Radios and checkboxes getter/setter");
document.writeln("jQuery.each( [ \'radio\', \'checkbox\' ], function() {");
document.writeln("	jQuery.valHooks[ this ] = {");
document.writeln("		set: function( elem, value ) {");
document.writeln("			if ( jQuery.isArray( value ) ) {");
document.writeln("				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	};");
document.writeln("	if ( !support.checkOn ) {");
document.writeln("		jQuery.valHooks[ this ].get = function( elem ) {");
document.writeln("			return elem.getAttribute( \'value\' ) === null ? \'on\' : elem.value;");
document.writeln("		};");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var nodeHook, boolHook,");
document.writeln("	attrHandle = jQuery.expr.attrHandle,");
document.writeln("	ruseDefault = /^(?:checked|selected)$/i,");
document.writeln("	getSetAttribute = support.getSetAttribute,");
document.writeln("	getSetInput = support.input;");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	attr: function( name, value ) {");
document.writeln("		return access( this, jQuery.attr, name, value, arguments.length > 1 );");
document.writeln("	},");
document.writeln("");
document.writeln("	removeAttr: function( name ) {");
document.writeln("		return this.each( function() {");
document.writeln("			jQuery.removeAttr( this, name );");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	attr: function( elem, name, value ) {");
document.writeln("		var ret, hooks,");
document.writeln("			nType = elem.nodeType;");
document.writeln("");
document.writeln("		// Don\'t get/set attributes on text, comment and attribute nodes");
document.writeln("		if ( nType === 3 || nType === 8 || nType === 2 ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Fallback to prop when attributes are not supported");
document.writeln("		if ( typeof elem.getAttribute === \'undefined\' ) {");
document.writeln("			return jQuery.prop( elem, name, value );");
document.writeln("		}");
document.writeln("");
document.writeln("		// All attributes are lowercase");
document.writeln("		// Grab necessary hook if one is defined");
document.writeln("		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {");
document.writeln("			name = name.toLowerCase();");
document.writeln("			hooks = jQuery.attrHooks[ name ] ||");
document.writeln("				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( value !== undefined ) {");
document.writeln("			if ( value === null ) {");
document.writeln("				jQuery.removeAttr( elem, name );");
document.writeln("				return;");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( hooks && \'set\' in hooks &&");
document.writeln("				( ret = hooks.set( elem, value, name ) ) !== undefined ) {");
document.writeln("				return ret;");
document.writeln("			}");
document.writeln("");
document.writeln("			elem.setAttribute( name, value + \'\' );");
document.writeln("			return value;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( hooks && \'get\' in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {");
document.writeln("			return ret;");
document.writeln("		}");
document.writeln("");
document.writeln("		ret = jQuery.find.attr( elem, name );");
document.writeln("");
document.writeln("		// Non-existent attributes return null, we normalize to undefined");
document.writeln("		return ret == null ? undefined : ret;");
document.writeln("	},");
document.writeln("");
document.writeln("	attrHooks: {");
document.writeln("		type: {");
document.writeln("			set: function( elem, value ) {");
document.writeln("				if ( !support.radioValue && value === \'radio\' &&");
document.writeln("					jQuery.nodeName( elem, \'input\' ) ) {");
document.writeln("");
document.writeln("					// Setting the type on a radio button after the value resets the value in IE8-9");
document.writeln("					// Reset value to default in case type is set after value during creation");
document.writeln("					var val = elem.value;");
document.writeln("					elem.setAttribute( \'type\', value );");
document.writeln("					if ( val ) {");
document.writeln("						elem.value = val;");
document.writeln("					}");
document.writeln("					return value;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	removeAttr: function( elem, value ) {");
document.writeln("		var name, propName,");
document.writeln("			i = 0,");
document.writeln("			attrNames = value && value.match( rnotwhite );");
document.writeln("");
document.writeln("		if ( attrNames && elem.nodeType === 1 ) {");
document.writeln("			while ( ( name = attrNames[ i++ ] ) ) {");
document.writeln("				propName = jQuery.propFix[ name ] || name;");
document.writeln("");
document.writeln("				// Boolean attributes get special treatment (#10870)");
document.writeln("				if ( jQuery.expr.match.bool.test( name ) ) {");
document.writeln("");
document.writeln("					// Set corresponding property to false");
document.writeln("					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {");
document.writeln("						elem[ propName ] = false;");
document.writeln("");
document.writeln("					// Support: IE<9");
document.writeln("					// Also clear defaultChecked/defaultSelected (if appropriate)");
document.writeln("					} else {");
document.writeln("						elem[ jQuery.camelCase( \'default-\' + name ) ] =");
document.writeln("							elem[ propName ] = false;");
document.writeln("					}");
document.writeln("");
document.writeln("				// See #9699 for explanation of this approach (setting first, then removal)");
document.writeln("				} else {");
document.writeln("					jQuery.attr( elem, name, \'\' );");
document.writeln("				}");
document.writeln("");
document.writeln("				elem.removeAttribute( getSetAttribute ? name : propName );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Hooks for boolean attributes");
document.writeln("boolHook = {");
document.writeln("	set: function( elem, value, name ) {");
document.writeln("		if ( value === false ) {");
document.writeln("");
document.writeln("			// Remove boolean attributes when set to false");
document.writeln("			jQuery.removeAttr( elem, name );");
document.writeln("		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {");
document.writeln("");
document.writeln("			// IE<8 needs the *property* name");
document.writeln("			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );");
document.writeln("");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// Support: IE<9");
document.writeln("			// Use defaultChecked and defaultSelected for oldIE");
document.writeln("			elem[ jQuery.camelCase( \'default-\' + name ) ] = elem[ name ] = true;");
document.writeln("		}");
document.writeln("		return name;");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.each( jQuery.expr.match.bool.source.match( /\/\/w+/g ), function( i, name ) {");
document.writeln("	var getter = attrHandle[ name ] || jQuery.find.attr;");
document.writeln("");
document.writeln("	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {");
document.writeln("		attrHandle[ name ] = function( elem, name, isXML ) {");
document.writeln("			var ret, handle;");
document.writeln("			if ( !isXML ) {");
document.writeln("");
document.writeln("				// Avoid an infinite loop by temporarily removing this function from the getter");
document.writeln("				handle = attrHandle[ name ];");
document.writeln("				attrHandle[ name ] = ret;");
document.writeln("				ret = getter( elem, name, isXML ) != null ?");
document.writeln("					name.toLowerCase() :");
document.writeln("					null;");
document.writeln("				attrHandle[ name ] = handle;");
document.writeln("			}");
document.writeln("			return ret;");
document.writeln("		};");
document.writeln("	} else {");
document.writeln("		attrHandle[ name ] = function( elem, name, isXML ) {");
document.writeln("			if ( !isXML ) {");
document.writeln("				return elem[ jQuery.camelCase( \'default-\' + name ) ] ?");
document.writeln("					name.toLowerCase() :");
document.writeln("					null;");
document.writeln("			}");
document.writeln("		};");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// fix oldIE attroperties");
document.writeln("if ( !getSetInput || !getSetAttribute ) {");
document.writeln("	jQuery.attrHooks.value = {");
document.writeln("		set: function( elem, value, name ) {");
document.writeln("			if ( jQuery.nodeName( elem, \'input\' ) ) {");
document.writeln("");
document.writeln("				// Does not return so that setAttribute is also used");
document.writeln("				elem.defaultValue = value;");
document.writeln("			} else {");
document.writeln("");
document.writeln("				// Use nodeHook if defined (#1954); otherwise setAttribute is fine");
document.writeln("				return nodeHook && nodeHook.set( elem, value, name );");
document.writeln("			}");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("// IE6/7 do not support getting/setting some attributes with get/setAttribute");
document.writeln("if ( !getSetAttribute ) {");
document.writeln("");
document.writeln("	// Use this for any attribute in IE6/7");
document.writeln("	// This fixes almost every IE6/7 issue");
document.writeln("	nodeHook = {");
document.writeln("		set: function( elem, value, name ) {");
document.writeln("");
document.writeln("			// Set the existing or create a new attribute node");
document.writeln("			var ret = elem.getAttributeNode( name );");
document.writeln("			if ( !ret ) {");
document.writeln("				elem.setAttributeNode(");
document.writeln("					( ret = elem.ownerDocument.createAttribute( name ) )");
document.writeln("				);");
document.writeln("			}");
document.writeln("");
document.writeln("			ret.value = value += \'\';");
document.writeln("");
document.writeln("			// Break association with cloned elements by also using setAttribute (#9646)");
document.writeln("			if ( name === \'value\' || value === elem.getAttribute( name ) ) {");
document.writeln("				return value;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("	// Some attributes are constructed with empty-string values when not defined");
document.writeln("	attrHandle.id = attrHandle.name = attrHandle.coords =");
document.writeln("		function( elem, name, isXML ) {");
document.writeln("			var ret;");
document.writeln("			if ( !isXML ) {");
document.writeln("				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== \'\' ?");
document.writeln("					ret.value :");
document.writeln("					null;");
document.writeln("			}");
document.writeln("		};");
document.writeln("");
document.writeln("	// Fixing value retrieval on a button requires this module");
document.writeln("	jQuery.valHooks.button = {");
document.writeln("		get: function( elem, name ) {");
document.writeln("			var ret = elem.getAttributeNode( name );");
document.writeln("			if ( ret && ret.specified ) {");
document.writeln("				return ret.value;");
document.writeln("			}");
document.writeln("		},");
document.writeln("		set: nodeHook.set");
document.writeln("	};");
document.writeln("");
document.writeln("	// Set contenteditable to false on removals(#10429)");
document.writeln("	// Setting to empty string throws an error as an invalid value");
document.writeln("	jQuery.attrHooks.contenteditable = {");
document.writeln("		set: function( elem, value, name ) {");
document.writeln("			nodeHook.set( elem, value === \'\' ? false : value, name );");
document.writeln("		}");
document.writeln("	};");
document.writeln("");
document.writeln("	// Set width and height to auto instead of 0 on empty string( Bug #8150 )");
document.writeln("	// This is for removals");
document.writeln("	jQuery.each( [ \'width\', \'height\' ], function( i, name ) {");
document.writeln("		jQuery.attrHooks[ name ] = {");
document.writeln("			set: function( elem, value ) {");
document.writeln("				if ( value === \'\' ) {");
document.writeln("					elem.setAttribute( name, \'auto\' );");
document.writeln("					return value;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		};");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("if ( !support.style ) {");
document.writeln("	jQuery.attrHooks.style = {");
document.writeln("		get: function( elem ) {");
document.writeln("");
document.writeln("			// Return undefined in the case of empty string");
document.writeln("			// Note: IE uppercases css property names, but if we were to .toLowerCase()");
document.writeln("			// .cssText, that would destroy case sensitivity in URL\'s, like in \'background\'");
document.writeln("			return elem.style.cssText || undefined;");
document.writeln("		},");
document.writeln("		set: function( elem, value ) {");
document.writeln("			return ( elem.style.cssText = value + \'\' );");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var rfocusable = /^(?:input|select|textarea|button|object)$/i,");
document.writeln("	rclickable = /^(?:a|area)$/i;");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	prop: function( name, value ) {");
document.writeln("		return access( this, jQuery.prop, name, value, arguments.length > 1 );");
document.writeln("	},");
document.writeln("");
document.writeln("	removeProp: function( name ) {");
document.writeln("		name = jQuery.propFix[ name ] || name;");
document.writeln("		return this.each( function() {");
document.writeln("");
document.writeln("			// try/catch handles cases where IE balks (such as removing a property on window)");
document.writeln("			try {");
document.writeln("				this[ name ] = undefined;");
document.writeln("				delete this[ name ];");
document.writeln("			} catch ( e ) {}");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("	prop: function( elem, name, value ) {");
document.writeln("		var ret, hooks,");
document.writeln("			nType = elem.nodeType;");
document.writeln("");
document.writeln("		// Don\'t get/set properties on text, comment and attribute nodes");
document.writeln("		if ( nType === 3 || nType === 8 || nType === 2 ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {");
document.writeln("");
document.writeln("			// Fix name and attach hooks");
document.writeln("			name = jQuery.propFix[ name ] || name;");
document.writeln("			hooks = jQuery.propHooks[ name ];");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( value !== undefined ) {");
document.writeln("			if ( hooks && \'set\' in hooks &&");
document.writeln("				( ret = hooks.set( elem, value, name ) ) !== undefined ) {");
document.writeln("				return ret;");
document.writeln("			}");
document.writeln("");
document.writeln("			return ( elem[ name ] = value );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( hooks && \'get\' in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {");
document.writeln("			return ret;");
document.writeln("		}");
document.writeln("");
document.writeln("		return elem[ name ];");
document.writeln("	},");
document.writeln("");
document.writeln("	propHooks: {");
document.writeln("		tabIndex: {");
document.writeln("			get: function( elem ) {");
document.writeln("");
document.writeln("				// elem.tabIndex doesn\'t always return the");
document.writeln("				// correct value when it hasn\'t been explicitly set");
document.writeln("				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/");
document.writeln("				// Use proper attribute retrieval(#12072)");
document.writeln("				var tabindex = jQuery.find.attr( elem, \'tabindex\' );");
document.writeln("");
document.writeln("				return tabindex ?");
document.writeln("					parseInt( tabindex, 10 ) :");
document.writeln("					rfocusable.test( elem.nodeName ) ||");
document.writeln("						rclickable.test( elem.nodeName ) && elem.href ?");
document.writeln("							0 :");
document.writeln("							-1;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	propFix: {");
document.writeln("		\'for\': \'htmlFor\',");
document.writeln("		\'class\': \'className\'");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Some attributes require a special call on IE");
document.writeln("// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx");
document.writeln("if ( !support.hrefNormalized ) {");
document.writeln("");
document.writeln("	// href/src property should get the full normalized URL (#10299/#12915)");
document.writeln("	jQuery.each( [ \'href\', \'src\' ], function( i, name ) {");
document.writeln("		jQuery.propHooks[ name ] = {");
document.writeln("			get: function( elem ) {");
document.writeln("				return elem.getAttribute( name, 4 );");
document.writeln("			}");
document.writeln("		};");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("// Support: Safari, IE9+");
document.writeln("// Accessing the selectedIndex property");
document.writeln("// forces the browser to respect setting selected");
document.writeln("// on the option");
document.writeln("// The getter ensures a default option is selected");
document.writeln("// when in an optgroup");
document.writeln("if ( !support.optSelected ) {");
document.writeln("	jQuery.propHooks.selected = {");
document.writeln("		get: function( elem ) {");
document.writeln("			var parent = elem.parentNode;");
document.writeln("");
document.writeln("			if ( parent ) {");
document.writeln("				parent.selectedIndex;");
document.writeln("");
document.writeln("				// Make sure that it also works with optgroups, see #5701");
document.writeln("				if ( parent.parentNode ) {");
document.writeln("					parent.parentNode.selectedIndex;");
document.writeln("				}");
document.writeln("			}");
document.writeln("			return null;");
document.writeln("		},");
document.writeln("		set: function( elem ) {");
document.writeln("			var parent = elem.parentNode;");
document.writeln("			if ( parent ) {");
document.writeln("				parent.selectedIndex;");
document.writeln("");
document.writeln("				if ( parent.parentNode ) {");
document.writeln("					parent.parentNode.selectedIndex;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.each( [");
document.writeln("	\'tabIndex\',");
document.writeln("	\'readOnly\',");
document.writeln("	\'maxLength\',");
document.writeln("	\'cellSpacing\',");
document.writeln("	\'cellPadding\',");
document.writeln("	\'rowSpan\',");
document.writeln("	\'colSpan\',");
document.writeln("	\'useMap\',");
document.writeln("	\'frameBorder\',");
document.writeln("	\'contentEditable\'");
document.writeln("], function() {");
document.writeln("	jQuery.propFix[ this.toLowerCase() ] = this;");
document.writeln("} );");
document.writeln("");
document.writeln("// IE6/7 call enctype encoding");
document.writeln("if ( !support.enctype ) {");
document.writeln("	jQuery.propFix.enctype = \'encoding\';");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var rclass = /[\/\/t\/\/r\/\/n\/\/f]/g;");
document.writeln("");
document.writeln("function getClass( elem ) {");
document.writeln("	return jQuery.attr( elem, \'class\' ) || \'\';");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	addClass: function( value ) {");
document.writeln("		var classes, elem, cur, curValue, clazz, j, finalValue,");
document.writeln("			i = 0;");
document.writeln("");
document.writeln("		if ( jQuery.isFunction( value ) ) {");
document.writeln("			return this.each( function( j ) {");
document.writeln("				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( typeof value === \'string\' && value ) {");
document.writeln("			classes = value.match( rnotwhite ) || [];");
document.writeln("");
document.writeln("			while ( ( elem = this[ i++ ] ) ) {");
document.writeln("				curValue = getClass( elem );");
document.writeln("				cur = elem.nodeType === 1 &&");
document.writeln("					( \' \' + curValue + \' \' ).replace( rclass, \' \' );");
document.writeln("");
document.writeln("				if ( cur ) {");
document.writeln("					j = 0;");
document.writeln("					while ( ( clazz = classes[ j++ ] ) ) {");
document.writeln("						if ( cur.indexOf( \' \' + clazz + \' \' ) < 0 ) {");
document.writeln("							cur += clazz + \' \';");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// only assign if different to avoid unneeded rendering.");
document.writeln("					finalValue = jQuery.trim( cur );");
document.writeln("					if ( curValue !== finalValue ) {");
document.writeln("						jQuery.attr( elem, \'class\', finalValue );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return this;");
document.writeln("	},");
document.writeln("");
document.writeln("	removeClass: function( value ) {");
document.writeln("		var classes, elem, cur, curValue, clazz, j, finalValue,");
document.writeln("			i = 0;");
document.writeln("");
document.writeln("		if ( jQuery.isFunction( value ) ) {");
document.writeln("			return this.each( function( j ) {");
document.writeln("				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( !arguments.length ) {");
document.writeln("			return this.attr( \'class\', \'\' );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( typeof value === \'string\' && value ) {");
document.writeln("			classes = value.match( rnotwhite ) || [];");
document.writeln("");
document.writeln("			while ( ( elem = this[ i++ ] ) ) {");
document.writeln("				curValue = getClass( elem );");
document.writeln("");
document.writeln("				// This expression is here for better compressibility (see addClass)");
document.writeln("				cur = elem.nodeType === 1 &&");
document.writeln("					( \' \' + curValue + \' \' ).replace( rclass, \' \' );");
document.writeln("");
document.writeln("				if ( cur ) {");
document.writeln("					j = 0;");
document.writeln("					while ( ( clazz = classes[ j++ ] ) ) {");
document.writeln("");
document.writeln("						// Remove *all* instances");
document.writeln("						while ( cur.indexOf( \' \' + clazz + \' \' ) > -1 ) {");
document.writeln("							cur = cur.replace( \' \' + clazz + \' \', \' \' );");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// Only assign if different to avoid unneeded rendering.");
document.writeln("					finalValue = jQuery.trim( cur );");
document.writeln("					if ( curValue !== finalValue ) {");
document.writeln("						jQuery.attr( elem, \'class\', finalValue );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return this;");
document.writeln("	},");
document.writeln("");
document.writeln("	toggleClass: function( value, stateVal ) {");
document.writeln("		var type = typeof value;");
document.writeln("");
document.writeln("		if ( typeof stateVal === \'boolean\' && type === \'string\' ) {");
document.writeln("			return stateVal ? this.addClass( value ) : this.removeClass( value );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( jQuery.isFunction( value ) ) {");
document.writeln("			return this.each( function( i ) {");
document.writeln("				jQuery( this ).toggleClass(");
document.writeln("					value.call( this, i, getClass( this ), stateVal ),");
document.writeln("					stateVal");
document.writeln("				);");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.each( function() {");
document.writeln("			var className, i, self, classNames;");
document.writeln("");
document.writeln("			if ( type === \'string\' ) {");
document.writeln("");
document.writeln("				// Toggle individual class names");
document.writeln("				i = 0;");
document.writeln("				self = jQuery( this );");
document.writeln("				classNames = value.match( rnotwhite ) || [];");
document.writeln("");
document.writeln("				while ( ( className = classNames[ i++ ] ) ) {");
document.writeln("");
document.writeln("					// Check each className given, space separated list");
document.writeln("					if ( self.hasClass( className ) ) {");
document.writeln("						self.removeClass( className );");
document.writeln("					} else {");
document.writeln("						self.addClass( className );");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("			// Toggle whole class name");
document.writeln("			} else if ( value === undefined || type === \'boolean\' ) {");
document.writeln("				className = getClass( this );");
document.writeln("				if ( className ) {");
document.writeln("");
document.writeln("					// store className if set");
document.writeln("					jQuery._data( this, \'__className__\', className );");
document.writeln("				}");
document.writeln("");
document.writeln("				// If the element has a class name or if we\'re passed \'false\',");
document.writeln("				// then remove the whole classname (if there was one, the above saved it).");
document.writeln("				// Otherwise bring back whatever was previously saved (if anything),");
document.writeln("				// falling back to the empty string if nothing was stored.");
document.writeln("				jQuery.attr( this, \'class\',");
document.writeln("					className || value === false ?");
document.writeln("					\'\' :");
document.writeln("					jQuery._data( this, \'__className__\' ) || \'\'");
document.writeln("				);");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	hasClass: function( selector ) {");
document.writeln("		var className, elem,");
document.writeln("			i = 0;");
document.writeln("");
document.writeln("		className = \' \' + selector + \' \';");
document.writeln("		while ( ( elem = this[ i++ ] ) ) {");
document.writeln("			if ( elem.nodeType === 1 &&");
document.writeln("				( \' \' + getClass( elem ) + \' \' ).replace( rclass, \' \' )");
document.writeln("					.indexOf( className ) > -1");
document.writeln("			) {");
document.writeln("				return true;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return false;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Return jQuery for attributes-only inclusion");
document.writeln("");
document.writeln("");
document.writeln("jQuery.each( ( \'blur focus focusin focusout load resize scroll unload click dblclick \' +");
document.writeln("	\'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \' +");
document.writeln("	\'change select submit keydown keypress keyup error contextmenu\' ).split( \' \' ),");
document.writeln("	function( i, name ) {");
document.writeln("");
document.writeln("	// Handle event binding");
document.writeln("	jQuery.fn[ name ] = function( data, fn ) {");
document.writeln("		return arguments.length > 0 ?");
document.writeln("			this.on( name, null, data, fn ) :");
document.writeln("			this.trigger( name );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	hover: function( fnOver, fnOut ) {");
document.writeln("		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("var location = window.location;");
document.writeln("");
document.writeln("var nonce = jQuery.now();");
document.writeln("");
document.writeln("var rquery = ( /\/\/?/ );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var rvalidtokens = /(,)|(\/\/[|{)|(}|])|\'(?:[^\'\/\/\/\/\/\/r\/\/n]|\/\/\/\/[\'\/\/\/\/\/\//bfnrt]|\/\/\/\/u[\/\/da-fA-F]{4})*\'\/\/s*:?|true|false|null|-?(?!0\/\/d)\/\/d+(?:\/\/.\/\/d+|)(?:[eE][+-]?\/\/d+|)/g;");
document.writeln("");
document.writeln("jQuery.parseJSON = function( data ) {");
document.writeln("");
document.writeln("	// Attempt to parse using the native JSON parser first");
document.writeln("	if ( window.JSON && window.JSON.parse ) {");
document.writeln("");
document.writeln("		// Support: Android 2.3");
document.writeln("		// Workaround failure to string-cast null input");
document.writeln("		return window.JSON.parse( data + \'\' );");
document.writeln("	}");
document.writeln("");
document.writeln("	var requireNonComma,");
document.writeln("		depth = null,");
document.writeln("		str = jQuery.trim( data + \'\' );");
document.writeln("");
document.writeln("	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains");
document.writeln("	// after removing valid tokens");
document.writeln("	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {");
document.writeln("");
document.writeln("		// Force termination if we see a misplaced comma");
document.writeln("		if ( requireNonComma && comma ) {");
document.writeln("			depth = 0;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Perform no more replacements after returning to outermost depth");
document.writeln("		if ( depth === 0 ) {");
document.writeln("			return token;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Commas must not follow \'[\', \'{\', or \',\'");
document.writeln("		requireNonComma = open || comma;");
document.writeln("");
document.writeln("		// Determine new depth");
document.writeln("		// array/object open (\'[\' or \'{\'): depth += true - false (increment)");
document.writeln("		// array/object close (\']\' or \'}\'): depth += false - true (decrement)");
document.writeln("		// other cases (\',\' or primitive): depth += true - true (numeric cast)");
document.writeln("		depth += !close - !open;");
document.writeln("");
document.writeln("		// Remove this token");
document.writeln("		return \'\';");
document.writeln("	} ) ) ?");
document.writeln("		( Function( \'return \' + str ) )() :");
document.writeln("		jQuery.error( \'Invalid JSON: \' + data );");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("// Cross-browser xml parsing");
document.writeln("jQuery.parseXML = function( data ) {");
document.writeln("	var xml, tmp;");
document.writeln("	if ( !data || typeof data !== \'string\' ) {");
document.writeln("		return null;");
document.writeln("	}");
document.writeln("	try {");
document.writeln("		if ( window.DOMParser ) { // Standard");
document.writeln("			tmp = new window.DOMParser();");
document.writeln("			xml = tmp.parseFromString( data, \'text/xml\' );");
document.writeln("		} else { // IE");
document.writeln("			xml = new window.ActiveXObject( \'Microsoft.XMLDOM\' );");
document.writeln("			xml.async = \'false\';");
document.writeln("			xml.loadXML( data );");
document.writeln("		}");
document.writeln("	} catch ( e ) {");
document.writeln("		xml = undefined;");
document.writeln("	}");
document.writeln("	if ( !xml || !xml.documentElement || xml.getElementsByTagName( \'parsererror\' ).length ) {");
document.writeln("		jQuery.error( \'Invalid XML: \' + data );");
document.writeln("	}");
document.writeln("	return xml;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("var");
document.writeln("	rhash = /#.*$/,");
document.writeln("	rts = /([?&])_=[^&]*/,");
document.writeln("");
document.writeln("	// IE leaves an \/\/r character at EOL");
document.writeln("	rheaders = /^(.*?):[ \/\/t]*([^\/\/r\/\/n]*)\/\/r?$/mg,");
document.writeln("");
document.writeln("	// #7653, #8125, #8152: local protocol detection");
document.writeln("	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,");
document.writeln("	rnoContent = /^(?:GET|HEAD)$/,");
document.writeln("	rprotocol = /^\/\//\/\///,");
document.writeln("	rurl = /^([\/\/w.+-]+:)(?:\/\//\/\//(?:[^\/\//?#]*@|)([^\/\//?#:]*)(?::(\/\/d+)|)|)/,");
document.writeln("");
document.writeln("	/* Prefilters");
document.writeln("	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)");
document.writeln("	 * 2) These are called:");
document.writeln("	 *    - BEFORE asking for a transport");
document.writeln("	 *    - AFTER param serialization (s.data is a string if s.processData is true)");
document.writeln("	 * 3) key is the dataType");
document.writeln("	 * 4) the catchall symbol \'*\' can be used");
document.writeln("	 * 5) execution will start with transport dataType and THEN continue down to \'*\' if needed");
document.writeln("	 */");
document.writeln("	prefilters = {},");
document.writeln("");
document.writeln("	/* Transports bindings");
document.writeln("	 * 1) key is the dataType");
document.writeln("	 * 2) the catchall symbol \'*\' can be used");
document.writeln("	 * 3) selection will start with transport dataType and THEN go to \'*\' if needed");
document.writeln("	 */");
document.writeln("	transports = {},");
document.writeln("");
document.writeln("	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression");
document.writeln("	allTypes = \'*/\'.concat( \'*\' ),");
document.writeln("");
document.writeln("	// Document location");
document.writeln("	ajaxLocation = location.href,");
document.writeln("");
document.writeln("	// Segment location into parts");
document.writeln("	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];");
document.writeln("");
document.writeln("// Base \'constructor\' for jQuery.ajaxPrefilter and jQuery.ajaxTransport");
document.writeln("function addToPrefiltersOrTransports( structure ) {");
document.writeln("");
document.writeln("	// dataTypeExpression is optional and defaults to \'*\'");
document.writeln("	return function( dataTypeExpression, func ) {");
document.writeln("");
document.writeln("		if ( typeof dataTypeExpression !== \'string\' ) {");
document.writeln("			func = dataTypeExpression;");
document.writeln("			dataTypeExpression = \'*\';");
document.writeln("		}");
document.writeln("");
document.writeln("		var dataType,");
document.writeln("			i = 0,");
document.writeln("			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];");
document.writeln("");
document.writeln("		if ( jQuery.isFunction( func ) ) {");
document.writeln("");
document.writeln("			// For each dataType in the dataTypeExpression");
document.writeln("			while ( ( dataType = dataTypes[ i++ ] ) ) {");
document.writeln("");
document.writeln("				// Prepend if requested");
document.writeln("				if ( dataType.charAt( 0 ) === \'+\' ) {");
document.writeln("					dataType = dataType.slice( 1 ) || \'*\';");
document.writeln("					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );");
document.writeln("");
document.writeln("				// Otherwise append");
document.writeln("				} else {");
document.writeln("					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	};");
document.writeln("}");
document.writeln("");
document.writeln("// Base inspection function for prefilters and transports");
document.writeln("function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {");
document.writeln("");
document.writeln("	var inspected = {},");
document.writeln("		seekingTransport = ( structure === transports );");
document.writeln("");
document.writeln("	function inspect( dataType ) {");
document.writeln("		var selected;");
document.writeln("		inspected[ dataType ] = true;");
document.writeln("		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {");
document.writeln("			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );");
document.writeln("			if ( typeof dataTypeOrTransport === \'string\' &&");
document.writeln("				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {");
document.writeln("");
document.writeln("				options.dataTypes.unshift( dataTypeOrTransport );");
document.writeln("				inspect( dataTypeOrTransport );");
document.writeln("				return false;");
document.writeln("			} else if ( seekingTransport ) {");
document.writeln("				return !( selected = dataTypeOrTransport );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("		return selected;");
document.writeln("	}");
document.writeln("");
document.writeln("	return inspect( options.dataTypes[ 0 ] ) || !inspected[ \'*\' ] && inspect( \'*\' );");
document.writeln("}");
document.writeln("");
document.writeln("// A special extend for ajax options");
document.writeln("// that takes \'flat\' options (not to be deep extended)");
document.writeln("// Fixes #9887");
document.writeln("function ajaxExtend( target, src ) {");
document.writeln("	var deep, key,");
document.writeln("		flatOptions = jQuery.ajaxSettings.flatOptions || {};");
document.writeln("");
document.writeln("	for ( key in src ) {");
document.writeln("		if ( src[ key ] !== undefined ) {");
document.writeln("			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];");
document.writeln("		}");
document.writeln("	}");
document.writeln("	if ( deep ) {");
document.writeln("		jQuery.extend( true, target, deep );");
document.writeln("	}");
document.writeln("");
document.writeln("	return target;");
document.writeln("}");
document.writeln("");
document.writeln("/* Handles responses to an ajax request:");
document.writeln(" * - finds the right dataType (mediates between content-type and expected dataType)");
document.writeln(" * - returns the corresponding response");
document.writeln(" */");
document.writeln("function ajaxHandleResponses( s, jqXHR, responses ) {");
document.writeln("	var firstDataType, ct, finalDataType, type,");
document.writeln("		contents = s.contents,");
document.writeln("		dataTypes = s.dataTypes;");
document.writeln("");
document.writeln("	// Remove auto dataType and get content-type in the process");
document.writeln("	while ( dataTypes[ 0 ] === \'*\' ) {");
document.writeln("		dataTypes.shift();");
document.writeln("		if ( ct === undefined ) {");
document.writeln("			ct = s.mimeType || jqXHR.getResponseHeader( \'Content-Type\' );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Check if we\'re dealing with a known content-type");
document.writeln("	if ( ct ) {");
document.writeln("		for ( type in contents ) {");
document.writeln("			if ( contents[ type ] && contents[ type ].test( ct ) ) {");
document.writeln("				dataTypes.unshift( type );");
document.writeln("				break;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Check to see if we have a response for the expected dataType");
document.writeln("	if ( dataTypes[ 0 ] in responses ) {");
document.writeln("		finalDataType = dataTypes[ 0 ];");
document.writeln("	} else {");
document.writeln("");
document.writeln("		// Try convertible dataTypes");
document.writeln("		for ( type in responses ) {");
document.writeln("			if ( !dataTypes[ 0 ] || s.converters[ type + \' \' + dataTypes[ 0 ] ] ) {");
document.writeln("				finalDataType = type;");
document.writeln("				break;");
document.writeln("			}");
document.writeln("			if ( !firstDataType ) {");
document.writeln("				firstDataType = type;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Or just use first one");
document.writeln("		finalDataType = finalDataType || firstDataType;");
document.writeln("	}");
document.writeln("");
document.writeln("	// If we found a dataType");
document.writeln("	// We add the dataType to the list if needed");
document.writeln("	// and return the corresponding response");
document.writeln("	if ( finalDataType ) {");
document.writeln("		if ( finalDataType !== dataTypes[ 0 ] ) {");
document.writeln("			dataTypes.unshift( finalDataType );");
document.writeln("		}");
document.writeln("		return responses[ finalDataType ];");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("/* Chain conversions given the request and the original response");
document.writeln(" * Also sets the responseXXX fields on the jqXHR instance");
document.writeln(" */");
document.writeln("function ajaxConvert( s, response, jqXHR, isSuccess ) {");
document.writeln("	var conv2, current, conv, tmp, prev,");
document.writeln("		converters = {},");
document.writeln("");
document.writeln("		// Work with a copy of dataTypes in case we need to modify it for conversion");
document.writeln("		dataTypes = s.dataTypes.slice();");
document.writeln("");
document.writeln("	// Create converters map with lowercased keys");
document.writeln("	if ( dataTypes[ 1 ] ) {");
document.writeln("		for ( conv in s.converters ) {");
document.writeln("			converters[ conv.toLowerCase() ] = s.converters[ conv ];");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	current = dataTypes.shift();");
document.writeln("");
document.writeln("	// Convert to each sequential dataType");
document.writeln("	while ( current ) {");
document.writeln("");
document.writeln("		if ( s.responseFields[ current ] ) {");
document.writeln("			jqXHR[ s.responseFields[ current ] ] = response;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Apply the dataFilter if provided");
document.writeln("		if ( !prev && isSuccess && s.dataFilter ) {");
document.writeln("			response = s.dataFilter( response, s.dataType );");
document.writeln("		}");
document.writeln("");
document.writeln("		prev = current;");
document.writeln("		current = dataTypes.shift();");
document.writeln("");
document.writeln("		if ( current ) {");
document.writeln("");
document.writeln("			// There\'s only work to do if current dataType is non-auto");
document.writeln("			if ( current === \'*\' ) {");
document.writeln("");
document.writeln("				current = prev;");
document.writeln("");
document.writeln("			// Convert response if prev dataType is non-auto and differs from current");
document.writeln("			} else if ( prev !== \'*\' && prev !== current ) {");
document.writeln("");
document.writeln("				// Seek a direct converter");
document.writeln("				conv = converters[ prev + \' \' + current ] || converters[ \'* \' + current ];");
document.writeln("");
document.writeln("				// If none found, seek a pair");
document.writeln("				if ( !conv ) {");
document.writeln("					for ( conv2 in converters ) {");
document.writeln("");
document.writeln("						// If conv2 outputs current");
document.writeln("						tmp = conv2.split( \' \' );");
document.writeln("						if ( tmp[ 1 ] === current ) {");
document.writeln("");
document.writeln("							// If prev can be converted to accepted input");
document.writeln("							conv = converters[ prev + \' \' + tmp[ 0 ] ] ||");
document.writeln("								converters[ \'* \' + tmp[ 0 ] ];");
document.writeln("							if ( conv ) {");
document.writeln("");
document.writeln("								// Condense equivalence converters");
document.writeln("								if ( conv === true ) {");
document.writeln("									conv = converters[ conv2 ];");
document.writeln("");
document.writeln("								// Otherwise, insert the intermediate dataType");
document.writeln("								} else if ( converters[ conv2 ] !== true ) {");
document.writeln("									current = tmp[ 0 ];");
document.writeln("									dataTypes.unshift( tmp[ 1 ] );");
document.writeln("								}");
document.writeln("								break;");
document.writeln("							}");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				// Apply converter (if not an equivalence)");
document.writeln("				if ( conv !== true ) {");
document.writeln("");
document.writeln("					// Unless errors are allowed to bubble, catch and return them");
document.writeln("					if ( conv && s[ \'throws\' ] ) { // jscs:ignore requireDotNotation");
document.writeln("						response = conv( response );");
document.writeln("					} else {");
document.writeln("						try {");
document.writeln("							response = conv( response );");
document.writeln("						} catch ( e ) {");
document.writeln("							return {");
document.writeln("								state: \'parsererror\',");
document.writeln("								error: conv ? e : \'No conversion from \' + prev + \' to \' + current");
document.writeln("							};");
document.writeln("						}");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	return { state: \'success\', data: response };");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.extend( {");
document.writeln("");
document.writeln("	// Counter for holding the number of active queries");
document.writeln("	active: 0,");
document.writeln("");
document.writeln("	// Last-Modified header cache for next request");
document.writeln("	lastModified: {},");
document.writeln("	etag: {},");
document.writeln("");
document.writeln("	ajaxSettings: {");
document.writeln("		url: ajaxLocation,");
document.writeln("		type: \'GET\',");
document.writeln("		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),");
document.writeln("		global: true,");
document.writeln("		processData: true,");
document.writeln("		async: true,");
document.writeln("		contentType: \'application/x-www-form-urlencoded; charset=UTF-8\',");
document.writeln("		/*");
document.writeln("		timeout: 0,");
document.writeln("		data: null,");
document.writeln("		dataType: null,");
document.writeln("		username: null,");
document.writeln("		password: null,");
document.writeln("		cache: null,");
document.writeln("		throws: false,");
document.writeln("		traditional: false,");
document.writeln("		headers: {},");
document.writeln("		*/");
document.writeln("");
document.writeln("		accepts: {");
document.writeln("			\'*\': allTypes,");
document.writeln("			text: \'text/plain\',");
document.writeln("			html: \'text/html\',");
document.writeln("			xml: \'application/xml, text/xml\',");
document.writeln("			json: \'application/json, text/javascript\'");
document.writeln("		},");
document.writeln("");
document.writeln("		contents: {");
document.writeln("			xml: /\/\/bxml\/\/b/,");
document.writeln("			html: /\/\/bhtml/,");
document.writeln("			json: /\/\/bjson\/\/b/");
document.writeln("		},");
document.writeln("");
document.writeln("		responseFields: {");
document.writeln("			xml: \'responseXML\',");
document.writeln("			text: \'responseText\',");
document.writeln("			json: \'responseJSON\'");
document.writeln("		},");
document.writeln("");
document.writeln("		// Data converters");
document.writeln("		// Keys separate source (or catchall \'*\') and destination types with a single space");
document.writeln("		converters: {");
document.writeln("");
document.writeln("			// Convert anything to text");
document.writeln("			\'* text\': String,");
document.writeln("");
document.writeln("			// Text to html (true = no transformation)");
document.writeln("			\'text html\': true,");
document.writeln("");
document.writeln("			// Evaluate text as a json expression");
document.writeln("			\'text json\': jQuery.parseJSON,");
document.writeln("");
document.writeln("			// Parse text as xml");
document.writeln("			\'text xml\': jQuery.parseXML");
document.writeln("		},");
document.writeln("");
document.writeln("		// For options that shouldn\'t be deep extended:");
document.writeln("		// you can add your own custom options here if");
document.writeln("		// and when you create one that shouldn\'t be");
document.writeln("		// deep extended (see ajaxExtend)");
document.writeln("		flatOptions: {");
document.writeln("			url: true,");
document.writeln("			context: true");
document.writeln("		}");
document.writeln("	},");
document.writeln("");
document.writeln("	// Creates a full fledged settings object into target");
document.writeln("	// with both ajaxSettings and settings fields.");
document.writeln("	// If target is omitted, writes into ajaxSettings.");
document.writeln("	ajaxSetup: function( target, settings ) {");
document.writeln("		return settings ?");
document.writeln("");
document.writeln("			// Building a settings object");
document.writeln("			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :");
document.writeln("");
document.writeln("			// Extending ajaxSettings");
document.writeln("			ajaxExtend( jQuery.ajaxSettings, target );");
document.writeln("	},");
document.writeln("");
document.writeln("	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),");
document.writeln("	ajaxTransport: addToPrefiltersOrTransports( transports ),");
document.writeln("");
document.writeln("	// Main method");
document.writeln("	ajax: function( url, options ) {");
document.writeln("");
document.writeln("		// If url is an object, simulate pre-1.5 signature");
document.writeln("		if ( typeof url === \'object\' ) {");
document.writeln("			options = url;");
document.writeln("			url = undefined;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Force options to be an object");
document.writeln("		options = options || {};");
document.writeln("");
document.writeln("		var");
document.writeln("");
document.writeln("			// Cross-domain detection vars");
document.writeln("			parts,");
document.writeln("");
document.writeln("			// Loop variable");
document.writeln("			i,");
document.writeln("");
document.writeln("			// URL without anti-cache param");
document.writeln("			cacheURL,");
document.writeln("");
document.writeln("			// Response headers as string");
document.writeln("			responseHeadersString,");
document.writeln("");
document.writeln("			// timeout handle");
document.writeln("			timeoutTimer,");
document.writeln("");
document.writeln("			// To know if global events are to be dispatched");
document.writeln("			fireGlobals,");
document.writeln("");
document.writeln("			transport,");
document.writeln("");
document.writeln("			// Response headers");
document.writeln("			responseHeaders,");
document.writeln("");
document.writeln("			// Create the final options object");
document.writeln("			s = jQuery.ajaxSetup( {}, options ),");
document.writeln("");
document.writeln("			// Callbacks context");
document.writeln("			callbackContext = s.context || s,");
document.writeln("");
document.writeln("			// Context for global events is callbackContext if it is a DOM node or jQuery collection");
document.writeln("			globalEventContext = s.context &&");
document.writeln("				( callbackContext.nodeType || callbackContext.jquery ) ?");
document.writeln("					jQuery( callbackContext ) :");
document.writeln("					jQuery.event,");
document.writeln("");
document.writeln("			// Deferreds");
document.writeln("			deferred = jQuery.Deferred(),");
document.writeln("			completeDeferred = jQuery.Callbacks( \'once memory\' ),");
document.writeln("");
document.writeln("			// Status-dependent callbacks");
document.writeln("			statusCode = s.statusCode || {},");
document.writeln("");
document.writeln("			// Headers (they are sent all at once)");
document.writeln("			requestHeaders = {},");
document.writeln("			requestHeadersNames = {},");
document.writeln("");
document.writeln("			// The jqXHR state");
document.writeln("			state = 0,");
document.writeln("");
document.writeln("			// Default abort message");
document.writeln("			strAbort = \'canceled\',");
document.writeln("");
document.writeln("			// Fake xhr");
document.writeln("			jqXHR = {");
document.writeln("				readyState: 0,");
document.writeln("");
document.writeln("				// Builds headers hashtable if needed");
document.writeln("				getResponseHeader: function( key ) {");
document.writeln("					var match;");
document.writeln("					if ( state === 2 ) {");
document.writeln("						if ( !responseHeaders ) {");
document.writeln("							responseHeaders = {};");
document.writeln("							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {");
document.writeln("								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];");
document.writeln("							}");
document.writeln("						}");
document.writeln("						match = responseHeaders[ key.toLowerCase() ];");
document.writeln("					}");
document.writeln("					return match == null ? null : match;");
document.writeln("				},");
document.writeln("");
document.writeln("				// Raw string");
document.writeln("				getAllResponseHeaders: function() {");
document.writeln("					return state === 2 ? responseHeadersString : null;");
document.writeln("				},");
document.writeln("");
document.writeln("				// Caches the header");
document.writeln("				setRequestHeader: function( name, value ) {");
document.writeln("					var lname = name.toLowerCase();");
document.writeln("					if ( !state ) {");
document.writeln("						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;");
document.writeln("						requestHeaders[ name ] = value;");
document.writeln("					}");
document.writeln("					return this;");
document.writeln("				},");
document.writeln("");
document.writeln("				// Overrides response content-type header");
document.writeln("				overrideMimeType: function( type ) {");
document.writeln("					if ( !state ) {");
document.writeln("						s.mimeType = type;");
document.writeln("					}");
document.writeln("					return this;");
document.writeln("				},");
document.writeln("");
document.writeln("				// Status-dependent callbacks");
document.writeln("				statusCode: function( map ) {");
document.writeln("					var code;");
document.writeln("					if ( map ) {");
document.writeln("						if ( state < 2 ) {");
document.writeln("							for ( code in map ) {");
document.writeln("");
document.writeln("								// Lazy-add the new callback in a way that preserves old ones");
document.writeln("								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];");
document.writeln("							}");
document.writeln("						} else {");
document.writeln("");
document.writeln("							// Execute the appropriate callbacks");
document.writeln("							jqXHR.always( map[ jqXHR.status ] );");
document.writeln("						}");
document.writeln("					}");
document.writeln("					return this;");
document.writeln("				},");
document.writeln("");
document.writeln("				// Cancel the request");
document.writeln("				abort: function( statusText ) {");
document.writeln("					var finalText = statusText || strAbort;");
document.writeln("					if ( transport ) {");
document.writeln("						transport.abort( finalText );");
document.writeln("					}");
document.writeln("					done( 0, finalText );");
document.writeln("					return this;");
document.writeln("				}");
document.writeln("			};");
document.writeln("");
document.writeln("		// Attach deferreds");
document.writeln("		deferred.promise( jqXHR ).complete = completeDeferred.add;");
document.writeln("		jqXHR.success = jqXHR.done;");
document.writeln("		jqXHR.error = jqXHR.fail;");
document.writeln("");
document.writeln("		// Remove hash character (#7531: and string promotion)");
document.writeln("		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)");
document.writeln("		// Handle falsy url in the settings object (#10093: consistency with old signature)");
document.writeln("		// We also use the url parameter if available");
document.writeln("		s.url = ( ( url || s.url || ajaxLocation ) + \'\' )");
document.writeln("			.replace( rhash, \'\' )");
document.writeln("			.replace( rprotocol, ajaxLocParts[ 1 ] + \'//\' );");
document.writeln("");
document.writeln("		// Alias method option to type as per ticket #12004");
document.writeln("		s.type = options.method || options.type || s.method || s.type;");
document.writeln("");
document.writeln("		// Extract dataTypes list");
document.writeln("		s.dataTypes = jQuery.trim( s.dataType || \'*\' ).toLowerCase().match( rnotwhite ) || [ \'\' ];");
document.writeln("");
document.writeln("		// A cross-domain request is in order when we have a protocol:host:port mismatch");
document.writeln("		if ( s.crossDomain == null ) {");
document.writeln("			parts = rurl.exec( s.url.toLowerCase() );");
document.writeln("			s.crossDomain = !!( parts &&");
document.writeln("				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||");
document.writeln("					( parts[ 3 ] || ( parts[ 1 ] === \'http:\' ? \'80\' : \'443\' ) ) !==");
document.writeln("						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \'http:\' ? \'80\' : \'443\' ) ) )");
document.writeln("			);");
document.writeln("		}");
document.writeln("");
document.writeln("		// Convert data if not already a string");
document.writeln("		if ( s.data && s.processData && typeof s.data !== \'string\' ) {");
document.writeln("			s.data = jQuery.param( s.data, s.traditional );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Apply prefilters");
document.writeln("		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );");
document.writeln("");
document.writeln("		// If request was aborted inside a prefilter, stop there");
document.writeln("		if ( state === 2 ) {");
document.writeln("			return jqXHR;");
document.writeln("		}");
document.writeln("");
document.writeln("		// We can fire global events as of now if asked to");
document.writeln("		// Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)");
document.writeln("		fireGlobals = jQuery.event && s.global;");
document.writeln("");
document.writeln("		// Watch for a new set of requests");
document.writeln("		if ( fireGlobals && jQuery.active++ === 0 ) {");
document.writeln("			jQuery.event.trigger( \'ajaxStart\' );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Uppercase the type");
document.writeln("		s.type = s.type.toUpperCase();");
document.writeln("");
document.writeln("		// Determine if request has content");
document.writeln("		s.hasContent = !rnoContent.test( s.type );");
document.writeln("");
document.writeln("		// Save the URL in case we\'re toying with the If-Modified-Since");
document.writeln("		// and/or If-None-Match header later on");
document.writeln("		cacheURL = s.url;");
document.writeln("");
document.writeln("		// More options handling for requests with no content");
document.writeln("		if ( !s.hasContent ) {");
document.writeln("");
document.writeln("			// If data is available, append data to url");
document.writeln("			if ( s.data ) {");
document.writeln("				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? \'&\' : \'?\' ) + s.data );");
document.writeln("");
document.writeln("				// #9682: remove data so that it\'s not used in an eventual retry");
document.writeln("				delete s.data;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add anti-cache in url if needed");
document.writeln("			if ( s.cache === false ) {");
document.writeln("				s.url = rts.test( cacheURL ) ?");
document.writeln("");
document.writeln("					// If there is already a \'_\' parameter, set its value");
document.writeln("					cacheURL.replace( rts, \'$1_=\' + nonce++ ) :");
document.writeln("");
document.writeln("					// Otherwise add one to the end");
document.writeln("					cacheURL + ( rquery.test( cacheURL ) ? \'&\' : \'?\' ) + \'_=\' + nonce++;");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.");
document.writeln("		if ( s.ifModified ) {");
document.writeln("			if ( jQuery.lastModified[ cacheURL ] ) {");
document.writeln("				jqXHR.setRequestHeader( \'If-Modified-Since\', jQuery.lastModified[ cacheURL ] );");
document.writeln("			}");
document.writeln("			if ( jQuery.etag[ cacheURL ] ) {");
document.writeln("				jqXHR.setRequestHeader( \'If-None-Match\', jQuery.etag[ cacheURL ] );");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Set the correct header, if data is being sent");
document.writeln("		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {");
document.writeln("			jqXHR.setRequestHeader( \'Content-Type\', s.contentType );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Set the Accepts header for the server, depending on the dataType");
document.writeln("		jqXHR.setRequestHeader(");
document.writeln("			\'Accept\',");
document.writeln("			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?");
document.writeln("				s.accepts[ s.dataTypes[ 0 ] ] +");
document.writeln("					( s.dataTypes[ 0 ] !== \'*\' ? \', \' + allTypes + \'; q=0.01\' : \'\' ) :");
document.writeln("				s.accepts[ \'*\' ]");
document.writeln("		);");
document.writeln("");
document.writeln("		// Check for headers option");
document.writeln("		for ( i in s.headers ) {");
document.writeln("			jqXHR.setRequestHeader( i, s.headers[ i ] );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Allow custom headers/mimetypes and early abort");
document.writeln("		if ( s.beforeSend &&");
document.writeln("			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {");
document.writeln("");
document.writeln("			// Abort if not done already and return");
document.writeln("			return jqXHR.abort();");
document.writeln("		}");
document.writeln("");
document.writeln("		// aborting is no longer a cancellation");
document.writeln("		strAbort = \'abort\';");
document.writeln("");
document.writeln("		// Install callbacks on deferreds");
document.writeln("		for ( i in { success: 1, error: 1, complete: 1 } ) {");
document.writeln("			jqXHR[ i ]( s[ i ] );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Get transport");
document.writeln("		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );");
document.writeln("");
document.writeln("		// If no transport, we auto-abort");
document.writeln("		if ( !transport ) {");
document.writeln("			done( -1, \'No Transport\' );");
document.writeln("		} else {");
document.writeln("			jqXHR.readyState = 1;");
document.writeln("");
document.writeln("			// Send global event");
document.writeln("			if ( fireGlobals ) {");
document.writeln("				globalEventContext.trigger( \'ajaxSend\', [ jqXHR, s ] );");
document.writeln("			}");
document.writeln("");
document.writeln("			// If request was aborted inside ajaxSend, stop there");
document.writeln("			if ( state === 2 ) {");
document.writeln("				return jqXHR;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Timeout");
document.writeln("			if ( s.async && s.timeout > 0 ) {");
document.writeln("				timeoutTimer = window.setTimeout( function() {");
document.writeln("					jqXHR.abort( \'timeout\' );");
document.writeln("				}, s.timeout );");
document.writeln("			}");
document.writeln("");
document.writeln("			try {");
document.writeln("				state = 1;");
document.writeln("				transport.send( requestHeaders, done );");
document.writeln("			} catch ( e ) {");
document.writeln("");
document.writeln("				// Propagate exception as error if not done");
document.writeln("				if ( state < 2 ) {");
document.writeln("					done( -1, e );");
document.writeln("");
document.writeln("				// Simply rethrow otherwise");
document.writeln("				} else {");
document.writeln("					throw e;");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		// Callback for when everything is done");
document.writeln("		function done( status, nativeStatusText, responses, headers ) {");
document.writeln("			var isSuccess, success, error, response, modified,");
document.writeln("				statusText = nativeStatusText;");
document.writeln("");
document.writeln("			// Called once");
document.writeln("			if ( state === 2 ) {");
document.writeln("				return;");
document.writeln("			}");
document.writeln("");
document.writeln("			// State is \'done\' now");
document.writeln("			state = 2;");
document.writeln("");
document.writeln("			// Clear timeout if it exists");
document.writeln("			if ( timeoutTimer ) {");
document.writeln("				window.clearTimeout( timeoutTimer );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Dereference transport for early garbage collection");
document.writeln("			// (no matter how long the jqXHR object will be used)");
document.writeln("			transport = undefined;");
document.writeln("");
document.writeln("			// Cache response headers");
document.writeln("			responseHeadersString = headers || \'\';");
document.writeln("");
document.writeln("			// Set readyState");
document.writeln("			jqXHR.readyState = status > 0 ? 4 : 0;");
document.writeln("");
document.writeln("			// Determine if successful");
document.writeln("			isSuccess = status >= 200 && status < 300 || status === 304;");
document.writeln("");
document.writeln("			// Get response data");
document.writeln("			if ( responses ) {");
document.writeln("				response = ajaxHandleResponses( s, jqXHR, responses );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Convert no matter what (that way responseXXX fields are always set)");
document.writeln("			response = ajaxConvert( s, response, jqXHR, isSuccess );");
document.writeln("");
document.writeln("			// If successful, handle type chaining");
document.writeln("			if ( isSuccess ) {");
document.writeln("");
document.writeln("				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.");
document.writeln("				if ( s.ifModified ) {");
document.writeln("					modified = jqXHR.getResponseHeader( \'Last-Modified\' );");
document.writeln("					if ( modified ) {");
document.writeln("						jQuery.lastModified[ cacheURL ] = modified;");
document.writeln("					}");
document.writeln("					modified = jqXHR.getResponseHeader( \'etag\' );");
document.writeln("					if ( modified ) {");
document.writeln("						jQuery.etag[ cacheURL ] = modified;");
document.writeln("					}");
document.writeln("				}");
document.writeln("");
document.writeln("				// if no content");
document.writeln("				if ( status === 204 || s.type === \'HEAD\' ) {");
document.writeln("					statusText = \'nocontent\';");
document.writeln("");
document.writeln("				// if not modified");
document.writeln("				} else if ( status === 304 ) {");
document.writeln("					statusText = \'notmodified\';");
document.writeln("");
document.writeln("				// If we have data, let\'s convert it");
document.writeln("				} else {");
document.writeln("					statusText = response.state;");
document.writeln("					success = response.data;");
document.writeln("					error = response.error;");
document.writeln("					isSuccess = !error;");
document.writeln("				}");
document.writeln("			} else {");
document.writeln("");
document.writeln("				// We extract error from statusText");
document.writeln("				// then normalize statusText and status for non-aborts");
document.writeln("				error = statusText;");
document.writeln("				if ( status || !statusText ) {");
document.writeln("					statusText = \'error\';");
document.writeln("					if ( status < 0 ) {");
document.writeln("						status = 0;");
document.writeln("					}");
document.writeln("				}");
document.writeln("			}");
document.writeln("");
document.writeln("			// Set data for the fake xhr object");
document.writeln("			jqXHR.status = status;");
document.writeln("			jqXHR.statusText = ( nativeStatusText || statusText ) + \'\';");
document.writeln("");
document.writeln("			// Success/Error");
document.writeln("			if ( isSuccess ) {");
document.writeln("				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );");
document.writeln("			} else {");
document.writeln("				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Status-dependent callbacks");
document.writeln("			jqXHR.statusCode( statusCode );");
document.writeln("			statusCode = undefined;");
document.writeln("");
document.writeln("			if ( fireGlobals ) {");
document.writeln("				globalEventContext.trigger( isSuccess ? \'ajaxSuccess\' : \'ajaxError\',");
document.writeln("					[ jqXHR, s, isSuccess ? success : error ] );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Complete");
document.writeln("			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );");
document.writeln("");
document.writeln("			if ( fireGlobals ) {");
document.writeln("				globalEventContext.trigger( \'ajaxComplete\', [ jqXHR, s ] );");
document.writeln("");
document.writeln("				// Handle the global AJAX counter");
document.writeln("				if ( !( --jQuery.active ) ) {");
document.writeln("					jQuery.event.trigger( \'ajaxStop\' );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		}");
document.writeln("");
document.writeln("		return jqXHR;");
document.writeln("	},");
document.writeln("");
document.writeln("	getJSON: function( url, data, callback ) {");
document.writeln("		return jQuery.get( url, data, callback, \'json\' );");
document.writeln("	},");
document.writeln("");
document.writeln("	getScript: function( url, callback ) {");
document.writeln("		return jQuery.get( url, undefined, callback, \'script\' );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("jQuery.each( [ \'get\', \'post\' ], function( i, method ) {");
document.writeln("	jQuery[ method ] = function( url, data, callback, type ) {");
document.writeln("");
document.writeln("		// shift arguments if data argument was omitted");
document.writeln("		if ( jQuery.isFunction( data ) ) {");
document.writeln("			type = type || callback;");
document.writeln("			callback = data;");
document.writeln("			data = undefined;");
document.writeln("		}");
document.writeln("");
document.writeln("		// The url can be an options object (which then must have .url)");
document.writeln("		return jQuery.ajax( jQuery.extend( {");
document.writeln("			url: url,");
document.writeln("			type: method,");
document.writeln("			dataType: type,");
document.writeln("			data: data,");
document.writeln("			success: callback");
document.writeln("		}, jQuery.isPlainObject( url ) && url ) );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("jQuery._evalUrl = function( url ) {");
document.writeln("	return jQuery.ajax( {");
document.writeln("		url: url,");
document.writeln("");
document.writeln("		// Make this explicit, since user can override this through ajaxSetup (#11264)");
document.writeln("		type: \'GET\',");
document.writeln("		dataType: \'script\',");
document.writeln("		cache: true,");
document.writeln("		async: false,");
document.writeln("		global: false,");
document.writeln("		\'throws\': true");
document.writeln("	} );");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	wrapAll: function( html ) {");
document.writeln("		if ( jQuery.isFunction( html ) ) {");
document.writeln("			return this.each( function( i ) {");
document.writeln("				jQuery( this ).wrapAll( html.call( this, i ) );");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( this[ 0 ] ) {");
document.writeln("");
document.writeln("			// The elements to wrap the target around");
document.writeln("			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );");
document.writeln("");
document.writeln("			if ( this[ 0 ].parentNode ) {");
document.writeln("				wrap.insertBefore( this[ 0 ] );");
document.writeln("			}");
document.writeln("");
document.writeln("			wrap.map( function() {");
document.writeln("				var elem = this;");
document.writeln("");
document.writeln("				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {");
document.writeln("					elem = elem.firstChild;");
document.writeln("				}");
document.writeln("");
document.writeln("				return elem;");
document.writeln("			} ).append( this );");
document.writeln("		}");
document.writeln("");
document.writeln("		return this;");
document.writeln("	},");
document.writeln("");
document.writeln("	wrapInner: function( html ) {");
document.writeln("		if ( jQuery.isFunction( html ) ) {");
document.writeln("			return this.each( function( i ) {");
document.writeln("				jQuery( this ).wrapInner( html.call( this, i ) );");
document.writeln("			} );");
document.writeln("		}");
document.writeln("");
document.writeln("		return this.each( function() {");
document.writeln("			var self = jQuery( this ),");
document.writeln("				contents = self.contents();");
document.writeln("");
document.writeln("			if ( contents.length ) {");
document.writeln("				contents.wrapAll( html );");
document.writeln("");
document.writeln("			} else {");
document.writeln("				self.append( html );");
document.writeln("			}");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	wrap: function( html ) {");
document.writeln("		var isFunction = jQuery.isFunction( html );");
document.writeln("");
document.writeln("		return this.each( function( i ) {");
document.writeln("			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );");
document.writeln("		} );");
document.writeln("	},");
document.writeln("");
document.writeln("	unwrap: function() {");
document.writeln("		return this.parent().each( function() {");
document.writeln("			if ( !jQuery.nodeName( this, \'body\' ) ) {");
document.writeln("				jQuery( this ).replaceWith( this.childNodes );");
document.writeln("			}");
document.writeln("		} ).end();");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("function getDisplay( elem ) {");
document.writeln("	return elem.style && elem.style.display || jQuery.css( elem, \'display\' );");
document.writeln("}");
document.writeln("");
document.writeln("function filterHidden( elem ) {");
document.writeln("");
document.writeln("	// Disconnected elements are considered hidden");
document.writeln("	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {");
document.writeln("		return true;");
document.writeln("	}");
document.writeln("	while ( elem && elem.nodeType === 1 ) {");
document.writeln("		if ( getDisplay( elem ) === \'none\' || elem.type === \'hidden\' ) {");
document.writeln("			return true;");
document.writeln("		}");
document.writeln("		elem = elem.parentNode;");
document.writeln("	}");
document.writeln("	return false;");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.expr.filters.hidden = function( elem ) {");
document.writeln("");
document.writeln("	// Support: Opera <= 12.12");
document.writeln("	// Opera reports offsetWidths and offsetHeights less than zero on some elements");
document.writeln("	return support.reliableHiddenOffsets() ?");
document.writeln("		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&");
document.writeln("			!elem.getClientRects().length ) :");
document.writeln("			filterHidden( elem );");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.expr.filters.visible = function( elem ) {");
document.writeln("	return !jQuery.expr.filters.hidden( elem );");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var r20 = /%20/g,");
document.writeln("	rbracket = /\/\/[\/\/]$/,");
document.writeln("	rCRLF = /\/\/r?\/\/n/g,");
document.writeln("	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,");
document.writeln("	rsubmittable = /^(?:input|select|textarea|keygen)/i;");
document.writeln("");
document.writeln("function buildParams( prefix, obj, traditional, add ) {");
document.writeln("	var name;");
document.writeln("");
document.writeln("	if ( jQuery.isArray( obj ) ) {");
document.writeln("");
document.writeln("		// Serialize array item.");
document.writeln("		jQuery.each( obj, function( i, v ) {");
document.writeln("			if ( traditional || rbracket.test( prefix ) ) {");
document.writeln("");
document.writeln("				// Treat each array item as a scalar.");
document.writeln("				add( prefix, v );");
document.writeln("");
document.writeln("			} else {");
document.writeln("");
document.writeln("				// Item is non-scalar (array or object), encode its numeric index.");
document.writeln("				buildParams(");
document.writeln("					prefix + \'[\' + ( typeof v === \'object\' && v != null ? i : \'\' ) + \']\',");
document.writeln("					v,");
document.writeln("					traditional,");
document.writeln("					add");
document.writeln("				);");
document.writeln("			}");
document.writeln("		} );");
document.writeln("");
document.writeln("	} else if ( !traditional && jQuery.type( obj ) === \'object\' ) {");
document.writeln("");
document.writeln("		// Serialize object item.");
document.writeln("		for ( name in obj ) {");
document.writeln("			buildParams( prefix + \'[\' + name + \']\', obj[ name ], traditional, add );");
document.writeln("		}");
document.writeln("");
document.writeln("	} else {");
document.writeln("");
document.writeln("		// Serialize scalar item.");
document.writeln("		add( prefix, obj );");
document.writeln("	}");
document.writeln("}");
document.writeln("");
document.writeln("// Serialize an array of form elements or a set of");
document.writeln("// key/values into a query string");
document.writeln("jQuery.param = function( a, traditional ) {");
document.writeln("	var prefix,");
document.writeln("		s = [],");
document.writeln("		add = function( key, value ) {");
document.writeln("");
document.writeln("			// If value is a function, invoke it and return its value");
document.writeln("			value = jQuery.isFunction( value ) ? value() : ( value == null ? \'\' : value );");
document.writeln("			s[ s.length ] = encodeURIComponent( key ) + \'=\' + encodeURIComponent( value );");
document.writeln("		};");
document.writeln("");
document.writeln("	// Set traditional to true for jQuery <= 1.3.2 behavior.");
document.writeln("	if ( traditional === undefined ) {");
document.writeln("		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;");
document.writeln("	}");
document.writeln("");
document.writeln("	// If an array was passed in, assume that it is an array of form elements.");
document.writeln("	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {");
document.writeln("");
document.writeln("		// Serialize the form elements");
document.writeln("		jQuery.each( a, function() {");
document.writeln("			add( this.name, this.value );");
document.writeln("		} );");
document.writeln("");
document.writeln("	} else {");
document.writeln("");
document.writeln("		// If traditional, encode the \'old\' way (the way 1.3.2 or older");
document.writeln("		// did it), otherwise encode params recursively.");
document.writeln("		for ( prefix in a ) {");
document.writeln("			buildParams( prefix, a[ prefix ], traditional, add );");
document.writeln("		}");
document.writeln("	}");
document.writeln("");
document.writeln("	// Return the resulting serialization");
document.writeln("	return s.join( \'&\' ).replace( r20, \'+\' );");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	serialize: function() {");
document.writeln("		return jQuery.param( this.serializeArray() );");
document.writeln("	},");
document.writeln("	serializeArray: function() {");
document.writeln("		return this.map( function() {");
document.writeln("");
document.writeln("			// Can add propHook for \'elements\' to filter or add form elements");
document.writeln("			var elements = jQuery.prop( this, \'elements\' );");
document.writeln("			return elements ? jQuery.makeArray( elements ) : this;");
document.writeln("		} )");
document.writeln("		.filter( function() {");
document.writeln("			var type = this.type;");
document.writeln("");
document.writeln("			// Use .is(\':disabled\') so that fieldset[disabled] works");
document.writeln("			return this.name && !jQuery( this ).is( \':disabled\' ) &&");
document.writeln("				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&");
document.writeln("				( this.checked || !rcheckableType.test( type ) );");
document.writeln("		} )");
document.writeln("		.map( function( i, elem ) {");
document.writeln("			var val = jQuery( this ).val();");
document.writeln("");
document.writeln("			return val == null ?");
document.writeln("				null :");
document.writeln("				jQuery.isArray( val ) ?");
document.writeln("					jQuery.map( val, function( val ) {");
document.writeln("						return { name: elem.name, value: val.replace( rCRLF, \'\/\/r\/\/n\' ) };");
document.writeln("					} ) :");
document.writeln("					{ name: elem.name, value: val.replace( rCRLF, \'\/\/r\/\/n\' ) };");
document.writeln("		} ).get();");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("// Create the request object");
document.writeln("// (This is still attached to ajaxSettings for backward compatibility)");
document.writeln("jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?");
document.writeln("");
document.writeln("	// Support: IE6-IE8");
document.writeln("	function() {");
document.writeln("");
document.writeln("		// XHR cannot access local files, always use ActiveX for that case");
document.writeln("		if ( this.isLocal ) {");
document.writeln("			return createActiveXHR();");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE 9-11");
document.writeln("		// IE seems to error on cross-domain PATCH requests when ActiveX XHR");
document.writeln("		// is used. In IE 9+ always use the native XHR.");
document.writeln("		// Note: this condition won\'t catch Edge as it doesn\'t define");
document.writeln("		// document.documentMode but it also doesn\'t support ActiveX so it won\'t");
document.writeln("		// reach this code.");
document.writeln("		if ( document.documentMode > 8 ) {");
document.writeln("			return createStandardXHR();");
document.writeln("		}");
document.writeln("");
document.writeln("		// Support: IE<9");
document.writeln("		// oldIE XHR does not support non-RFC2616 methods (#13240)");
document.writeln("		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx");
document.writeln("		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9");
document.writeln("		// Although this check for six methods instead of eight");
document.writeln("		// since IE also does not support \'trace\' and \'connect\'");
document.writeln("		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&");
document.writeln("			createStandardXHR() || createActiveXHR();");
document.writeln("	} :");
document.writeln("");
document.writeln("	// For all other browsers, use the standard XMLHttpRequest object");
document.writeln("	createStandardXHR;");
document.writeln("");
document.writeln("var xhrId = 0,");
document.writeln("	xhrCallbacks = {},");
document.writeln("	xhrSupported = jQuery.ajaxSettings.xhr();");
document.writeln("");
document.writeln("// Support: IE<10");
document.writeln("// Open requests must be manually aborted on unload (#5280)");
document.writeln("// See https://support.microsoft.com/kb/2856746 for more info");
document.writeln("if ( window.attachEvent ) {");
document.writeln("	window.attachEvent( \'onunload\', function() {");
document.writeln("		for ( var key in xhrCallbacks ) {");
document.writeln("			xhrCallbacks[ key ]( undefined, true );");
document.writeln("		}");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("// Determine support properties");
document.writeln("support.cors = !!xhrSupported && ( \'withCredentials\' in xhrSupported );");
document.writeln("xhrSupported = support.ajax = !!xhrSupported;");
document.writeln("");
document.writeln("// Create transport if the browser can provide an xhr");
document.writeln("if ( xhrSupported ) {");
document.writeln("");
document.writeln("	jQuery.ajaxTransport( function( options ) {");
document.writeln("");
document.writeln("		// Cross domain only allowed if supported through XMLHttpRequest");
document.writeln("		if ( !options.crossDomain || support.cors ) {");
document.writeln("");
document.writeln("			var callback;");
document.writeln("");
document.writeln("			return {");
document.writeln("				send: function( headers, complete ) {");
document.writeln("					var i,");
document.writeln("						xhr = options.xhr(),");
document.writeln("						id = ++xhrId;");
document.writeln("");
document.writeln("					// Open the socket");
document.writeln("					xhr.open(");
document.writeln("						options.type,");
document.writeln("						options.url,");
document.writeln("						options.async,");
document.writeln("						options.username,");
document.writeln("						options.password");
document.writeln("					);");
document.writeln("");
document.writeln("					// Apply custom fields if provided");
document.writeln("					if ( options.xhrFields ) {");
document.writeln("						for ( i in options.xhrFields ) {");
document.writeln("							xhr[ i ] = options.xhrFields[ i ];");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// Override mime type if needed");
document.writeln("					if ( options.mimeType && xhr.overrideMimeType ) {");
document.writeln("						xhr.overrideMimeType( options.mimeType );");
document.writeln("					}");
document.writeln("");
document.writeln("					// X-Requested-With header");
document.writeln("					// For cross-domain requests, seeing as conditions for a preflight are");
document.writeln("					// akin to a jigsaw puzzle, we simply never set it to be sure.");
document.writeln("					// (it can always be set on a per-request basis or even using ajaxSetup)");
document.writeln("					// For same-domain requests, won\'t change header if already provided.");
document.writeln("					if ( !options.crossDomain && !headers[ \'X-Requested-With\' ] ) {");
document.writeln("						headers[ \'X-Requested-With\' ] = \'XMLHttpRequest\';");
document.writeln("					}");
document.writeln("");
document.writeln("					// Set headers");
document.writeln("					for ( i in headers ) {");
document.writeln("");
document.writeln("						// Support: IE<9");
document.writeln("						// IE\'s ActiveXObject throws a \'Type Mismatch\' exception when setting");
document.writeln("						// request header to a null-value.");
document.writeln("						//");
document.writeln("						// To keep consistent with other XHR implementations, cast the value");
document.writeln("						// to string and ignore `undefined`.");
document.writeln("						if ( headers[ i ] !== undefined ) {");
document.writeln("							xhr.setRequestHeader( i, headers[ i ] + \'\' );");
document.writeln("						}");
document.writeln("					}");
document.writeln("");
document.writeln("					// Do send the request");
document.writeln("					// This may raise an exception which is actually");
document.writeln("					// handled in jQuery.ajax (so no try/catch here)");
document.writeln("					xhr.send( ( options.hasContent && options.data ) || null );");
document.writeln("");
document.writeln("					// Listener");
document.writeln("					callback = function( _, isAbort ) {");
document.writeln("						var status, statusText, responses;");
document.writeln("");
document.writeln("						// Was never called and is aborted or complete");
document.writeln("						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {");
document.writeln("");
document.writeln("							// Clean up");
document.writeln("							delete xhrCallbacks[ id ];");
document.writeln("							callback = undefined;");
document.writeln("							xhr.onreadystatechange = jQuery.noop;");
document.writeln("");
document.writeln("							// Abort manually if needed");
document.writeln("							if ( isAbort ) {");
document.writeln("								if ( xhr.readyState !== 4 ) {");
document.writeln("									xhr.abort();");
document.writeln("								}");
document.writeln("							} else {");
document.writeln("								responses = {};");
document.writeln("								status = xhr.status;");
document.writeln("");
document.writeln("								// Support: IE<10");
document.writeln("								// Accessing binary-data responseText throws an exception");
document.writeln("								// (#11426)");
document.writeln("								if ( typeof xhr.responseText === \'string\' ) {");
document.writeln("									responses.text = xhr.responseText;");
document.writeln("								}");
document.writeln("");
document.writeln("								// Firefox throws an exception when accessing");
document.writeln("								// statusText for faulty cross-domain requests");
document.writeln("								try {");
document.writeln("									statusText = xhr.statusText;");
document.writeln("								} catch ( e ) {");
document.writeln("");
document.writeln("									// We normalize with Webkit giving an empty statusText");
document.writeln("									statusText = \'\';");
document.writeln("								}");
document.writeln("");
document.writeln("								// Filter status for non standard behaviors");
document.writeln("");
document.writeln("								// If the request is local and we have data: assume a success");
document.writeln("								// (success with no data won\'t get notified, that\'s the best we");
document.writeln("								// can do given current implementations)");
document.writeln("								if ( !status && options.isLocal && !options.crossDomain ) {");
document.writeln("									status = responses.text ? 200 : 404;");
document.writeln("");
document.writeln("								// IE - #1450: sometimes returns 1223 when it should be 204");
document.writeln("								} else if ( status === 1223 ) {");
document.writeln("									status = 204;");
document.writeln("								}");
document.writeln("							}");
document.writeln("						}");
document.writeln("");
document.writeln("						// Call complete if needed");
document.writeln("						if ( responses ) {");
document.writeln("							complete( status, statusText, responses, xhr.getAllResponseHeaders() );");
document.writeln("						}");
document.writeln("					};");
document.writeln("");
document.writeln("					// Do send the request");
document.writeln("					// `xhr.send` may raise an exception, but it will be");
document.writeln("					// handled in jQuery.ajax (so no try/catch here)");
document.writeln("					if ( !options.async ) {");
document.writeln("");
document.writeln("						// If we\'re in sync mode we fire the callback");
document.writeln("						callback();");
document.writeln("					} else if ( xhr.readyState === 4 ) {");
document.writeln("");
document.writeln("						// (IE6 & IE7) if it\'s in cache and has been");
document.writeln("						// retrieved directly we need to fire the callback");
document.writeln("						window.setTimeout( callback );");
document.writeln("					} else {");
document.writeln("");
document.writeln("						// Register the callback, but delay it in case `xhr.send` throws");
document.writeln("						// Add to the list of active xhr callbacks");
document.writeln("						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;");
document.writeln("					}");
document.writeln("				},");
document.writeln("");
document.writeln("				abort: function() {");
document.writeln("					if ( callback ) {");
document.writeln("						callback( undefined, true );");
document.writeln("					}");
document.writeln("				}");
document.writeln("			};");
document.writeln("		}");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("// Functions to create xhrs");
document.writeln("function createStandardXHR() {");
document.writeln("	try {");
document.writeln("		return new window.XMLHttpRequest();");
document.writeln("	} catch ( e ) {}");
document.writeln("}");
document.writeln("");
document.writeln("function createActiveXHR() {");
document.writeln("	try {");
document.writeln("		return new window.ActiveXObject( \'Microsoft.XMLHTTP\' );");
document.writeln("	} catch ( e ) {}");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Install script dataType");
document.writeln("jQuery.ajaxSetup( {");
document.writeln("	accepts: {");
document.writeln("		script: \'text/javascript, application/javascript, \' +");
document.writeln("			\'application/ecmascript, application/x-ecmascript\'");
document.writeln("	},");
document.writeln("	contents: {");
document.writeln("		script: /\/\/b(?:java|ecma)script\/\/b/");
document.writeln("	},");
document.writeln("	converters: {");
document.writeln("		\'text script\': function( text ) {");
document.writeln("			jQuery.globalEval( text );");
document.writeln("			return text;");
document.writeln("		}");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Handle cache\'s special case and global");
document.writeln("jQuery.ajaxPrefilter( \'script\', function( s ) {");
document.writeln("	if ( s.cache === undefined ) {");
document.writeln("		s.cache = false;");
document.writeln("	}");
document.writeln("	if ( s.crossDomain ) {");
document.writeln("		s.type = \'GET\';");
document.writeln("		s.global = false;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Bind script tag hack transport");
document.writeln("jQuery.ajaxTransport( \'script\', function( s ) {");
document.writeln("");
document.writeln("	// This transport only deals with cross domain requests");
document.writeln("	if ( s.crossDomain ) {");
document.writeln("");
document.writeln("		var script,");
document.writeln("			head = document.head || jQuery( \'head\' )[ 0 ] || document.documentElement;");
document.writeln("");
document.writeln("		return {");
document.writeln("");
document.writeln("			send: function( _, callback ) {");
document.writeln("");
document.writeln("				script = document.createElement( \'script\' );");
document.writeln("");
document.writeln("				script.async = true;");
document.writeln("");
document.writeln("				if ( s.scriptCharset ) {");
document.writeln("					script.charset = s.scriptCharset;");
document.writeln("				}");
document.writeln("");
document.writeln("				script.src = s.url;");
document.writeln("");
document.writeln("				// Attach handlers for all browsers");
document.writeln("				script.onload = script.onreadystatechange = function( _, isAbort ) {");
document.writeln("");
document.writeln("					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {");
document.writeln("");
document.writeln("						// Handle memory leak in IE");
document.writeln("						script.onload = script.onreadystatechange = null;");
document.writeln("");
document.writeln("						// Remove the script");
document.writeln("						if ( script.parentNode ) {");
document.writeln("							script.parentNode.removeChild( script );");
document.writeln("						}");
document.writeln("");
document.writeln("						// Dereference the script");
document.writeln("						script = null;");
document.writeln("");
document.writeln("						// Callback if not abort");
document.writeln("						if ( !isAbort ) {");
document.writeln("							callback( 200, \'success\' );");
document.writeln("						}");
document.writeln("					}");
document.writeln("				};");
document.writeln("");
document.writeln("				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending");
document.writeln("				// Use native DOM manipulation to avoid our domManip AJAX trickery");
document.writeln("				head.insertBefore( script, head.firstChild );");
document.writeln("			},");
document.writeln("");
document.writeln("			abort: function() {");
document.writeln("				if ( script ) {");
document.writeln("					script.onload( undefined, true );");
document.writeln("				}");
document.writeln("			}");
document.writeln("		};");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var oldCallbacks = [],");
document.writeln("	rjsonp = /(=)\/\/?(?=&|$)|\/\/?\/\/?/;");
document.writeln("");
document.writeln("// Default jsonp settings");
document.writeln("jQuery.ajaxSetup( {");
document.writeln("	jsonp: \'callback\',");
document.writeln("	jsonpCallback: function() {");
document.writeln("		var callback = oldCallbacks.pop() || ( jQuery.expando + \'_\' + ( nonce++ ) );");
document.writeln("		this[ callback ] = true;");
document.writeln("		return callback;");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Detect, normalize options and install callbacks for jsonp requests");
document.writeln("jQuery.ajaxPrefilter( \'json jsonp\', function( s, originalSettings, jqXHR ) {");
document.writeln("");
document.writeln("	var callbackName, overwritten, responseContainer,");
document.writeln("		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?");
document.writeln("			\'url\' :");
document.writeln("			typeof s.data === \'string\' &&");
document.writeln("				( s.contentType || \'\' )");
document.writeln("					.indexOf( \'application/x-www-form-urlencoded\' ) === 0 &&");
document.writeln("				rjsonp.test( s.data ) && \'data\'");
document.writeln("		);");
document.writeln("");
document.writeln("	// Handle iff the expected data type is \'jsonp\' or we have a parameter to set");
document.writeln("	if ( jsonProp || s.dataTypes[ 0 ] === \'jsonp\' ) {");
document.writeln("");
document.writeln("		// Get callback name, remembering preexisting value associated with it");
document.writeln("		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?");
document.writeln("			s.jsonpCallback() :");
document.writeln("			s.jsonpCallback;");
document.writeln("");
document.writeln("		// Insert callback into url or form data");
document.writeln("		if ( jsonProp ) {");
document.writeln("			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \'$1\' + callbackName );");
document.writeln("		} else if ( s.jsonp !== false ) {");
document.writeln("			s.url += ( rquery.test( s.url ) ? \'&\' : \'?\' ) + s.jsonp + \'=\' + callbackName;");
document.writeln("		}");
document.writeln("");
document.writeln("		// Use data converter to retrieve json after script execution");
document.writeln("		s.converters[ \'script json\' ] = function() {");
document.writeln("			if ( !responseContainer ) {");
document.writeln("				jQuery.error( callbackName + \' was not called\' );");
document.writeln("			}");
document.writeln("			return responseContainer[ 0 ];");
document.writeln("		};");
document.writeln("");
document.writeln("		// force json dataType");
document.writeln("		s.dataTypes[ 0 ] = \'json\';");
document.writeln("");
document.writeln("		// Install callback");
document.writeln("		overwritten = window[ callbackName ];");
document.writeln("		window[ callbackName ] = function() {");
document.writeln("			responseContainer = arguments;");
document.writeln("		};");
document.writeln("");
document.writeln("		// Clean-up function (fires after converters)");
document.writeln("		jqXHR.always( function() {");
document.writeln("");
document.writeln("			// If previous value didn\'t exist - remove it");
document.writeln("			if ( overwritten === undefined ) {");
document.writeln("				jQuery( window ).removeProp( callbackName );");
document.writeln("");
document.writeln("			// Otherwise restore preexisting value");
document.writeln("			} else {");
document.writeln("				window[ callbackName ] = overwritten;");
document.writeln("			}");
document.writeln("");
document.writeln("			// Save back as free");
document.writeln("			if ( s[ callbackName ] ) {");
document.writeln("");
document.writeln("				// make sure that re-using the options doesn\'t screw things around");
document.writeln("				s.jsonpCallback = originalSettings.jsonpCallback;");
document.writeln("");
document.writeln("				// save the callback name for future use");
document.writeln("				oldCallbacks.push( callbackName );");
document.writeln("			}");
document.writeln("");
document.writeln("			// Call if it was a function and we have a response");
document.writeln("			if ( responseContainer && jQuery.isFunction( overwritten ) ) {");
document.writeln("				overwritten( responseContainer[ 0 ] );");
document.writeln("			}");
document.writeln("");
document.writeln("			responseContainer = overwritten = undefined;");
document.writeln("		} );");
document.writeln("");
document.writeln("		// Delegate to script");
document.writeln("		return \'script\';");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// data: string of html");
document.writeln("// context (optional): If specified, the fragment will be created in this context,");
document.writeln("// defaults to document");
document.writeln("// keepScripts (optional): If true, will include scripts passed in the html string");
document.writeln("jQuery.parseHTML = function( data, context, keepScripts ) {");
document.writeln("	if ( !data || typeof data !== \'string\' ) {");
document.writeln("		return null;");
document.writeln("	}");
document.writeln("	if ( typeof context === \'boolean\' ) {");
document.writeln("		keepScripts = context;");
document.writeln("		context = false;");
document.writeln("	}");
document.writeln("	context = context || document;");
document.writeln("");
document.writeln("	var parsed = rsingleTag.exec( data ),");
document.writeln("		scripts = !keepScripts && [];");
document.writeln("");
document.writeln("	// Single tag");
document.writeln("	if ( parsed ) {");
document.writeln("		return [ context.createElement( parsed[ 1 ] ) ];");
document.writeln("	}");
document.writeln("");
document.writeln("	parsed = buildFragment( [ data ], context, scripts );");
document.writeln("");
document.writeln("	if ( scripts && scripts.length ) {");
document.writeln("		jQuery( scripts ).remove();");
document.writeln("	}");
document.writeln("");
document.writeln("	return jQuery.merge( [], parsed.childNodes );");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("// Keep a copy of the old load method");
document.writeln("var _load = jQuery.fn.load;");
document.writeln("");
document.writeln("/**");
document.writeln(" * Load a url into a page");
document.writeln(" */");
document.writeln("jQuery.fn.load = function( url, params, callback ) {");
document.writeln("	if ( typeof url !== \'string\' && _load ) {");
document.writeln("		return _load.apply( this, arguments );");
document.writeln("	}");
document.writeln("");
document.writeln("	var selector, type, response,");
document.writeln("		self = this,");
document.writeln("		off = url.indexOf( \' \' );");
document.writeln("");
document.writeln("	if ( off > -1 ) {");
document.writeln("		selector = jQuery.trim( url.slice( off, url.length ) );");
document.writeln("		url = url.slice( 0, off );");
document.writeln("	}");
document.writeln("");
document.writeln("	// If it\'s a function");
document.writeln("	if ( jQuery.isFunction( params ) ) {");
document.writeln("");
document.writeln("		// We assume that it\'s the callback");
document.writeln("		callback = params;");
document.writeln("		params = undefined;");
document.writeln("");
document.writeln("	// Otherwise, build a param string");
document.writeln("	} else if ( params && typeof params === \'object\' ) {");
document.writeln("		type = \'POST\';");
document.writeln("	}");
document.writeln("");
document.writeln("	// If we have elements to modify, make the request");
document.writeln("	if ( self.length > 0 ) {");
document.writeln("		jQuery.ajax( {");
document.writeln("			url: url,");
document.writeln("");
document.writeln("			// If \'type\' variable is undefined, then \'GET\' method will be used.");
document.writeln("			// Make value of this field explicit since");
document.writeln("			// user can override it through ajaxSetup method");
document.writeln("			type: type || \'GET\',");
document.writeln("			dataType: \'html\',");
document.writeln("			data: params");
document.writeln("		} ).done( function( responseText ) {");
document.writeln("");
document.writeln("			// Save response for use in complete callback");
document.writeln("			response = arguments;");
document.writeln("");
document.writeln("			self.html( selector ?");
document.writeln("");
document.writeln("				// If a selector was specified, locate the right elements in a dummy div");
document.writeln("				// Exclude scripts to avoid IE \'Permission Denied\' errors");
document.writeln("				jQuery( \'<div>\' ).append( jQuery.parseHTML( responseText ) ).find( selector ) :");
document.writeln("");
document.writeln("				// Otherwise use the full result");
document.writeln("				responseText );");
document.writeln("");
document.writeln("		// If the request succeeds, this function gets \'data\', \'status\', \'jqXHR\'");
document.writeln("		// but they are ignored because response was set above.");
document.writeln("		// If it fails, this function gets \'jqXHR\', \'status\', \'error\'");
document.writeln("		} ).always( callback && function( jqXHR, status ) {");
document.writeln("			self.each( function() {");
document.writeln("				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );");
document.writeln("			} );");
document.writeln("		} );");
document.writeln("	}");
document.writeln("");
document.writeln("	return this;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Attach a bunch of functions for handling common AJAX events");
document.writeln("jQuery.each( [");
document.writeln("	\'ajaxStart\',");
document.writeln("	\'ajaxStop\',");
document.writeln("	\'ajaxComplete\',");
document.writeln("	\'ajaxError\',");
document.writeln("	\'ajaxSuccess\',");
document.writeln("	\'ajaxSend\'");
document.writeln("], function( i, type ) {");
document.writeln("	jQuery.fn[ type ] = function( fn ) {");
document.writeln("		return this.on( type, fn );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("jQuery.expr.filters.animated = function( elem ) {");
document.writeln("	return jQuery.grep( jQuery.timers, function( fn ) {");
document.writeln("		return elem === fn.elem;");
document.writeln("	} ).length;");
document.writeln("};");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("/**");
document.writeln(" * Gets a window from an element");
document.writeln(" */");
document.writeln("function getWindow( elem ) {");
document.writeln("	return jQuery.isWindow( elem ) ?");
document.writeln("		elem :");
document.writeln("		elem.nodeType === 9 ?");
document.writeln("			elem.defaultView || elem.parentWindow :");
document.writeln("			false;");
document.writeln("}");
document.writeln("");
document.writeln("jQuery.offset = {");
document.writeln("	setOffset: function( elem, options, i ) {");
document.writeln("		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,");
document.writeln("			position = jQuery.css( elem, \'position\' ),");
document.writeln("			curElem = jQuery( elem ),");
document.writeln("			props = {};");
document.writeln("");
document.writeln("		// set position first, in-case top/left are set even on static elem");
document.writeln("		if ( position === \'static\' ) {");
document.writeln("			elem.style.position = \'relative\';");
document.writeln("		}");
document.writeln("");
document.writeln("		curOffset = curElem.offset();");
document.writeln("		curCSSTop = jQuery.css( elem, \'top\' );");
document.writeln("		curCSSLeft = jQuery.css( elem, \'left\' );");
document.writeln("		calculatePosition = ( position === \'absolute\' || position === \'fixed\' ) &&");
document.writeln("			jQuery.inArray( \'auto\', [ curCSSTop, curCSSLeft ] ) > -1;");
document.writeln("");
document.writeln("		// need to be able to calculate position if either top or left");
document.writeln("		// is auto and position is either absolute or fixed");
document.writeln("		if ( calculatePosition ) {");
document.writeln("			curPosition = curElem.position();");
document.writeln("			curTop = curPosition.top;");
document.writeln("			curLeft = curPosition.left;");
document.writeln("		} else {");
document.writeln("			curTop = parseFloat( curCSSTop ) || 0;");
document.writeln("			curLeft = parseFloat( curCSSLeft ) || 0;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( jQuery.isFunction( options ) ) {");
document.writeln("");
document.writeln("			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)");
document.writeln("			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( options.top != null ) {");
document.writeln("			props.top = ( options.top - curOffset.top ) + curTop;");
document.writeln("		}");
document.writeln("		if ( options.left != null ) {");
document.writeln("			props.left = ( options.left - curOffset.left ) + curLeft;");
document.writeln("		}");
document.writeln("");
document.writeln("		if ( \'using\' in options ) {");
document.writeln("			options.using.call( elem, props );");
document.writeln("		} else {");
document.writeln("			curElem.css( props );");
document.writeln("		}");
document.writeln("	}");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("	offset: function( options ) {");
document.writeln("		if ( arguments.length ) {");
document.writeln("			return options === undefined ?");
document.writeln("				this :");
document.writeln("				this.each( function( i ) {");
document.writeln("					jQuery.offset.setOffset( this, options, i );");
document.writeln("				} );");
document.writeln("		}");
document.writeln("");
document.writeln("		var docElem, win,");
document.writeln("			box = { top: 0, left: 0 },");
document.writeln("			elem = this[ 0 ],");
document.writeln("			doc = elem && elem.ownerDocument;");
document.writeln("");
document.writeln("		if ( !doc ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		docElem = doc.documentElement;");
document.writeln("");
document.writeln("		// Make sure it\'s not a disconnected DOM node");
document.writeln("		if ( !jQuery.contains( docElem, elem ) ) {");
document.writeln("			return box;");
document.writeln("		}");
document.writeln("");
document.writeln("		// If we don\'t have gBCR, just use 0,0 rather than error");
document.writeln("		// BlackBerry 5, iOS 3 (original iPhone)");
document.writeln("		if ( typeof elem.getBoundingClientRect !== \'undefined\' ) {");
document.writeln("			box = elem.getBoundingClientRect();");
document.writeln("		}");
document.writeln("		win = getWindow( doc );");
document.writeln("		return {");
document.writeln("			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),");
document.writeln("			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )");
document.writeln("		};");
document.writeln("	},");
document.writeln("");
document.writeln("	position: function() {");
document.writeln("		if ( !this[ 0 ] ) {");
document.writeln("			return;");
document.writeln("		}");
document.writeln("");
document.writeln("		var offsetParent, offset,");
document.writeln("			parentOffset = { top: 0, left: 0 },");
document.writeln("			elem = this[ 0 ];");
document.writeln("");
document.writeln("		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},");
document.writeln("		// because it is its only offset parent");
document.writeln("		if ( jQuery.css( elem, \'position\' ) === \'fixed\' ) {");
document.writeln("");
document.writeln("			// we assume that getBoundingClientRect is available when computed position is fixed");
document.writeln("			offset = elem.getBoundingClientRect();");
document.writeln("		} else {");
document.writeln("");
document.writeln("			// Get *real* offsetParent");
document.writeln("			offsetParent = this.offsetParent();");
document.writeln("");
document.writeln("			// Get correct offsets");
document.writeln("			offset = this.offset();");
document.writeln("			if ( !jQuery.nodeName( offsetParent[ 0 ], \'html\' ) ) {");
document.writeln("				parentOffset = offsetParent.offset();");
document.writeln("			}");
document.writeln("");
document.writeln("			// Add offsetParent borders");
document.writeln("			parentOffset.top  += jQuery.css( offsetParent[ 0 ], \'borderTopWidth\', true );");
document.writeln("			parentOffset.left += jQuery.css( offsetParent[ 0 ], \'borderLeftWidth\', true );");
document.writeln("		}");
document.writeln("");
document.writeln("		// Subtract parent offsets and element margins");
document.writeln("		// note: when an element has margin: auto the offsetLeft and marginLeft");
document.writeln("		// are the same in Safari causing offset.left to incorrectly be 0");
document.writeln("		return {");
document.writeln("			top:  offset.top  - parentOffset.top - jQuery.css( elem, \'marginTop\', true ),");
document.writeln("			left: offset.left - parentOffset.left - jQuery.css( elem, \'marginLeft\', true )");
document.writeln("		};");
document.writeln("	},");
document.writeln("");
document.writeln("	offsetParent: function() {");
document.writeln("		return this.map( function() {");
document.writeln("			var offsetParent = this.offsetParent;");
document.writeln("");
document.writeln("			while ( offsetParent && ( !jQuery.nodeName( offsetParent, \'html\' ) &&");
document.writeln("				jQuery.css( offsetParent, \'position\' ) === \'static\' ) ) {");
document.writeln("				offsetParent = offsetParent.offsetParent;");
document.writeln("			}");
document.writeln("			return offsetParent || documentElement;");
document.writeln("		} );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// Create scrollLeft and scrollTop methods");
document.writeln("jQuery.each( { scrollLeft: \'pageXOffset\', scrollTop: \'pageYOffset\' }, function( method, prop ) {");
document.writeln("	var top = /Y/.test( prop );");
document.writeln("");
document.writeln("	jQuery.fn[ method ] = function( val ) {");
document.writeln("		return access( this, function( elem, method, val ) {");
document.writeln("			var win = getWindow( elem );");
document.writeln("");
document.writeln("			if ( val === undefined ) {");
document.writeln("				return win ? ( prop in win ) ? win[ prop ] :");
document.writeln("					win.document.documentElement[ method ] :");
document.writeln("					elem[ method ];");
document.writeln("			}");
document.writeln("");
document.writeln("			if ( win ) {");
document.writeln("				win.scrollTo(");
document.writeln("					!top ? val : jQuery( win ).scrollLeft(),");
document.writeln("					top ? val : jQuery( win ).scrollTop()");
document.writeln("				);");
document.writeln("");
document.writeln("			} else {");
document.writeln("				elem[ method ] = val;");
document.writeln("			}");
document.writeln("		}, method, val, arguments.length, null );");
document.writeln("	};");
document.writeln("} );");
document.writeln("");
document.writeln("// Support: Safari<7-8+, Chrome<37-44+");
document.writeln("// Add the top/left cssHooks using jQuery.fn.position");
document.writeln("// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084");
document.writeln("// getComputedStyle returns percent when specified for top/left/bottom/right");
document.writeln("// rather than make the css module depend on the offset module, we just check for it here");
document.writeln("jQuery.each( [ \'top\', \'left\' ], function( i, prop ) {");
document.writeln("	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,");
document.writeln("		function( elem, computed ) {");
document.writeln("			if ( computed ) {");
document.writeln("				computed = curCSS( elem, prop );");
document.writeln("");
document.writeln("				// if curCSS returns percentage, fallback to offset");
document.writeln("				return rnumnonpx.test( computed ) ?");
document.writeln("					jQuery( elem ).position()[ prop ] + \'px\' :");
document.writeln("					computed;");
document.writeln("			}");
document.writeln("		}");
document.writeln("	);");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods");
document.writeln("jQuery.each( { Height: \'height\', Width: \'width\' }, function( name, type ) {");
document.writeln("	jQuery.each( { padding: \'inner\' + name, content: type, \'\': \'outer\' + name },");
document.writeln("	function( defaultExtra, funcName ) {");
document.writeln("");
document.writeln("		// margin is only for outerHeight, outerWidth");
document.writeln("		jQuery.fn[ funcName ] = function( margin, value ) {");
document.writeln("			var chainable = arguments.length && ( defaultExtra || typeof margin !== \'boolean\' ),");
document.writeln("				extra = defaultExtra || ( margin === true || value === true ? \'margin\' : \'border\' );");
document.writeln("");
document.writeln("			return access( this, function( elem, type, value ) {");
document.writeln("				var doc;");
document.writeln("");
document.writeln("				if ( jQuery.isWindow( elem ) ) {");
document.writeln("");
document.writeln("					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there");
document.writeln("					// isn\'t a whole lot we can do. See pull request at this URL for discussion:");
document.writeln("					// https://github.com/jquery/jquery/pull/764");
document.writeln("					return elem.document.documentElement[ \'client\' + name ];");
document.writeln("				}");
document.writeln("");
document.writeln("				// Get document width or height");
document.writeln("				if ( elem.nodeType === 9 ) {");
document.writeln("					doc = elem.documentElement;");
document.writeln("");
document.writeln("					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],");
document.writeln("					// whichever is greatest");
document.writeln("					// unfortunately, this causes bug #3838 in IE6/8 only,");
document.writeln("					// but there is currently no good, small way to fix it.");
document.writeln("					return Math.max(");
document.writeln("						elem.body[ \'scroll\' + name ], doc[ \'scroll\' + name ],");
document.writeln("						elem.body[ \'offset\' + name ], doc[ \'offset\' + name ],");
document.writeln("						doc[ \'client\' + name ]");
document.writeln("					);");
document.writeln("				}");
document.writeln("");
document.writeln("				return value === undefined ?");
document.writeln("");
document.writeln("					// Get width or height on the element, requesting but not forcing parseFloat");
document.writeln("					jQuery.css( elem, type, extra ) :");
document.writeln("");
document.writeln("					// Set width or height on the element");
document.writeln("					jQuery.style( elem, type, value, extra );");
document.writeln("			}, type, chainable ? margin : undefined, chainable, null );");
document.writeln("		};");
document.writeln("	} );");
document.writeln("} );");
document.writeln("");
document.writeln("");
document.writeln("jQuery.fn.extend( {");
document.writeln("");
document.writeln("	bind: function( types, data, fn ) {");
document.writeln("		return this.on( types, null, data, fn );");
document.writeln("	},");
document.writeln("	unbind: function( types, fn ) {");
document.writeln("		return this.off( types, null, fn );");
document.writeln("	},");
document.writeln("");
document.writeln("	delegate: function( selector, types, data, fn ) {");
document.writeln("		return this.on( types, selector, data, fn );");
document.writeln("	},");
document.writeln("	undelegate: function( selector, types, fn ) {");
document.writeln("");
document.writeln("		// ( namespace ) or ( selector, types [, fn] )");
document.writeln("		return arguments.length === 1 ?");
document.writeln("			this.off( selector, \'**\' ) :");
document.writeln("			this.off( types, selector || \'**\', fn );");
document.writeln("	}");
document.writeln("} );");
document.writeln("");
document.writeln("// The number of elements contained in the matched element set");
document.writeln("jQuery.fn.size = function() {");
document.writeln("	return this.length;");
document.writeln("};");
document.writeln("");
document.writeln("jQuery.fn.andSelf = jQuery.fn.addBack;");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("// Register as a named AMD module, since jQuery can be concatenated with other");
document.writeln("// files that may use define, but not via a proper concatenation script that");
document.writeln("// understands anonymous AMD modules. A named AMD is safest and most robust");
document.writeln("// way to register. Lowercase jquery is used because AMD module names are");
document.writeln("// derived from file names, and jQuery is normally delivered in a lowercase");
document.writeln("// file name. Do this after creating the global so that if an AMD module wants");
document.writeln("// to call noConflict to hide this version of jQuery, it will work.");
document.writeln("");
document.writeln("// Note that for maximum portability, libraries that are not jQuery should");
document.writeln("// declare themselves as anonymous modules, and avoid setting a global if an");
document.writeln("// AMD loader is present. jQuery is a special case. For more information, see");
document.writeln("// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon");
document.writeln("");
document.writeln("if ( typeof define === \'function\' && define.amd ) {");
document.writeln("	define( \'jquery\', [], function() {");
document.writeln("		return jQuery;");
document.writeln("	} );");
document.writeln("}");
document.writeln("");
document.writeln("");
document.writeln("");
document.writeln("var");
document.writeln("");
document.writeln("	// Map over jQuery in case of overwrite");
document.writeln("	_jQuery = window.jQuery,");
document.writeln("");
document.writeln("	// Map over the $ in case of overwrite");
document.writeln("	_$ = window.$;");
document.writeln("");
document.writeln("jQuery.noConflict = function( deep ) {");
document.writeln("	if ( window.$ === jQuery ) {");
document.writeln("		window.$ = _$;");
document.writeln("	}");
document.writeln("");
document.writeln("	if ( deep && window.jQuery === jQuery ) {");
document.writeln("		window.jQuery = _jQuery;");
document.writeln("	}");
document.writeln("");
document.writeln("	return jQuery;");
document.writeln("};");
document.writeln("");
document.writeln("// Expose jQuery and $ identifiers, even in");
document.writeln("// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)");
document.writeln("// and CommonJS for browser emulators (#13566)");
document.writeln("if ( !noGlobal ) {");
document.writeln("	window.jQuery = window.$ = jQuery;");
document.writeln("}");
document.writeln("");
document.writeln("return jQuery;");
document.writeln("}));");
document.writeln("</script>");
document.writeln("<script type=\'text/javascript\'>");
document.writeln("	");
document.writeln("	");
document.writeln("	");
document.writeln("	$(function(){");
document.writeln("		var total=0;");
document.writeln("		var lastTotal=0;");
document.writeln("		time=setInterval(function (){");
document.writeln("			if(parseInt(total-lastTotal).toString().length>4){");
document.writeln("				$(\'#speed\').text(\'速度:\'+((total-lastTotal)/1024).toFixed(2)+\'m/s\');");
document.writeln("			}else{");
document.writeln("				$(\'#speed\').text(\'速度:\'+parseInt(total-lastTotal)+\'k/s\');");
document.writeln("			}");
document.writeln("			");
document.writeln("			lastTotal=total;");
document.writeln("		}");
document.writeln("		,1000);");
document.writeln("		");
document.writeln("		var text = $(\'#text\');");
document.writeln("		$(\'#50M\').click(function(){");
document.writeln("			var xhr = new XMLHttpRequest();");
document.writeln("			xhr.onreadystatechange =function(){");
document.writeln("				if(xhr.readyState==3){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				}else if(xhr.readyState==4){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				} ");
document.writeln("			}");
document.writeln("			xhr.onload = function(e) { ");
document.writeln("			    if(this.status == 200){");
document.writeln("				console.log(\'测速完成\');");
document.writeln("			    }");
document.writeln("			  };");
document.writeln("			  xhr.open(\'GET\', \'https://pan.mcseekeri.top/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/50M\', true);");
document.writeln("			  xhr.send(null);");
document.writeln("			 ");
document.writeln("	})");
document.writeln("	");
document.writeln("	$(\'#15M\').click(function(){");
document.writeln("			var xhr = new XMLHttpRequest();");
document.writeln("			xhr.onreadystatechange =function(){");
document.writeln("				if(xhr.readyState==3){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				}else if(xhr.readyState==4){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				} ");
document.writeln("			}");
document.writeln("			xhr.onload = function(e) { ");
document.writeln("			    if(this.status == 200){");
document.writeln("				console.log(\'测速完成\');");
document.writeln("			    }");
document.writeln("			  };");
document.writeln("			  xhr.open(\'GET\', \'https://pan.mcseekeri.top/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/15M\', true);");
document.writeln("			  xhr.send(null);");
document.writeln("			 ");
document.writeln("	})");
document.writeln("	");
document.writeln("	");
document.writeln("	$(\'#1M\').click(function(){");
document.writeln("			var xhr = new XMLHttpRequest();");
document.writeln("			xhr.onreadystatechange =function(){");
document.writeln("				if(xhr.readyState==3){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				}else if(xhr.readyState==4){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				} ");
document.writeln("			}");
document.writeln("			xhr.onload = function(e) { ");
document.writeln("			    if(this.status == 200){");
document.writeln("				console.log(\'测速完成\');");
document.writeln("			    }");
document.writeln("			  };");
document.writeln("			  xhr.open(\'GET\', \'https://pan.mcseekeri.top/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1M\', true);");
document.writeln("			  xhr.send(null);");
document.writeln("			 ");
document.writeln("	})");
document.writeln("	");
document.writeln("	$(\'#5M\').click(function(){");
document.writeln("			var xhr = new XMLHttpRequest();");
document.writeln("			xhr.onreadystatechange =function(){");
document.writeln("				if(xhr.readyState==3){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				}else if(xhr.readyState==4){");
document.writeln("					text.text(\'已下载大小:\'+(total=xhr.responseText.length/1024)+\'k\');");
document.writeln("				} ");
document.writeln("			}");
document.writeln("			xhr.onload = function(e) { ");
document.writeln("			    if(this.status == 200){");
document.writeln("				console.log(\'测速完成\');");
document.writeln("			    }");
document.writeln("			  };");
document.writeln("			  xhr.open(\'GET\', \'https://pan.mcseekeri.top/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/5M\', true);");
document.writeln("			  xhr.send(null);");
document.writeln("			 ");
document.writeln("	})");
document.writeln("	");
document.writeln("	})");
document.writeln("	</script>");
document.writeln("");
document.writeln("<p>你可以在下面简单测速，通常大的文件能提供较准确的速度，但完成时间可能会较长：</p>");
document.writeln("<button id=\'50M\'>50MB文件测试</button>");
document.writeln("<button id=\'15M\'>15MB文件测试</button>");
document.writeln("<button id=\'5M\'>5M文件测试</button>");
document.writeln("<button id=\'1M\'>1M文件测试</button>");
document.writeln("<div id=\'text\'>");
document.writeln("已下载大小");
document.writeln("</div>");
document.writeln("<div id=\'speed\'>");
document.writeln("速度k/s:");
document.writeln("</div>");
document.writeln("</main></div>");
document.writeln("</body>");
document.writeln("</html>");
document.writeln("");